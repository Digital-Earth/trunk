<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Full_Logo_no_background" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\full logo no background.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MailtoString" xml:space="preserve">
    <value>mailto:feedback@pyxisinnovation.com?subject=Customer feedback for {0} Version {1} </value>
  </data>
  <data name="MultipleProgressMessage" xml:space="preserve">
    <value>Processing...</value>
    <comment>The message used by the ProgressManager when there are multiple processes using the progress manager.</comment>
  </data>
  <data name="ObjectObserverName" xml:space="preserve">
    <value>Object Proxy observer &lt;{0}&gt;</value>
    <comment>A proxy observer that is not associated with an actual observer.</comment>
  </data>
  <data name="TestingError" xml:space="preserve">
    <value>Testing Error</value>
    <comment>The message box caption when a testing error occurs.</comment>
  </data>
  <data name="UnitTestFailString" xml:space="preserve">
    <value>Failure occurred in Unit Tests. See trace log for more information.</value>
    <comment>The unit test failure message.</comment>
  </data>
  <data name="PipelineExportSaveAsType" xml:space="preserve">
    <value>WorldView Pipeline</value>
    <comment>The text to show in the 'Save as type' section of the file save dialog when exporting a pipeline.</comment>
  </data>
  <data name="HelpTitle" xml:space="preserve">
    <value>PYXIS Help</value>
  </data>
  <data name="WIKIUrl" xml:space="preserve">
    <value>http://www.pyxisinnovation.com/pyxwiki/index.php?title=</value>
  </data>
  <data name="CantExport" xml:space="preserve">
    <value>Unable to export the selected process.</value>
  </data>
  <data name="ExportCompleteText" xml:space="preserve">
    <value>The export has completed. The exported image has been saved to</value>
  </data>
  <data name="ExportCompleteTitle" xml:space="preserve">
    <value>Export Complete</value>
  </data>
  <data name="ExportErrorText" xml:space="preserve">
    <value>Could not export image.</value>
  </data>
  <data name="ExportErrorTitle" xml:space="preserve">
    <value>Exporting Error</value>
    <comment>Error for JPEG exporing.</comment>
  </data>
  <data name="SaveExportDialogTitle" xml:space="preserve">
    <value>Save Exported Pipeline as...</value>
  </data>
  <data name="FailedToOpenFile" xml:space="preserve">
    <value>Failed to open {0}</value>
  </data>
  <data name="FileExists" xml:space="preserve">
    <value>Could not open {0}  because it already exists in the library, or a pipeline could not be built for this file.</value>
    <comment>Failure when trying to do a data import from the command line.</comment>
  </data>
  <data name="ChecksumCacheDir" xml:space="preserve">
    <value>checksumCache</value>
    <comment>The name of the directory to use for the checksum cache.</comment>
  </data>
  <data name="ChecksumCacheFile" xml:space="preserve">
    <value>checksumCache.dat</value>
    <comment>The name of the file to use for the checksum cache.</comment>
  </data>
</root>