/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CSharpFunctionProvider_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CSharpFunctionProvider_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CSharpFunctionProvider_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CSharpFunctionProvider_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CSharpFunctionProvider_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public CSharpFunctionProvider_SPtr() : this(pyxlibPINVOKE.new_CSharpFunctionProvider_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpFunctionProvider_SPtr(CSharpFunctionProvider p, bool add_ref) : this(pyxlibPINVOKE.new_CSharpFunctionProvider_SPtr__SWIG_1(CSharpFunctionProvider.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpFunctionProvider_SPtr(CSharpFunctionProvider p) : this(pyxlibPINVOKE.new_CSharpFunctionProvider_SPtr__SWIG_2(CSharpFunctionProvider.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpFunctionProvider_SPtr(CSharpFunctionProvider_SPtr rhs) : this(pyxlibPINVOKE.new_CSharpFunctionProvider_SPtr__SWIG_3(CSharpFunctionProvider_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.CSharpFunctionProvider_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(CSharpFunctionProvider rhs) {
    pyxlibPINVOKE.CSharpFunctionProvider_SPtr_reset__SWIG_1(swigCPtr, CSharpFunctionProvider.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpFunctionProvider get() {
    IntPtr cPtr = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_get(swigCPtr);
    CSharpFunctionProvider ret = (cPtr == IntPtr.Zero) ? null : new CSharpFunctionProvider(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CSharpFunctionProvider __ref__() {
    CSharpFunctionProvider ret = new CSharpFunctionProvider(pyxlibPINVOKE.CSharpFunctionProvider_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CSharpFunctionProvider __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.CSharpFunctionProvider_SPtr___deref__(swigCPtr);
    CSharpFunctionProvider ret = (cPtr == IntPtr.Zero) ? null : new CSharpFunctionProvider(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(CSharpFunctionProvider_SPtr rhs) {
    pyxlibPINVOKE.CSharpFunctionProvider_SPtr_swap(swigCPtr, CSharpFunctionProvider_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string applyXsltTransform(string transform, string inputXml) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_applyXsltTransform(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(transform), pyxlibPINVOKE.UnmanagedString.Create(inputXml)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public bool doesXPathMatch(string xPathExpression, string inputXml) {
    bool ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_doesXPathMatch(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(xPathExpression), pyxlibPINVOKE.UnmanagedString.Create(inputXml));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isWellFormedURI(string checkUri) {
    bool ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_isWellFormedURI(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(checkUri));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string setDefaultValueForUrlQueryParameter(string baseUri, string key, string value) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_setDefaultValueForUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string overwriteUrlQueryParameter(string baseUri, string key, string value) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_overwriteUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string removeUrlQueryParameter(string baseUri, string key) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_removeUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getUrlQueryParameter(string baseUri, string key) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_getUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getUrlHost(string baseUri) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_getUrlHost(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string XMLSerialize(Vector_String serializeMe) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_XMLSerialize(swigCPtr, Vector_String.getCPtr(serializeMe)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public bool XMLDeserialize(Vector_String target, string source) {
    bool ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_XMLDeserialize(swigCPtr, Vector_String.getCPtr(target), pyxlibPINVOKE.UnmanagedString.Create(source));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getSerializedManifest(IPath_SPtr spPathProc) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_getSerializedManifest(swigCPtr, IPath_SPtr.getCPtr(spPathProc)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getSerializedManifestForFile(string filename) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_getSerializedManifestForFile(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(filename)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getIdentity(string strManifest) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_getIdentity(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strManifest)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public int release() {
    int ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addRef() {
    int ret = pyxlibPINVOKE.CSharpFunctionProvider_SPtr_addRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CSharpFunctionProvider_SPtr getCSharpFunctionProvider() {
    CSharpFunctionProvider_SPtr ret = new CSharpFunctionProvider_SPtr(pyxlibPINVOKE.CSharpFunctionProvider_SPtr_getCSharpFunctionProvider(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCSharpFunctionProvider(CSharpFunctionProvider_SPtr spProvider) {
    pyxlibPINVOKE.CSharpFunctionProvider_SPtr_setCSharpFunctionProvider(swigCPtr, CSharpFunctionProvider_SPtr.getCPtr(spProvider));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
