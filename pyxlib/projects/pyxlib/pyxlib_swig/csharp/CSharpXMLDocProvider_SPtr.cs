/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CSharpXMLDocProvider_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CSharpXMLDocProvider_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CSharpXMLDocProvider_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CSharpXMLDocProvider_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CSharpXMLDocProvider_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public CSharpXMLDocProvider_SPtr() : this(pyxlibPINVOKE.new_CSharpXMLDocProvider_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpXMLDocProvider_SPtr(CSharpXMLDocProvider p, bool add_ref) : this(pyxlibPINVOKE.new_CSharpXMLDocProvider_SPtr__SWIG_1(CSharpXMLDocProvider.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpXMLDocProvider_SPtr(CSharpXMLDocProvider p) : this(pyxlibPINVOKE.new_CSharpXMLDocProvider_SPtr__SWIG_2(CSharpXMLDocProvider.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpXMLDocProvider_SPtr(CSharpXMLDocProvider_SPtr rhs) : this(pyxlibPINVOKE.new_CSharpXMLDocProvider_SPtr__SWIG_3(CSharpXMLDocProvider_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(CSharpXMLDocProvider rhs) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_reset__SWIG_1(swigCPtr, CSharpXMLDocProvider.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpXMLDocProvider get() {
    IntPtr cPtr = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_get(swigCPtr);
    CSharpXMLDocProvider ret = (cPtr == IntPtr.Zero) ? null : new CSharpXMLDocProvider(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CSharpXMLDocProvider __ref__() {
    CSharpXMLDocProvider ret = new CSharpXMLDocProvider(pyxlibPINVOKE.CSharpXMLDocProvider_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CSharpXMLDocProvider __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr___deref__(swigCPtr);
    CSharpXMLDocProvider ret = (cPtr == IntPtr.Zero) ? null : new CSharpXMLDocProvider(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(CSharpXMLDocProvider_SPtr rhs) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_swap(swigCPtr, CSharpXMLDocProvider_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int createDocument(string xmlString, bool removeNamespaces) {
    int ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_createDocument(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(xmlString), removeNamespaces);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyDocument(int docHandle) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_destroyDocument(swigCPtr, docHandle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveToFile(int docHandle, string path) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_saveToFile(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(path));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getNodesCount(int docHandle, string xmlPath) {
    int ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_getNodesCount(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasNode(int docHandle, string xmlPath) {
    bool ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_hasNode(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNodeText(int docHandle, string xmlPath, string text) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_setNodeText(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(text));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getNodeText(int docHandle, string xmlPath) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_getNodeText(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getInnerXMLString(int docHandle, string xmlPath) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_getInnerXMLString(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setInnerXMLString(int docHandle, string xmlPath, string innerXml) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_setInnerXMLString(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(innerXml));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getOuterXMLString(int docHandle, string xmlPath) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_getOuterXMLString(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void removeNode(int docHandle, string xmlPath) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_removeNode(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addChild(int docHandle, string xmlPath, string xmlNode) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_addChild(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(xmlNode));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addChildWithInnerText(int docHandle, string xmlPath, string xmlNode, string innerText) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_addChildWithInnerText(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(xmlNode), pyxlibPINVOKE.UnmanagedString.Create(innerText));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasAttribute(int docHandle, string xmlPath, string attributeName) {
    bool ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_hasAttribute(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getAttributeValue(int docHandle, string xmlPath, string attributeName) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_getAttributeValue(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setAttributeValue(int docHandle, string xmlPath, string attributeName, string attributeValue) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_setAttributeValue(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName), pyxlibPINVOKE.UnmanagedString.Create(attributeValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addAttribute(int docHandle, string xmlPath, string attributeName, string attributeValue) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_addAttribute(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName), pyxlibPINVOKE.UnmanagedString.Create(attributeValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAttribute(int docHandle, string xmlPath, string attributeName) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_removeAttribute(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addNamespace(int docHandle, string prefix, string uri) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_addNamespace(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(prefix), pyxlibPINVOKE.UnmanagedString.Create(uri));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int release() {
    int ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addRef() {
    int ret = pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_addRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CSharpXMLDocProvider_SPtr getCSharpXMLDocProvider() {
    CSharpXMLDocProvider_SPtr ret = new CSharpXMLDocProvider_SPtr(pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_getCSharpXMLDocProvider(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCSharpXMLDocProvider(CSharpXMLDocProvider_SPtr spProvider) {
    pyxlibPINVOKE.CSharpXMLDocProvider_SPtr_setCSharpXMLDocProvider(swigCPtr, CSharpXMLDocProvider_SPtr.getCPtr(spProvider));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
