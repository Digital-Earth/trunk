/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CacheNeedsTileEvent : CacheEvent {
  private HandleRef swigCPtr;

  public CacheNeedsTileEvent(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.CacheNeedsTileEventUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CacheNeedsTileEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CacheNeedsTileEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CacheNeedsTileEvent(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static CacheNeedsTileEvent_SPtr create(ICache_SPtr spCache, PYXTile_SPtr spTile) {
    CacheNeedsTileEvent_SPtr ret = new CacheNeedsTileEvent_SPtr(pyxlibPINVOKE.CacheNeedsTileEvent_create(ICache_SPtr.getCPtr(spCache), PYXTile_SPtr.getCPtr(spTile)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTile_SPtr getTile() {
    PYXTile_SPtr ret = new PYXTile_SPtr(pyxlibPINVOKE.CacheNeedsTileEvent_getTile(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getDownloadFailed() {
    bool ret = pyxlibPINVOKE.CacheNeedsTileEvent_getDownloadFailed(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDownloadFailed(bool bDownloadFailed) {
    pyxlibPINVOKE.CacheNeedsTileEvent_setDownloadFailed(swigCPtr, bDownloadFailed);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static CacheNeedsTileEvent dynamic_cast(NotifierEvent pSource) {
    IntPtr cPtr = pyxlibPINVOKE.CacheNeedsTileEvent_dynamic_cast(NotifierEvent.getCPtr(pSource));
    CacheNeedsTileEvent ret = (cPtr == IntPtr.Zero) ? null : new CacheNeedsTileEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
