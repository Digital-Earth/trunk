/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Command : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Command(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Command obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Command() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_Command(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_release(swigCPtr) : pyxlibPINVOKE.Command_releaseSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_addRef(swigCPtr) : pyxlibPINVOKE.Command_addRefSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getName() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.Command_getName(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getLongName() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getLongName(swigCPtr) : pyxlibPINVOKE.Command_getLongNameSwigExplicitCommand(swigCPtr)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual bool execute() {
    bool ret = pyxlibPINVOKE.Command_execute(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string drag() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_drag(swigCPtr) : pyxlibPINVOKE.Command_dragSwigExplicitCommand(swigCPtr)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual bool undo() {
    bool ret = pyxlibPINVOKE.Command_undo(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool redo() {
    bool ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_redo(swigCPtr) : pyxlibPINVOKE.Command_redoSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getCategory() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getCategory(swigCPtr) : pyxlibPINVOKE.Command_getCategorySwigExplicitCommand(swigCPtr)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void setCategory(string strCategory) {
    if (this.GetType() == typeof(Command)) pyxlibPINVOKE.Command_setCategory(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strCategory)); else pyxlibPINVOKE.Command_setCategorySwigExplicitCommand(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strCategory));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int getPriority() {
    int ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getPriority(swigCPtr) : pyxlibPINVOKE.Command_getPrioritySwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setPriority(int priority) {
    if (this.GetType() == typeof(Command)) pyxlibPINVOKE.Command_setPriority(swigCPtr, priority); else pyxlibPINVOKE.Command_setPrioritySwigExplicitCommand(swigCPtr, priority);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector_Command getSubordinates() {
    Vector_Command ret = new Vector_Command(((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getSubordinates(swigCPtr) : pyxlibPINVOKE.Command_getSubordinatesSwigExplicitCommand(swigCPtr)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void addSubordinate(Command_SPtr spCommand) {
    if (this.GetType() == typeof(Command)) pyxlibPINVOKE.Command_addSubordinate(swigCPtr, Command_SPtr.getCPtr(spCommand)); else pyxlibPINVOKE.Command_addSubordinateSwigExplicitCommand(swigCPtr, Command_SPtr.getCPtr(spCommand));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getRecordable() {
    bool ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getRecordable(swigCPtr) : pyxlibPINVOKE.Command_getRecordableSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getUndoable() {
    bool ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getUndoable(swigCPtr) : pyxlibPINVOKE.Command_getUndoableSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getEnabled() {
    bool ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getEnabled(swigCPtr) : pyxlibPINVOKE.Command_getEnabledSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getChecked() {
    bool ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getChecked(swigCPtr) : pyxlibPINVOKE.Command_getCheckedSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Command.CommandType getType() {
    Command.CommandType ret = (Command.CommandType)((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getType(swigCPtr) : pyxlibPINVOKE.Command_getTypeSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getToolTip() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_getToolTip(swigCPtr) : pyxlibPINVOKE.Command_getToolTipSwigExplicitCommand(swigCPtr)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual bool hasSubordinates() {
    bool ret = ((this.GetType() == typeof(Command)) ? pyxlibPINVOKE.Command_hasSubordinates(swigCPtr) : pyxlibPINVOKE.Command_hasSubordinatesSwigExplicitCommand(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCommandException getLastException() {
    IntPtr cPtr = pyxlibPINVOKE.Command_getLastException(swigCPtr);
    PYXCommandException ret = (cPtr == IntPtr.Zero) ? null : new PYXCommandException(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLastException(PYXCommandException pLastException) {
    pyxlibPINVOKE.Command_setLastException(swigCPtr, PYXCommandException.getCPtr(pLastException));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier Executed() {
    Notifier ret = new Notifier(pyxlibPINVOKE.Command_Executed(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void notifyCommandExecuted(ProcRef procRef) {
    pyxlibPINVOKE.Command_notifyCommandExecuted(swigCPtr, ProcRef.getCPtr(procRef));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  protected Command() : this(pyxlibPINVOKE.new_Command(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("release", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCommand_0(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCommand_1(SwigDirectoraddRef);
    if (SwigDerivedClassHasMethod("getName", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCommand_2(SwigDirectorgetName);
    if (SwigDerivedClassHasMethod("getLongName", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCommand_3(SwigDirectorgetLongName);
    if (SwigDerivedClassHasMethod("execute", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateCommand_4(SwigDirectorexecute);
    if (SwigDerivedClassHasMethod("drag", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateCommand_5(SwigDirectordrag);
    if (SwigDerivedClassHasMethod("undo", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateCommand_6(SwigDirectorundo);
    if (SwigDerivedClassHasMethod("redo", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateCommand_7(SwigDirectorredo);
    if (SwigDerivedClassHasMethod("getCategory", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateCommand_8(SwigDirectorgetCategory);
    if (SwigDerivedClassHasMethod("setCategory", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateCommand_9(SwigDirectorsetCategory);
    if (SwigDerivedClassHasMethod("getPriority", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateCommand_10(SwigDirectorgetPriority);
    if (SwigDerivedClassHasMethod("setPriority", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateCommand_11(SwigDirectorsetPriority);
    if (SwigDerivedClassHasMethod("getSubordinates", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateCommand_12(SwigDirectorgetSubordinates);
    if (SwigDerivedClassHasMethod("addSubordinate", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateCommand_13(SwigDirectoraddSubordinate);
    if (SwigDerivedClassHasMethod("getRecordable", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateCommand_14(SwigDirectorgetRecordable);
    if (SwigDerivedClassHasMethod("getUndoable", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateCommand_15(SwigDirectorgetUndoable);
    if (SwigDerivedClassHasMethod("getEnabled", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateCommand_16(SwigDirectorgetEnabled);
    if (SwigDerivedClassHasMethod("getChecked", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateCommand_17(SwigDirectorgetChecked);
    if (SwigDerivedClassHasMethod("getType", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateCommand_18(SwigDirectorgetType);
    if (SwigDerivedClassHasMethod("getToolTip", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateCommand_19(SwigDirectorgetToolTip);
    if (SwigDerivedClassHasMethod("hasSubordinates", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateCommand_20(SwigDirectorhasSubordinates);
    pyxlibPINVOKE.Command_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Command));
    return hasDerivedMethod;
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  private IntPtr SwigDirectorgetName() {
    return pyxlibPINVOKE.UnmanagedString.Create(getName());
  }

  private IntPtr SwigDirectorgetLongName() {
    return pyxlibPINVOKE.UnmanagedString.Create(getLongName());
  }

  private bool SwigDirectorexecute() {
    return execute();
  }

  private IntPtr SwigDirectordrag() {
    return pyxlibPINVOKE.UnmanagedString.Create(drag());
  }

  private bool SwigDirectorundo() {
    return undo();
  }

  private bool SwigDirectorredo() {
    return redo();
  }

  private IntPtr SwigDirectorgetCategory() {
    return pyxlibPINVOKE.UnmanagedString.Create(getCategory());
  }

  private void SwigDirectorsetCategory(IntPtr strCategory) {
    setCategory(pyxlibPINVOKE.UnmanagedString.Consume(strCategory));
  }

  private int SwigDirectorgetPriority() {
    return getPriority();
  }

  private void SwigDirectorsetPriority(int priority) {
    setPriority(priority);
  }

  private IntPtr SwigDirectorgetSubordinates() {
    return Vector_Command.getCPtr(getSubordinates()).Handle;
  }

  private void SwigDirectoraddSubordinate(IntPtr spCommand) {
    addSubordinate(new Command_SPtr(spCommand, false));
  }

  private bool SwigDirectorgetRecordable() {
    return getRecordable();
  }

  private bool SwigDirectorgetUndoable() {
    return getUndoable();
  }

  private bool SwigDirectorgetEnabled() {
    return getEnabled();
  }

  private bool SwigDirectorgetChecked() {
    return getChecked();
  }

  private int SwigDirectorgetType() {
    return (int)getType();
  }

  private IntPtr SwigDirectorgetToolTip() {
    return pyxlibPINVOKE.UnmanagedString.Create(getToolTip());
  }

  private bool SwigDirectorhasSubordinates() {
    return hasSubordinates();
  }

  public delegate int SwigDelegateCommand_0();
  public delegate int SwigDelegateCommand_1();
  public delegate IntPtr SwigDelegateCommand_2();
  public delegate IntPtr SwigDelegateCommand_3();
  public delegate bool SwigDelegateCommand_4();
  public delegate IntPtr SwigDelegateCommand_5();
  public delegate bool SwigDelegateCommand_6();
  public delegate bool SwigDelegateCommand_7();
  public delegate IntPtr SwigDelegateCommand_8();
  public delegate void SwigDelegateCommand_9(IntPtr strCategory);
  public delegate int SwigDelegateCommand_10();
  public delegate void SwigDelegateCommand_11(int priority);
  public delegate IntPtr SwigDelegateCommand_12();
  public delegate void SwigDelegateCommand_13(IntPtr spCommand);
  public delegate bool SwigDelegateCommand_14();
  public delegate bool SwigDelegateCommand_15();
  public delegate bool SwigDelegateCommand_16();
  public delegate bool SwigDelegateCommand_17();
  public delegate int SwigDelegateCommand_18();
  public delegate IntPtr SwigDelegateCommand_19();
  public delegate bool SwigDelegateCommand_20();

  private SwigDelegateCommand_0 swigDelegate0;
  private SwigDelegateCommand_1 swigDelegate1;
  private SwigDelegateCommand_2 swigDelegate2;
  private SwigDelegateCommand_3 swigDelegate3;
  private SwigDelegateCommand_4 swigDelegate4;
  private SwigDelegateCommand_5 swigDelegate5;
  private SwigDelegateCommand_6 swigDelegate6;
  private SwigDelegateCommand_7 swigDelegate7;
  private SwigDelegateCommand_8 swigDelegate8;
  private SwigDelegateCommand_9 swigDelegate9;
  private SwigDelegateCommand_10 swigDelegate10;
  private SwigDelegateCommand_11 swigDelegate11;
  private SwigDelegateCommand_12 swigDelegate12;
  private SwigDelegateCommand_13 swigDelegate13;
  private SwigDelegateCommand_14 swigDelegate14;
  private SwigDelegateCommand_15 swigDelegate15;
  private SwigDelegateCommand_16 swigDelegate16;
  private SwigDelegateCommand_17 swigDelegate17;
  private SwigDelegateCommand_18 swigDelegate18;
  private SwigDelegateCommand_19 swigDelegate19;
  private SwigDelegateCommand_20 swigDelegate20;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] {  };
  private static Type[] swigMethodTypes4 = new Type[] {  };
  private static Type[] swigMethodTypes5 = new Type[] {  };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] {  };
  private static Type[] swigMethodTypes8 = new Type[] {  };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes10 = new Type[] {  };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes12 = new Type[] {  };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(Command_SPtr) };
  private static Type[] swigMethodTypes14 = new Type[] {  };
  private static Type[] swigMethodTypes15 = new Type[] {  };
  private static Type[] swigMethodTypes16 = new Type[] {  };
  private static Type[] swigMethodTypes17 = new Type[] {  };
  private static Type[] swigMethodTypes18 = new Type[] {  };
  private static Type[] swigMethodTypes19 = new Type[] {  };
  private static Type[] swigMethodTypes20 = new Type[] {  };
  public enum CommandType {
    knComboButton,
    knCheckBox,
    knMenuItem,
    knMenuSeparator,
    knUnspecified
  }

}
