/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ConstCoverage : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ConstCoverage(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ConstCoverage obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ConstCoverage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ConstCoverage(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.ConstCoverage_clsid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.ConstCoverage_aiid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int niid {
    get {
      int ret = pyxlibPINVOKE.ConstCoverage_niid_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ConstCoverage() : this(pyxlibPINVOKE.new_ConstCoverage(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void test() {
    pyxlibPINVOKE.ConstCoverage_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IUnknown_SPtr asIUnknown() {
    IUnknown_SPtr ret = new IUnknown_SPtr(pyxlibPINVOKE.ConstCoverage_asIUnknown(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int QueryInterface(GUID riid, SWIGTYPE_p_p_void ppObject) {
    int ret = pyxlibPINVOKE.ConstCoverage_QueryInterface(swigCPtr, GUID.getCPtr(riid), SWIGTYPE_p_p_void.getCPtr(ppObject));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint AddRef() {
    uint ret = pyxlibPINVOKE.ConstCoverage_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint Release() {
    uint ret = pyxlibPINVOKE.ConstCoverage_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProcessSpec_SPtr getSpecStatic() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.ConstCoverage_getSpecStatic(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ProcessSpec_SPtr getSpec() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.ConstCoverage_getSpec(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IUnknown_CSPtr getOutput() {
    IUnknown_CSPtr ret = new IUnknown_CSPtr(pyxlibPINVOKE.ConstCoverage_getOutput__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Attribute_Map getAttributes() {
    Attribute_Map ret = new Attribute_Map(pyxlibPINVOKE.ConstCoverage_getAttributes(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getAttributeSchema() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ConstCoverage_getAttributeSchema(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void setAttributes(Attribute_Map mapAttr) {
    pyxlibPINVOKE.ConstCoverage_setAttributes(swigCPtr, Attribute_Map.getCPtr(mapAttr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PYXValueTile_SPtr getFieldTile(PYXIcosIndex index, int nRes, int nFieldIndex) {
    PYXValueTile_SPtr ret = new PYXValueTile_SPtr(pyxlibPINVOKE.ConstCoverage_getFieldTile__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), nRes, nFieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValueTile_SPtr getFieldTile(PYXIcosIndex index, int nRes) {
    PYXValueTile_SPtr ret = new PYXValueTile_SPtr(pyxlibPINVOKE.ConstCoverage_getFieldTile__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index), nRes), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValue getCoverageValue(PYXIcosIndex index, int nFieldIndex) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.ConstCoverage_getCoverageValue__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), nFieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValue getCoverageValue(PYXIcosIndex index) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.ConstCoverage_getCoverageValue__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGeometryResolution(int nResolution) {
    pyxlibPINVOKE.ConstCoverage_setGeometryResolution(swigCPtr, nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setReturnValue(PYXValue value, PYXFieldDefinition.eContextType nContext, int nField) {
    pyxlibPINVOKE.ConstCoverage_setReturnValue__SWIG_0(swigCPtr, PYXValue.getCPtr(value), (int)nContext, nField);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setReturnValue(PYXValue value, PYXFieldDefinition.eContextType nContext) {
    pyxlibPINVOKE.ConstCoverage_setReturnValue__SWIG_1(swigCPtr, PYXValue.getCPtr(value), (int)nContext);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFieldCount(int nFieldCount) {
    pyxlibPINVOKE.ConstCoverage_setFieldCount(swigCPtr, nFieldCount);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
