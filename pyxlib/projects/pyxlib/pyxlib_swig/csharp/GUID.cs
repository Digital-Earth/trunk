/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GUID : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public GUID(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(GUID obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GUID() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_GUID(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

    /// <summary>Implicit conversion from GUID to Guid.</summary>
    /// <param name="g">Managed Guid</param>
    public static implicit operator Guid(GUID g)
    {
        return new Guid(g.ToString());
    }
    public override string ToString()
    {
		return pyxlib.guidToStr(this);
    }

	public override bool Equals(object guidObject)
	{
		if (null == guidObject)
		{
			return false;
		}

		GUID guid = guidObject as GUID;
		if (null != guid)
		{
			return Equals(guid);
		}

		return false;
	}

	public bool Equals(GUID guid)
	{
		return this.ToString() == guid.ToString();
	}

	public override int GetHashCode()
	{
		return this.ToString().GetHashCode();
	}

	public static bool operator ==(GUID a, GUID b)
	{
		if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(GUID a, GUID b)
	{
		return !(a==b);
	}

  public uint Data1 {
    set {
      pyxlibPINVOKE.GUID_Data1_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = pyxlibPINVOKE.GUID_Data1_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort Data2 {
    set {
      pyxlibPINVOKE.GUID_Data2_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = pyxlibPINVOKE.GUID_Data2_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort Data3 {
    set {
      pyxlibPINVOKE.GUID_Data3_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = pyxlibPINVOKE.GUID_Data3_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char Data4 {
    set {
      pyxlibPINVOKE.GUID_Data4_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = pyxlibPINVOKE.GUID_Data4_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void ParseString(string s) {
    pyxlibPINVOKE.GUID_ParseString(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(s));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
