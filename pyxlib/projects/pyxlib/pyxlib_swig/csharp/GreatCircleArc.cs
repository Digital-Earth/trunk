/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GreatCircleArc : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public GreatCircleArc(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(GreatCircleArc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GreatCircleArc() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_GreatCircleArc(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.GreatCircleArc_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public GreatCircleArc(CoordLatLon pt1, CoordLatLon pt2) : this(pyxlibPINVOKE.new_GreatCircleArc(CoordLatLon.getCPtr(pt1), CoordLatLon.getCPtr(pt2)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double calcDistance(CoordLatLon pt1, CoordLatLon pt2, double fRadius) {
    double ret = pyxlibPINVOKE.GreatCircleArc_calcDistance__SWIG_0(CoordLatLon.getCPtr(pt1), CoordLatLon.getCPtr(pt2), fRadius);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcDistance(CoordLatLon pt1, CoordLatLon pt2) {
    double ret = pyxlibPINVOKE.GreatCircleArc_calcDistance__SWIG_1(CoordLatLon.getCPtr(pt1), CoordLatLon.getCPtr(pt2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CoordLatLon getPoint1() {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.GreatCircleArc_getPoint1(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CoordLatLon getPoint2() {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.GreatCircleArc_getPoint2(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getDistance() {
    double ret = pyxlibPINVOKE.GreatCircleArc_getDistance(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CoordLatLon getPoint(double fFraction) {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.GreatCircleArc_getPoint(swigCPtr, fFraction), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
