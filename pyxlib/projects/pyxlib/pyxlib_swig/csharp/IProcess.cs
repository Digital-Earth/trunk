/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IProcess : PYXCOM_IUnknown {
  private HandleRef swigCPtr;

  public IProcess(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.IProcessUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IProcess obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IProcess() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IProcess(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IProcess_iid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual GUID getProcID() {
    GUID ret = new GUID(pyxlibPINVOKE.IProcess_getProcID(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getProcVersion() {
    int ret = pyxlibPINVOKE.IProcess_getProcVersion(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getProcName() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IProcess_getProcName(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getProcDescription() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IProcess_getProcDescription(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual ProcessSpec_SPtr getSpec() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.IProcess_getSpec(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IUnknown_CSPtr getOutput_const() {
    IUnknown_CSPtr ret = new IUnknown_CSPtr(pyxlibPINVOKE.IProcess_getOutput_const(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IUnknown_SPtr getOutput() {
    IUnknown_SPtr ret = new IUnknown_SPtr(pyxlibPINVOKE.IProcess_getOutput(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getParameterCount() {
    int ret = pyxlibPINVOKE.IProcess_getParameterCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Parameter_SPtr getParameter(int n) {
    Parameter_SPtr ret = new Parameter_SPtr(pyxlibPINVOKE.IProcess_getParameter(swigCPtr, n), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Vector_Parameter getParameters() {
    Vector_Parameter ret = new Vector_Parameter(pyxlibPINVOKE.IProcess_getParameters(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool equals(IProcess_SPtr spProc) {
    bool ret = pyxlibPINVOKE.IProcess_equals(swigCPtr, IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getHashCode() {
    int ret = pyxlibPINVOKE.IProcess_getHashCode(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getIdentity() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IProcess_getIdentity(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getAttributeSchema() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IProcess_getAttributeSchema(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual Attribute_Map getAttributes() {
    Attribute_Map ret = new Attribute_Map(pyxlibPINVOKE.IProcess_getAttributes(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getData() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IProcess_getData(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual Notifier getNotifier() {
    Notifier ret = new Notifier(pyxlibPINVOKE.IProcess_getNotifier(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Notifier getDataChanged() {
    Notifier ret = new Notifier(pyxlibPINVOKE.IProcess_getDataChanged(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setProcID(GUID procid) {
    pyxlibPINVOKE.IProcess_setProcID(swigCPtr, GUID.getCPtr(procid));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setProcVersion(int nVersion) {
    pyxlibPINVOKE.IProcess_setProcVersion(swigCPtr, nVersion);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setProcName(string strName) {
    pyxlibPINVOKE.IProcess_setProcName(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setProcDescription(string strDescription) {
    pyxlibPINVOKE.IProcess_setProcDescription(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDescription));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setAttributes(Attribute_Map mapAttr) {
    pyxlibPINVOKE.IProcess_setAttributes(swigCPtr, Attribute_Map.getCPtr(mapAttr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setData(string strData) {
    pyxlibPINVOKE.IProcess_setData(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strData));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setParameters(Vector_Parameter vecParam) {
    pyxlibPINVOKE.IProcess_setParameters(swigCPtr, Vector_Parameter.getCPtr(vecParam));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IProcess.eInitStatus initProc(bool bRecursive) {
    IProcess.eInitStatus ret = (IProcess.eInitStatus)pyxlibPINVOKE.IProcess_initProc__SWIG_0(swigCPtr, bRecursive);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess.eInitStatus initProc() {
    IProcess.eInitStatus ret = (IProcess.eInitStatus)pyxlibPINVOKE.IProcess_initProc__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess.eInitStatus reinitProc(bool bRecursive) {
    IProcess.eInitStatus ret = (IProcess.eInitStatus)pyxlibPINVOKE.IProcess_reinitProc__SWIG_0(swigCPtr, bRecursive);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess.eInitStatus reinitProc() {
    IProcess.eInitStatus ret = (IProcess.eInitStatus)pyxlibPINVOKE.IProcess_reinitProc__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcessInitError_CSPtr getInitError() {
    IProcessInitError_CSPtr ret = new IProcessInitError_CSPtr(pyxlibPINVOKE.IProcess_getInitError(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess.eInitStatus getInitState() {
    IProcess.eInitStatus ret = (IProcess.eInitStatus)pyxlibPINVOKE.IProcess_getInitState(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setFinalize(bool bFinalize) {
    bool ret = pyxlibPINVOKE.IProcess_setFinalize(swigCPtr, bFinalize);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ProvidesOutputType(GUID guid) {
    bool ret = pyxlibPINVOKE.IProcess_ProvidesOutputType(swigCPtr, GUID.getCPtr(guid));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum eInitStatus {
    knInitialized = 0,
    knNeedsInit,
    knFailedToInit,
    knDoesNotMeetSpec,
    knInitializing
  }

}
