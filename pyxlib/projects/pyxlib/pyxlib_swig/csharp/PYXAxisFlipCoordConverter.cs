/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXAxisFlipCoordConverter : PYXCoordConverter {
  private HandleRef swigCPtr;

  public PYXAxisFlipCoordConverter(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXAxisFlipCoordConverterUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXAxisFlipCoordConverter obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXAxisFlipCoordConverter() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXAxisFlipCoordConverter(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.PYXAxisFlipCoordConverter_clsid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.PYXAxisFlipCoordConverter_aiid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int niid {
    get {
      int ret = pyxlibPINVOKE.PYXAxisFlipCoordConverter_niid_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override uint AddRef() {
    uint ret = pyxlibPINVOKE.PYXAxisFlipCoordConverter_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint Release() {
    uint ret = pyxlibPINVOKE.PYXAxisFlipCoordConverter_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXAxisFlipCoordConverter() : this(pyxlibPINVOKE.new_PYXAxisFlipCoordConverter__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXAxisFlipCoordConverter(ICoordConverter_SPtr coordConverter) : this(pyxlibPINVOKE.new_PYXAxisFlipCoordConverter__SWIG_1(ICoordConverter_SPtr.getCPtr(coordConverter)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInternalCoordConverter(ICoordConverter_SPtr coordConverter) {
    pyxlibPINVOKE.PYXAxisFlipCoordConverter_setInternalCoordConverter(swigCPtr, ICoordConverter_SPtr.getCPtr(coordConverter));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_std__basic_ostreamTchar_t serialize(SWIGTYPE_p_std__basic_ostreamTchar_t arg0) {
    SWIGTYPE_p_std__basic_ostreamTchar_t ret = new SWIGTYPE_p_std__basic_ostreamTchar_t(pyxlibPINVOKE.PYXAxisFlipCoordConverter_serialize(swigCPtr, SWIGTYPE_p_std__basic_ostreamTchar_t.getCPtr(arg0)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__basic_istreamTchar_t deserialize(SWIGTYPE_p_std__basic_istreamTchar_t arg0) {
    SWIGTYPE_p_std__basic_istreamTchar_t ret = new SWIGTYPE_p_std__basic_istreamTchar_t(pyxlibPINVOKE.PYXAxisFlipCoordConverter_deserialize(swigCPtr, SWIGTYPE_p_std__basic_istreamTchar_t.getCPtr(arg0)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void serializeCOM(SWIGTYPE_p_std__basic_ostreamTchar_t arg0) {
    pyxlibPINVOKE.PYXAxisFlipCoordConverter_serializeCOM(swigCPtr, SWIGTYPE_p_std__basic_ostreamTchar_t.getCPtr(arg0));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ICoordConverter_SPtr clone() {
    ICoordConverter_SPtr ret = new ICoordConverter_SPtr(pyxlibPINVOKE.PYXAxisFlipCoordConverter_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void nativeToPYXIS(PYXCoord2DDouble native, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.PYXAxisFlipCoordConverter_nativeToPYXIS(swigCPtr, PYXCoord2DDouble.getCPtr(native), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void pyxisToNative(PYXIcosIndex index, PYXCoord2DDouble pNative) {
    pyxlibPINVOKE.PYXAxisFlipCoordConverter_pyxisToNative(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool tryPyxisToNative(PYXIcosIndex index, PYXCoord2DDouble pNative) {
    bool ret = pyxlibPINVOKE.PYXAxisFlipCoordConverter_tryPyxisToNative(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void nativeToLatLon(PYXCoord2DDouble native, CoordLatLon pLatLon) {
    pyxlibPINVOKE.PYXAxisFlipCoordConverter_nativeToLatLon(swigCPtr, PYXCoord2DDouble.getCPtr(native), CoordLatLon.getCPtr(pLatLon));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void latLonToNative(CoordLatLon latLon, PYXCoord2DDouble pNative) {
    pyxlibPINVOKE.PYXAxisFlipCoordConverter_latLonToNative(swigCPtr, CoordLatLon.getCPtr(latLon), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isProjected() {
    bool ret = pyxlibPINVOKE.PYXAxisFlipCoordConverter_isProjected(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
