/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXBoundingGreatCircleArc : PYXBoundingShape {
  private HandleRef swigCPtr;

  public PYXBoundingGreatCircleArc(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXBoundingGreatCircleArcUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXBoundingGreatCircleArc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXBoundingGreatCircleArc() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXBoundingGreatCircleArc(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PYXBoundingGreatCircleArc(SWIGTYPE_p_SphereMath__GreatCircleArc arc, double radius) : this(pyxlibPINVOKE.new_PYXBoundingGreatCircleArc__SWIG_0(SWIGTYPE_p_SphereMath__GreatCircleArc.getCPtr(arc), radius), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXBoundingGreatCircleArc(PYXBoundingGreatCircleArc other) : this(pyxlibPINVOKE.new_PYXBoundingGreatCircleArc__SWIG_1(PYXBoundingGreatCircleArc.getCPtr(other)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_SphereMath__GreatCircleArc getGreatCircleArc() {
    SWIGTYPE_p_SphereMath__GreatCircleArc ret = new SWIGTYPE_p_SphereMath__GreatCircleArc(pyxlibPINVOKE.PYXBoundingGreatCircleArc_getGreatCircleArc(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRadius() {
    double ret = pyxlibPINVOKE.PYXBoundingGreatCircleArc_getRadius(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool canIntersects(SWIGTYPE_p_SphereMath__GreatCircleArc ray) {
    bool ret = pyxlibPINVOKE.PYXBoundingGreatCircleArc_canIntersects(swigCPtr, SWIGTYPE_p_SphereMath__GreatCircleArc.getCPtr(ray));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool canBeCloser(PYXCoord3DDouble location, double distance) {
    bool ret = pyxlibPINVOKE.PYXBoundingGreatCircleArc_canBeCloser(swigCPtr, PYXCoord3DDouble.getCPtr(location), distance);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getBoundingArea() {
    double ret = pyxlibPINVOKE.PYXBoundingGreatCircleArc_getBoundingArea(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
