/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCellHistogram : PYXHistogram {
  private HandleRef swigCPtr;

  public PYXCellHistogram(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXCellHistogramUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCellHistogram obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCellHistogram() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCellHistogram(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual int getCellResolution() {
    int ret = pyxlibPINVOKE.PYXCellHistogram_getCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RangeDouble getArea() {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.PYXCellHistogram_getArea__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RangeDouble getArea(RangePYXValue range) {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.PYXCellHistogram_getArea__SWIG_1(swigCPtr, RangePYXValue.getCPtr(range)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXCellHistogramBinVector getCellBins() {
    PYXCellHistogramBinVector ret = new PYXCellHistogramBinVector(pyxlibPINVOKE.PYXCellHistogram_getCellBins(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXCellHistogramBinVector getCellNormalizedBins(PYXHistogram.Normalization mode, int binCount) {
    PYXCellHistogramBinVector ret = new PYXCellHistogramBinVector(pyxlibPINVOKE.PYXCellHistogram_getCellNormalizedBins(swigCPtr, (int)mode, binCount), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
