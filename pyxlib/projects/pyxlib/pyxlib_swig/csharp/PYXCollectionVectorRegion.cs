/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCollectionVectorRegion : PYXVectorRegion {
  private HandleRef swigCPtr;

  public PYXCollectionVectorRegion(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXCollectionVectorRegionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCollectionVectorRegion obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCollectionVectorRegion() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCollectionVectorRegion(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override IRegion_SPtr clone() {
    IRegion_SPtr ret = new IRegion_SPtr(pyxlibPINVOKE.PYXCollectionVectorRegion_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getVerticesCount() {
    int ret = pyxlibPINVOKE.PYXCollectionVectorRegion_getVerticesCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getDistanceToBorder(PYXCoord3DDouble location, double errorThreshold) {
    double ret = pyxlibPINVOKE.PYXCollectionVectorRegion_getDistanceToBorder__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getDistanceToBorder(PYXCoord3DDouble location) {
    double ret = pyxlibPINVOKE.PYXCollectionVectorRegion_getDistanceToBorder__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPointContained(PYXCoord3DDouble location, double errorThreshold) {
    bool ret = pyxlibPINVOKE.PYXCollectionVectorRegion_isPointContained__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPointContained(PYXCoord3DDouble location) {
    bool ret = pyxlibPINVOKE.PYXCollectionVectorRegion_isPointContained__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXCollectionVectorRegion_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_boost__intrusive_ptrTPYXCollectionVectorRegion_t create(SWIGTYPE_p_std__vectorTboost__intrusive_ptrTPYXVectorRegion_t_t regions) {
    SWIGTYPE_p_boost__intrusive_ptrTPYXCollectionVectorRegion_t ret = new SWIGTYPE_p_boost__intrusive_ptrTPYXCollectionVectorRegion_t(pyxlibPINVOKE.PYXCollectionVectorRegion_create(SWIGTYPE_p_std__vectorTboost__intrusive_ptrTPYXVectorRegion_t_t.getCPtr(regions)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCollectionVectorRegion(SWIGTYPE_p_std__vectorTboost__intrusive_ptrTPYXVectorRegion_t_t regions) : this(pyxlibPINVOKE.new_PYXCollectionVectorRegion__SWIG_0(SWIGTYPE_p_std__vectorTboost__intrusive_ptrTPYXVectorRegion_t_t.getCPtr(regions)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCollectionVectorRegion() : this(pyxlibPINVOKE.new_PYXCollectionVectorRegion__SWIG_1(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXVectorRegion_SPtr getRegion(int index) {
    PYXVectorRegion_SPtr ret = new PYXVectorRegion_SPtr(pyxlibPINVOKE.PYXCollectionVectorRegion_getRegion__SWIG_0(swigCPtr, index), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getRegionCount() {
    int ret = pyxlibPINVOKE.PYXCollectionVectorRegion_getRegionCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addRegion(PYXVectorRegion_SPtr region) {
    pyxlibPINVOKE.PYXCollectionVectorRegion_addRegion(swigCPtr, PYXVectorRegion_SPtr.getCPtr(region));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeRegion(PYXVectorRegion_SPtr region) {
    pyxlibPINVOKE.PYXCollectionVectorRegion_removeRegion(swigCPtr, PYXVectorRegion_SPtr.getCPtr(region));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
