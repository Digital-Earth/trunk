/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCompletelyInsideVisitor : IRegionVisitor {
  private HandleRef swigCPtr;

  public PYXCompletelyInsideVisitor(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXCompletelyInsideVisitorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCompletelyInsideVisitor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCompletelyInsideVisitor() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCompletelyInsideVisitor(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static SWIGTYPE_p_boost__intrusive_ptrTPYXCompletelyInsideVisitor_t create() {
    SWIGTYPE_p_boost__intrusive_ptrTPYXCompletelyInsideVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTPYXCompletelyInsideVisitor_t(pyxlibPINVOKE.PYXCompletelyInsideVisitor_create(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCompletelyInsideVisitor() : this(pyxlibPINVOKE.new_PYXCompletelyInsideVisitor(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isOptimal() {
    bool ret = pyxlibPINVOKE.PYXCompletelyInsideVisitor_isOptimal(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t trim(PYXIcosIndex index) {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXCompletelyInsideVisitor_trim(swigCPtr, PYXIcosIndex.getCPtr(index)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXInnerTileIntersectionIterator_SPtr getInnerTileIterator(PYXInnerTile tile) {
    PYXInnerTileIntersectionIterator_SPtr ret = new PYXInnerTileIntersectionIterator_SPtr(pyxlibPINVOKE.PYXCompletelyInsideVisitor_getInnerTileIterator(swigCPtr, PYXInnerTile.getCPtr(tile)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXInnerTileIntersection intersects(PYXBoundingCircle circle, double errorThreshold) {
    PYXInnerTileIntersection ret = (PYXInnerTileIntersection)pyxlibPINVOKE.PYXCompletelyInsideVisitor_intersects__SWIG_0(swigCPtr, PYXBoundingCircle.getCPtr(circle), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXInnerTileIntersection intersects(PYXBoundingCircle circle) {
    PYXInnerTileIntersection ret = (PYXInnerTileIntersection)pyxlibPINVOKE.PYXCompletelyInsideVisitor_intersects__SWIG_1(swigCPtr, PYXBoundingCircle.getCPtr(circle));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXInnerTileIntersection intersects(PYXIcosIndex cell) {
    PYXInnerTileIntersection ret = (PYXInnerTileIntersection)pyxlibPINVOKE.PYXCompletelyInsideVisitor_intersects__SWIG_2(swigCPtr, PYXIcosIndex.getCPtr(cell));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
