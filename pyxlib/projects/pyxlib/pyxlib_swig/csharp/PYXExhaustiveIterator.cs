/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXExhaustiveIterator : PYXIterator {
  private HandleRef swigCPtr;

  public PYXExhaustiveIterator(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXExhaustiveIteratorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXExhaustiveIterator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXExhaustiveIterator() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXExhaustiveIterator(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PYXExhaustiveIterator_SPtr create(PYXIcosIndex rootIndex, int nResolution) {
    PYXExhaustiveIterator_SPtr ret = new PYXExhaustiveIterator_SPtr(pyxlibPINVOKE.PYXExhaustiveIterator_create(PYXIcosIndex.getCPtr(rootIndex), nResolution), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void test() {
    pyxlibPINVOKE.PYXExhaustiveIterator_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXExhaustiveIterator(PYXIcosIndex rootIndex, int nResolution) : this(pyxlibPINVOKE.new_PYXExhaustiveIterator(PYXIcosIndex.getCPtr(rootIndex), nResolution), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void next() {
    pyxlibPINVOKE.PYXExhaustiveIterator_next(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool end() {
    bool ret = pyxlibPINVOKE.PYXExhaustiveIterator_end(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEnd() {
    pyxlibPINVOKE.PYXExhaustiveIterator_setEnd(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override PYXIcosIndex getIndex() {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PYXExhaustiveIterator_getIndex(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reset(PYXIcosIndex rootIndex, int nResolution) {
    pyxlibPINVOKE.PYXExhaustiveIterator_reset(swigCPtr, PYXIcosIndex.getCPtr(rootIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
