/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXMath : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXMath(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXMath obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXMath() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXMath(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.PYXMath_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int knMaxAbsResolution {
    get {
      int ret = pyxlibPINVOKE.PYXMath_knMaxAbsResolution_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int knMaxRelResolution {
    get {
      int ret = pyxlibPINVOKE.PYXMath_knMaxRelResolution_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfResZeroIntercell {
    get {
      double ret = pyxlibPINVOKE.PYXMath_kfResZeroIntercell_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static PYXMath.eHexClass getHexClass(int nResolution) {
    PYXMath.eHexClass ret = (PYXMath.eHexClass)pyxlibPINVOKE.PYXMath_getHexClass(nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXMath.eHexClass getAltHexClass(PYXMath.eHexClass nClass) {
    PYXMath.eHexClass ret = (PYXMath.eHexClass)pyxlibPINVOKE.PYXMath_getAltHexClass((int)nClass);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXMath.eHexDirection negateDir(PYXMath.eHexDirection nHexDir) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXMath_negateDir((int)nHexDir);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void move(PYXIndex start, PYXMath.eHexDirection nDir, PYXIndex pResult) {
    pyxlibPINVOKE.PYXMath_move(PYXIndex.getCPtr(start), (int)nDir, PYXIndex.getCPtr(pResult));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(PYXIndex first, PYXIndex second, int nResolution, PYXIndex pResult, bool bGrow) {
    pyxlibPINVOKE.PYXMath_add__SWIG_0(PYXIndex.getCPtr(first), PYXIndex.getCPtr(second), nResolution, PYXIndex.getCPtr(pResult), bGrow);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(PYXIndex first, PYXIndex second, int nResolution, PYXIndex pResult) {
    pyxlibPINVOKE.PYXMath_add__SWIG_1(PYXIndex.getCPtr(first), PYXIndex.getCPtr(second), nResolution, PYXIndex.getCPtr(pResult));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subtract(PYXIndex first, PYXIndex second, int nResolution, PYXIndex pResult) {
    pyxlibPINVOKE.PYXMath_subtract(PYXIndex.getCPtr(first), PYXIndex.getCPtr(second), nResolution, PYXIndex.getCPtr(pResult));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void multiply(int nFactor, PYXMath.eHexDirection nHexDirection, int nResolution, PYXIndex pResult) {
    pyxlibPINVOKE.PYXMath_multiply(nFactor, (int)nHexDirection, nResolution, PYXIndex.getCPtr(pResult));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void polarToIndex(PYXCoordPolar pt, int nResolution, PYXIndex index, bool bGrow) {
    pyxlibPINVOKE.PYXMath_polarToIndex(PYXCoordPolar.getCPtr(pt), nResolution, PYXIndex.getCPtr(index), bGrow);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void indexToPolar(PYXIndex index, PYXCoordPolar pPolar) {
    pyxlibPINVOKE.PYXMath_indexToPolar(PYXIndex.getCPtr(index), PYXCoordPolar.getCPtr(pPolar));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PYXIndex getParent(PYXIndex pyxIndex) {
    PYXIndex ret = new PYXIndex(pyxlibPINVOKE.PYXMath_getParent(PYXIndex.getCPtr(pyxIndex)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void factor(PYXIndex pyxIndex, Vector_Int vecFactors) {
    pyxlibPINVOKE.PYXMath_factor__SWIG_0(PYXIndex.getCPtr(pyxIndex), Vector_Int.getCPtr(vecFactors));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void factor(PYXIndex index, SWIGTYPE_p_int pnMove2, SWIGTYPE_p_int pnMove6) {
    pyxlibPINVOKE.PYXMath_factor__SWIG_1(PYXIndex.getCPtr(index), SWIGTYPE_p_int.getCPtr(pnMove2), SWIGTYPE_p_int.getCPtr(pnMove6));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool zoomIn(PYXIndex pIndex, PYXMath.eHexDirection nHexDirection) {
    bool ret = pyxlibPINVOKE.PYXMath_zoomIn__SWIG_0(PYXIndex.getCPtr(pIndex), (int)nHexDirection);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool zoomIn(PYXIndex pIndex) {
    bool ret = pyxlibPINVOKE.PYXMath_zoomIn__SWIG_1(PYXIndex.getCPtr(pIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool zoomOut(PYXIndex pIndex, ref int pnDirection) {
    bool ret = pyxlibPINVOKE.PYXMath_zoomOut__SWIG_0(PYXIndex.getCPtr(pIndex), ref pnDirection);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool zoomOut(PYXIndex pIndex) {
    bool ret = pyxlibPINVOKE.PYXMath_zoomOut__SWIG_1(PYXIndex.getCPtr(pIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXMath.eHexDirection originDir(PYXIndex pyxIndex) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXMath_originDir(PYXIndex.getCPtr(pyxIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXIndex calcAncestorIndex(PYXIndex index1, PYXIndex index2) {
    PYXIndex ret = new PYXIndex(pyxlibPINVOKE.PYXMath_calcAncestorIndex(PYXIndex.getCPtr(index1), PYXIndex.getCPtr(index2)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXIndex calcDescendantIndex(PYXIndex parent, PYXIndex child) {
    PYXIndex ret = new PYXIndex(pyxlibPINVOKE.PYXMath_calcDescendantIndex(PYXIndex.getCPtr(parent), PYXIndex.getCPtr(child)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void rotateIndex(PYXIndex pIndex, uint nRotCount, PYXMath.eRotateDir nDirection) {
    pyxlibPINVOKE.PYXMath_rotateIndex(PYXIndex.getCPtr(pIndex), nRotCount, (int)nDirection);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PYXMath.eHexDirection rotateDirection(PYXMath.eHexDirection nDirection, int nRotate) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXMath_rotateDirection((int)nDirection, nRotate);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void rotateDelta(SWIGTYPE_p_int pnRotate, int nDelta) {
    pyxlibPINVOKE.PYXMath_rotateDelta__SWIG_0(SWIGTYPE_p_int.getCPtr(pnRotate), nDelta);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int rotateDelta(int nRotate, int nDelta) {
    int ret = pyxlibPINVOKE.PYXMath_rotateDelta__SWIG_1(nRotate, nDelta);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXMath.eHexDirection hexSector(PYXIndex pyxIndex) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXMath_hexSector__SWIG_0(PYXIndex.getCPtr(pyxIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXMath.eHexDirection hexSector(double angle) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXMath_hexSector__SWIG_1(angle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcInterCellDistance(int nResolution) {
    double ret = pyxlibPINVOKE.PYXMath_calcInterCellDistance(nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcCircumRadius(int nResolution) {
    double ret = pyxlibPINVOKE.PYXMath_calcCircumRadius(nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcInRadius(int nResolution) {
    double ret = pyxlibPINVOKE.PYXMath_calcInRadius(nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isInLine(PYXIndex index) {
    bool ret = pyxlibPINVOKE.PYXMath_isInLine(PYXIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void factor(PYXIndex index, ref int pnDirA, ref int pnMoveA, ref int pnDirB, ref int pnMoveB) {
    pyxlibPINVOKE.PYXMath_factor__SWIG_2(PYXIndex.getCPtr(index), ref pnDirA, ref pnMoveA, ref pnDirB, ref pnMoveB);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum eHexClass {
    knClassI = 0,
    knClassII
  }

  public enum eRotateDir {
    knInvalid = -1,
    knCW,
    knCCW
  }

  public enum eHexDirection {
    knDirectionZero = 0,
    knDirectionOne,
    knDirectionTwo,
    knDirectionThree,
    knDirectionFour,
    knDirectionFive,
    knDirectionSix
  }

}
