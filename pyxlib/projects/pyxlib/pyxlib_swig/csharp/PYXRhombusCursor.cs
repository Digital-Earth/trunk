/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXRhombusCursor : PYXAbstractIterator {
  private HandleRef swigCPtr;

  public PYXRhombusCursor(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXRhombusCursorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXRhombusCursor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXRhombusCursor() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXRhombusCursor(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PYXRhombusCursor(PYXRhombus rhombus, int resolutionDepth) : this(pyxlibPINVOKE.new_PYXRhombusCursor__SWIG_0(PYXRhombus.getCPtr(rhombus), resolutionDepth), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombusCursor(PYXRhombusCursor cursor) : this(pyxlibPINVOKE.new_PYXRhombusCursor__SWIG_1(PYXRhombusCursor.getCPtr(cursor)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void next() {
    pyxlibPINVOKE.PYXRhombusCursor_next(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool end() {
    bool ret = pyxlibPINVOKE.PYXRhombusCursor_end(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIcosIndex getIndex() {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PYXRhombusCursor_getIndex(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getUCoord() {
    int ret = pyxlibPINVOKE.PYXRhombusCursor_getUCoord(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getVCoord() {
    int ret = pyxlibPINVOKE.PYXRhombusCursor_getVCoord(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getOffsetCoord() {
    int ret = pyxlibPINVOKE.PYXRhombusCursor_getOffsetCoord(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getMaxUV() {
    int ret = pyxlibPINVOKE.PYXRhombusCursor_getMaxUV(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOddResolutionDepth() {
    bool ret = pyxlibPINVOKE.PYXRhombusCursor_isOddResolutionDepth(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
