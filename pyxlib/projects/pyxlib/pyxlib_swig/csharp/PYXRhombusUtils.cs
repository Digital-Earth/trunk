/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXRhombusUtils : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXRhombusUtils(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXRhombusUtils obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXRhombusUtils() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXRhombusUtils(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static bool willLoadFast(PYXRhombus rhombus, int depth, ICoverage_SPtr coverage) {
    bool ret = pyxlibPINVOKE.PYXRhombusUtils_willLoadFast(PYXRhombus.getCPtr(rhombus), depth, ICoverage_SPtr.getCPtr(coverage));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string loadRhombusBGRA(PYXRhombus rhombus, int depth, ICoverage_SPtr coverage) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXRhombusUtils_loadRhombusBGRA(PYXRhombus.getCPtr(rhombus), depth, ICoverage_SPtr.getCPtr(coverage)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string loadRhombusBGRAPalette(PYXRhombus rhombus, int depth, ICoverage_SPtr coverage, string palette) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXRhombusUtils_loadRhombusBGRAPalette(PYXRhombus.getCPtr(rhombus), depth, ICoverage_SPtr.getCPtr(coverage), pyxlibPINVOKE.UnmanagedString.Create(palette)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string loadRhombusDouble(PYXRhombus rhombus, int depth, ICoverage_SPtr coverage) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXRhombusUtils_loadRhombusDouble(PYXRhombus.getCPtr(rhombus), depth, ICoverage_SPtr.getCPtr(coverage)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string loadRhombusFloat(PYXRhombus rhombus, int depth, ICoverage_SPtr coverage) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXRhombusUtils_loadRhombusFloat(PYXRhombus.getCPtr(rhombus), depth, ICoverage_SPtr.getCPtr(coverage)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string loadRhombusInt(PYXRhombus rhombus, int depth, ICoverage_SPtr coverage) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXRhombusUtils_loadRhombusInt(PYXRhombus.getCPtr(rhombus), depth, ICoverage_SPtr.getCPtr(coverage)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public PYXRhombusUtils() : this(pyxlibPINVOKE.new_PYXRhombusUtils(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
