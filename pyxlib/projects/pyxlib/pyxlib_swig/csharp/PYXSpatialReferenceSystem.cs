/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXSpatialReferenceSystem : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXSpatialReferenceSystem(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXSpatialReferenceSystem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXSpatialReferenceSystem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXSpatialReferenceSystem(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual PYXSpatialReferenceSystem_SPtr clone() {
    PYXSpatialReferenceSystem_SPtr ret = new PYXSpatialReferenceSystem_SPtr(pyxlibPINVOKE.PYXSpatialReferenceSystem_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int knMaxZone {
    get {
      int ret = pyxlibPINVOKE.PYXSpatialReferenceSystem_knMaxZone_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static PYXSpatialReferenceSystem_SPtr create() {
    PYXSpatialReferenceSystem_SPtr ret = new PYXSpatialReferenceSystem_SPtr(pyxlibPINVOKE.PYXSpatialReferenceSystem_create(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXSpatialReferenceSystem() : this(pyxlibPINVOKE.new_PYXSpatialReferenceSystem(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string kstrScope {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXSpatialReferenceSystem_kstrScope_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public virtual string getScope() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXSpatialReferenceSystem_getScope(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setSystem(PYXSpatialReferenceSystem.eSystem nSystem) {
    pyxlibPINVOKE.PYXSpatialReferenceSystem_setSystem(swigCPtr, (int)nSystem);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXSpatialReferenceSystem.eSystem getSystem() {
    PYXSpatialReferenceSystem.eSystem ret = (PYXSpatialReferenceSystem.eSystem)pyxlibPINVOKE.PYXSpatialReferenceSystem_getSystem(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDatum(PYXSpatialReferenceSystem.eDatum nDatum) {
    pyxlibPINVOKE.PYXSpatialReferenceSystem_setDatum(swigCPtr, (int)nDatum);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXSpatialReferenceSystem.eDatum getDatum() {
    PYXSpatialReferenceSystem.eDatum ret = (PYXSpatialReferenceSystem.eDatum)pyxlibPINVOKE.PYXSpatialReferenceSystem_getDatum(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setProjection(PYXSpatialReferenceSystem.eProjection nProjection) {
    pyxlibPINVOKE.PYXSpatialReferenceSystem_setProjection(swigCPtr, (int)nProjection);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXSpatialReferenceSystem.eProjection getProjection() {
    PYXSpatialReferenceSystem.eProjection ret = (PYXSpatialReferenceSystem.eProjection)pyxlibPINVOKE.PYXSpatialReferenceSystem_getProjection(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIsUTMNorth(bool bIsUTMNorth) {
    pyxlibPINVOKE.PYXSpatialReferenceSystem_setIsUTMNorth(swigCPtr, bIsUTMNorth);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getIsUTMNorth() {
    bool ret = pyxlibPINVOKE.PYXSpatialReferenceSystem_getIsUTMNorth(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setZone(int nZone) {
    pyxlibPINVOKE.PYXSpatialReferenceSystem_setZone(swigCPtr, nZone);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getZone() {
    int ret = pyxlibPINVOKE.PYXSpatialReferenceSystem_getZone(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWKT(string strWKT) {
    pyxlibPINVOKE.PYXSpatialReferenceSystem_setWKT(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strWKT));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getWKT() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXSpatialReferenceSystem_getWKT(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public enum eSystem {
    knSystemProjected = 0,
    knSystemGeographical,
    knSystemNone
  }

  public enum eDatum {
    knDatumNAD27 = 0,
    knDatumNAD83,
    knDatumWGS72,
    knDatumWGS84,
    knDatumNone
  }

  public enum eProjection {
    knProjectionUTM = 0,
    knProjectionTM,
    knProjectionLCC,
    knProjectionNone,
    knCustomProjection
  }

}
