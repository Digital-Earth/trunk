/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXTest : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXTest(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXTest obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXTest() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXTest(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual void initialize() {
    pyxlibPINVOKE.PYXTest_initialize(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getDataResolution() {
    int ret = pyxlibPINVOKE.PYXTest_getDataResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDataResolution(int nDataResolution) {
    pyxlibPINVOKE.PYXTest_setDataResolution(swigCPtr, nDataResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getTargetResolution() {
    int ret = pyxlibPINVOKE.PYXTest_getTargetResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTargetResolution(int nTargetResolution) {
    pyxlibPINVOKE.PYXTest_setTargetResolution(swigCPtr, nTargetResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAbortOnYes(bool bAbortOnYes) {
    pyxlibPINVOKE.PYXTest_setAbortOnYes(swigCPtr, bAbortOnYes);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXTest.eTestResult testIndex(PYXIcosIndex index, SWIGTYPE_p_bool pbAbort) {
    PYXTest.eTestResult ret = (PYXTest.eTestResult)pyxlibPINVOKE.PYXTest_testIndex(swigCPtr, PYXIcosIndex.getCPtr(index), SWIGTYPE_p_bool.getCPtr(pbAbort));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum eTestResult {
    knNo = 0,
    knYes,
    knYesComplete,
    knMaybe
  }

}
