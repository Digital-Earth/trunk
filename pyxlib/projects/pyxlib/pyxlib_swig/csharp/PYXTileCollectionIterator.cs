/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXTileCollectionIterator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXTileCollectionIterator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXTileCollectionIterator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXTileCollectionIterator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXTileCollectionIterator(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static PYXTileCollectionIterator_SPtr create(PYXTileCollection tileCollection) {
    PYXTileCollectionIterator_SPtr ret = new PYXTileCollectionIterator_SPtr(pyxlibPINVOKE.PYXTileCollectionIterator_create(PYXTileCollection.getCPtr(tileCollection)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollectionIterator(PYXTileCollection tileCollection) : this(pyxlibPINVOKE.new_PYXTileCollectionIterator(PYXTileCollection.getCPtr(tileCollection)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void reset() {
    pyxlibPINVOKE.PYXTileCollectionIterator_reset(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void next() {
    pyxlibPINVOKE.PYXTileCollectionIterator_next(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool end() {
    bool ret = pyxlibPINVOKE.PYXTileCollectionIterator_end(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXGeometry_SPtr getGeometry() {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollectionIterator_getGeometry(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXTile_SPtr getTile() {
    PYXTile_SPtr ret = new PYXTile_SPtr(pyxlibPINVOKE.PYXTileCollectionIterator_getTile(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
