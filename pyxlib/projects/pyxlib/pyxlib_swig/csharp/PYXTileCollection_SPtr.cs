/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXTileCollection_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXTileCollection_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXTileCollection_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXTileCollection_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXTileCollection_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXTileCollection_SPtr() : this(pyxlibPINVOKE.new_PYXTileCollection_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXTileCollection_SPtr(PYXTileCollection p, bool add_ref) : this(pyxlibPINVOKE.new_PYXTileCollection_SPtr__SWIG_1(PYXTileCollection.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXTileCollection_SPtr(PYXTileCollection p) : this(pyxlibPINVOKE.new_PYXTileCollection_SPtr__SWIG_2(PYXTileCollection.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXTileCollection_SPtr(PYXTileCollection_SPtr rhs) : this(pyxlibPINVOKE.new_PYXTileCollection_SPtr__SWIG_3(PYXTileCollection_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.PYXTileCollection_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(PYXTileCollection rhs) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_reset__SWIG_1(swigCPtr, PYXTileCollection.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXTileCollection get() {
    IntPtr cPtr = pyxlibPINVOKE.PYXTileCollection_SPtr_get(swigCPtr);
    PYXTileCollection ret = (cPtr == IntPtr.Zero) ? null : new PYXTileCollection(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection __ref__() {
    PYXTileCollection ret = new PYXTileCollection(pyxlibPINVOKE.PYXTileCollection_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.PYXTileCollection_SPtr___deref__(swigCPtr);
    PYXTileCollection ret = (cPtr == IntPtr.Zero) ? null : new PYXTileCollection(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(PYXTileCollection_SPtr rhs) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_swap(swigCPtr, PYXTileCollection_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void test() {
    pyxlibPINVOKE.PYXTileCollection_SPtr_test(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXTileCollection_SPtr create(bool bAutoAggregate) {
    PYXTileCollection_SPtr ret = new PYXTileCollection_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_create__SWIG_0(swigCPtr, bAutoAggregate), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection_SPtr create() {
    PYXTileCollection_SPtr ret = new PYXTileCollection_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_create__SWIG_1(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection_SPtr create(PYXTileCollection rhs) {
    PYXTileCollection_SPtr ret = new PYXTileCollection_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_create__SWIG_2(swigCPtr, PYXTileCollection.getCPtr(rhs)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection_SPtr create(SWIGTYPE_p_std__basic_istreamTchar_t arg0) {
    PYXTileCollection_SPtr ret = new PYXTileCollection_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_create__SWIG_3(swigCPtr, SWIGTYPE_p_std__basic_istreamTchar_t.getCPtr(arg0)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection_SPtr create(PYXGeometry geometry) {
    PYXTileCollection_SPtr ret = new PYXTileCollection_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_create__SWIG_4(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr clone() {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void serialize(SWIGTYPE_p_std__basic_ostreamTchar_t arg0) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_serialize(swigCPtr, SWIGTYPE_p_std__basic_ostreamTchar_t.getCPtr(arg0));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deserialize(SWIGTYPE_p_std__basic_istreamTchar_t arg0) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_deserialize(swigCPtr, SWIGTYPE_p_std__basic_istreamTchar_t.getCPtr(arg0));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isEmpty() {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_isEmpty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear() {
    pyxlibPINVOKE.PYXTileCollection_SPtr_clear(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCellResolution() {
    int ret = pyxlibPINVOKE.PYXTileCollection_SPtr_getCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCellResolution(int nCellResolution) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_setCellResolution(swigCPtr, nCellResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXGeometry_SPtr intersection(PYXGeometry geometry, bool bCommutative) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_intersection__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry), bCommutative), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXGeometry geometry) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_intersection__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXTileCollection collection) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_intersection__SWIG_2(swigCPtr, PYXTileCollection.getCPtr(collection)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXTile tile) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_intersection__SWIG_3(swigCPtr, PYXTile.getCPtr(tile)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXCell cell) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_intersection__SWIG_4(swigCPtr, PYXCell.getCPtr(cell)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXGeometry geometry, bool bCommutative) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_intersects__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry), bCommutative);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXGeometry geometry) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_intersects__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXTileCollection collection) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_intersects__SWIG_2(swigCPtr, PYXTileCollection.getCPtr(collection));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXTile tile) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_intersects__SWIG_3(swigCPtr, PYXTile.getCPtr(tile));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXCell cell) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_intersects__SWIG_4(swigCPtr, PYXCell.getCPtr(cell));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXIcosIndex cell) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_intersects__SWIG_5(swigCPtr, PYXIcosIndex.getCPtr(cell));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(PYXGeometry geometry) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_contains__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(PYXTileCollection collection) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_contains__SWIG_1(swigCPtr, PYXTileCollection.getCPtr(collection));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr disjunction(PYXGeometry geometry) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_disjunction__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr disjunction(PYXTileCollection tileCollection) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_disjunction__SWIG_1(swigCPtr, PYXTileCollection.getCPtr(tileCollection)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getGeometryCount() {
    int ret = pyxlibPINVOKE.PYXTileCollection_SPtr_getGeometryCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_boost__intrusive_ptrTPYXGeometryIterator_t getGeometryIterator() {
    SWIGTYPE_p_boost__intrusive_ptrTPYXGeometryIterator_t ret = new SWIGTYPE_p_boost__intrusive_ptrTPYXGeometryIterator_t(pyxlibPINVOKE.PYXTileCollection_SPtr_getGeometryIterator(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollectionIterator_SPtr getTileIterator() {
    PYXTileCollectionIterator_SPtr ret = new PYXTileCollectionIterator_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_getTileIterator(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXInnerTileIntersectionIterator_SPtr getInnerTileIterator(PYXInnerTile tile) {
    PYXInnerTileIntersectionIterator_SPtr ret = new PYXInnerTileIntersectionIterator_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_getInnerTileIterator(swigCPtr, PYXInnerTile.getCPtr(tile)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void calcPerimeter(Vector_Index pVecIndex) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_calcPerimeter(swigCPtr, Vector_Index.getCPtr(pVecIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void copyTo(PYXTileCollection pTileCollection) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_copyTo__SWIG_0(swigCPtr, PYXTileCollection.getCPtr(pTileCollection));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void copyTo(PYXTileCollection pTileCollection, int nTargetResolution) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_copyTo__SWIG_1(swigCPtr, PYXTileCollection.getCPtr(pTileCollection), nTargetResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXTileCollection_SPtr_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addTile(PYXTile_SPtr spTile) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_addTile__SWIG_0(swigCPtr, PYXTile_SPtr.getCPtr(spTile));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTile(PYXIcosIndex index, int nCellResolution) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_addTile__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index), nCellResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTile(PYXGeometry geometry) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_addTile__SWIG_2(swigCPtr, PYXGeometry.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addGeometry(PYXTileCollection tc) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_addGeometry(swigCPtr, PYXTileCollection.getCPtr(tc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoAggregate() {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_getAutoAggregate(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEqual(PYXTileCollection to) {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_isEqual(swigCPtr, PYXTileCollection.getCPtr(to));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void limitCellsCountTo(int maxCellsCount) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_limitCellsCountTo(swigCPtr, maxCellsCount);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCellCount() {
    int ret = pyxlibPINVOKE.PYXTileCollection_SPtr_getCellCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAreaOnReferenceShpere() {
    double ret = pyxlibPINVOKE.PYXTileCollection_SPtr_getAreaOnReferenceShpere(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCollection() {
    bool ret = pyxlibPINVOKE.PYXTileCollection_SPtr_isCollection(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIterator_SPtr getIterator() {
    PYXIterator_SPtr ret = new PYXIterator_SPtr(pyxlibPINVOKE.PYXTileCollection_SPtr_getIterator(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getBoundingRects(ICoordConverter coordConvertor, PYXRect2DDouble pRect1, PYXRect2DDouble pRect2) {
    pyxlibPINVOKE.PYXTileCollection_SPtr_getBoundingRects(swigCPtr, ICoordConverter.getCPtr(coordConvertor), PYXRect2DDouble.getCPtr(pRect1), PYXRect2DDouble.getCPtr(pRect2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
