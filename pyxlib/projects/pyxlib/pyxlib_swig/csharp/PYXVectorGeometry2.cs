/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXVectorGeometry2 : PYXGeometry {
  private HandleRef swigCPtr;

  public PYXVectorGeometry2(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXVectorGeometry2Upcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXVectorGeometry2 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXVectorGeometry2() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXVectorGeometry2(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PYXVectorGeometry2_SPtr create(SWIGTYPE_p_std__basic_istreamTchar_t arg0) {
    PYXVectorGeometry2_SPtr ret = new PYXVectorGeometry2_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_create__SWIG_0(SWIGTYPE_p_std__basic_istreamTchar_t.getCPtr(arg0)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXVectorGeometry2_SPtr create(SWIGTYPE_p_PYXWireBuffer buffer) {
    PYXVectorGeometry2_SPtr ret = new PYXVectorGeometry2_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_create__SWIG_1(SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXVectorGeometry2_SPtr create(IRegion_SPtr region, int resolution) {
    PYXVectorGeometry2_SPtr ret = new PYXVectorGeometry2_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_create__SWIG_2(IRegion_SPtr.getCPtr(region), resolution), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXVectorGeometry2_SPtr createFromPoint(PYXCoord3DDouble point, int resolution) {
    PYXVectorGeometry2_SPtr ret = new PYXVectorGeometry2_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_createFromPoint(PYXCoord3DDouble.getCPtr(point), resolution), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXVectorGeometry2_SPtr createFromLine(PYXCoord3DDouble pointA, PYXCoord3DDouble pointB, int resolution) {
    PYXVectorGeometry2_SPtr ret = new PYXVectorGeometry2_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_createFromLine(PYXCoord3DDouble.getCPtr(pointA), PYXCoord3DDouble.getCPtr(pointB), resolution), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXVectorGeometry2_SPtr create(PYXVectorGeometry2 rhs) {
    PYXVectorGeometry2_SPtr ret = new PYXVectorGeometry2_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_create__SWIG_3(PYXVectorGeometry2.getCPtr(rhs)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXVectorGeometry2(IRegion_SPtr region, int resolution) : this(pyxlibPINVOKE.new_PYXVectorGeometry2__SWIG_0(IRegion_SPtr.getCPtr(region), resolution), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXVectorGeometry2(PYXVectorGeometry2 rhs) : this(pyxlibPINVOKE.new_PYXVectorGeometry2__SWIG_1(PYXVectorGeometry2.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXVectorGeometry2(SWIGTYPE_p_std__basic_istreamTchar_t arg0) : this(pyxlibPINVOKE.new_PYXVectorGeometry2__SWIG_2(SWIGTYPE_p_std__basic_istreamTchar_t.getCPtr(arg0)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXVectorGeometry2(SWIGTYPE_p_PYXWireBuffer buffer) : this(pyxlibPINVOKE.new_PYXVectorGeometry2__SWIG_3(SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deserialize(SWIGTYPE_p_PYXWireBuffer buffer) {
    pyxlibPINVOKE.PYXVectorGeometry2_deserialize(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void serialize(SWIGTYPE_p_std__basic_ostreamTchar_t arg0) {
    pyxlibPINVOKE.PYXVectorGeometry2_serialize__SWIG_0(swigCPtr, SWIGTYPE_p_std__basic_ostreamTchar_t.getCPtr(arg0));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void serialize(SWIGTYPE_p_PYXWireBuffer arg0) {
    pyxlibPINVOKE.PYXVectorGeometry2_serialize__SWIG_1(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(arg0));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IRegion_SPtr getRegion() {
    IRegion_SPtr ret = new IRegion_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_getRegion(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXGeometry_SPtr clone() {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isEmpty() {
    bool ret = pyxlibPINVOKE.PYXVectorGeometry2_isEmpty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getCellResolution() {
    int ret = pyxlibPINVOKE.PYXVectorGeometry2_getCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setCellResolution(int nCellResolution) {
    pyxlibPINVOKE.PYXVectorGeometry2_setCellResolution(swigCPtr, nCellResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override PYXGeometry_SPtr intersection(PYXGeometry geometry, bool bCommutative) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_intersection__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry), bCommutative), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXGeometry_SPtr intersection(PYXGeometry geometry) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_intersection__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXTileCollection collection) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_intersection__SWIG_2(swigCPtr, PYXTileCollection.getCPtr(collection)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXTile tile) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_intersection__SWIG_3(swigCPtr, PYXTile.getCPtr(tile)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXCell cell) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_intersection__SWIG_4(swigCPtr, PYXCell.getCPtr(cell)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool contains(PYXGeometry geometry) {
    bool ret = pyxlibPINVOKE.PYXVectorGeometry2_contains(swigCPtr, PYXGeometry.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool intersects(PYXGeometry geometry, bool bCommutative) {
    bool ret = pyxlibPINVOKE.PYXVectorGeometry2_intersects__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry), bCommutative);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool intersects(PYXGeometry geometry) {
    bool ret = pyxlibPINVOKE.PYXVectorGeometry2_intersects__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXIterator_SPtr getIterator() {
    PYXIterator_SPtr ret = new PYXIterator_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_getIterator(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXInnerTileIntersectionIterator_SPtr getInnerTileIterator(PYXInnerTile tile) {
    PYXInnerTileIntersectionIterator_SPtr ret = new PYXInnerTileIntersectionIterator_SPtr(pyxlibPINVOKE.PYXVectorGeometry2_getInnerTileIterator(swigCPtr, PYXInnerTile.getCPtr(tile)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void calcPerimeter(Vector_Index pVecIndex) {
    pyxlibPINVOKE.PYXVectorGeometry2_calcPerimeter(swigCPtr, Vector_Index.getCPtr(pVecIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXVectorGeometry2_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void copyTo(PYXTileCollection pTileCollection) {
    pyxlibPINVOKE.PYXVectorGeometry2_copyTo__SWIG_0(swigCPtr, PYXTileCollection.getCPtr(pTileCollection));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void copyTo(PYXTileCollection pTileCollection, int nTargetResolution) {
    pyxlibPINVOKE.PYXVectorGeometry2_copyTo__SWIG_1(swigCPtr, PYXTileCollection.getCPtr(pTileCollection), nTargetResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void getBoundingRects(ICoordConverter coordConvertor, PYXRect2DDouble pRect1, PYXRect2DDouble pRect2) {
    pyxlibPINVOKE.PYXVectorGeometry2_getBoundingRects(swigCPtr, ICoordConverter.getCPtr(coordConvertor), PYXRect2DDouble.getCPtr(pRect1), PYXRect2DDouble.getCPtr(pRect2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void test() {
    pyxlibPINVOKE.PYXVectorGeometry2_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
