/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Parameter_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Parameter_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Parameter_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Parameter_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_Parameter_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public Parameter_SPtr() : this(pyxlibPINVOKE.new_Parameter_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Parameter_SPtr(Parameter p, bool add_ref) : this(pyxlibPINVOKE.new_Parameter_SPtr__SWIG_1(Parameter.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Parameter_SPtr(Parameter p) : this(pyxlibPINVOKE.new_Parameter_SPtr__SWIG_2(Parameter.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Parameter_SPtr(Parameter_SPtr rhs) : this(pyxlibPINVOKE.new_Parameter_SPtr__SWIG_3(Parameter_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.Parameter_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(Parameter rhs) {
    pyxlibPINVOKE.Parameter_SPtr_reset__SWIG_1(swigCPtr, Parameter.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Parameter get() {
    IntPtr cPtr = pyxlibPINVOKE.Parameter_SPtr_get(swigCPtr);
    Parameter ret = (cPtr == IntPtr.Zero) ? null : new Parameter(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Parameter __ref__() {
    Parameter ret = new Parameter(pyxlibPINVOKE.Parameter_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Parameter __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.Parameter_SPtr___deref__(swigCPtr);
    Parameter ret = (cPtr == IntPtr.Zero) ? null : new Parameter(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(Parameter_SPtr rhs) {
    pyxlibPINVOKE.Parameter_SPtr_swap(swigCPtr, Parameter_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.Parameter_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.Parameter_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Parameter_SPtr create(ParameterSpec_SPtr spSpec) {
    Parameter_SPtr ret = new Parameter_SPtr(pyxlibPINVOKE.Parameter_SPtr_create__SWIG_0(swigCPtr, ParameterSpec_SPtr.getCPtr(spSpec)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Parameter_SPtr create(ParameterSpec_SPtr spSpec, Vector_IProcess vecValue) {
    Parameter_SPtr ret = new Parameter_SPtr(pyxlibPINVOKE.Parameter_SPtr_create__SWIG_1(swigCPtr, ParameterSpec_SPtr.getCPtr(spSpec), Vector_IProcess.getCPtr(vecValue)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParameterSpec_SPtr getSpec() {
    ParameterSpec_SPtr ret = new ParameterSpec_SPtr(pyxlibPINVOKE.Parameter_SPtr_getSpec(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getValueCount() {
    int ret = pyxlibPINVOKE.Parameter_SPtr_getValueCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IProcess_SPtr getValue(int n) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.Parameter_SPtr_getValue(swigCPtr, n), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector_IProcess getValues() {
    Vector_IProcess ret = new Vector_IProcess(pyxlibPINVOKE.Parameter_SPtr_getValues(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int findValue(IProcess_SPtr spProc) {
    int ret = pyxlibPINVOKE.Parameter_SPtr_findValue__SWIG_0(swigCPtr, IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int findValue(ProcRef procRef) {
    int ret = pyxlibPINVOKE.Parameter_SPtr_findValue__SWIG_1(swigCPtr, ProcRef.getCPtr(procRef));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setValues(Vector_IProcess vecValue) {
    pyxlibPINVOKE.Parameter_SPtr_setValues(swigCPtr, Vector_IProcess.getCPtr(vecValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setValue(int nIndex, IProcess_SPtr spProc) {
    pyxlibPINVOKE.Parameter_SPtr_setValue(swigCPtr, nIndex, IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addValue(IProcess_SPtr spProc) {
    pyxlibPINVOKE.Parameter_SPtr_addValue(swigCPtr, IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeValue(int nIndex) {
    pyxlibPINVOKE.Parameter_SPtr_removeValue(swigCPtr, nIndex);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swapValues(int nIndex1, int nIndex2) {
    pyxlibPINVOKE.Parameter_SPtr_swapValues(swigCPtr, nIndex1, nIndex2);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllValues() {
    pyxlibPINVOKE.Parameter_SPtr_removeAllValues(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier getChangeNotifier() {
    Notifier ret = new Notifier(pyxlibPINVOKE.Parameter_SPtr_getChangeNotifier(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
