/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PointLocation : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PointLocation(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PointLocation obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PointLocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PointLocation(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.PointLocation_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PointLocation fromWGS84(double lat, double lon) {
    PointLocation ret = new PointLocation(pyxlibPINVOKE.PointLocation_fromWGS84__SWIG_0(lat, lon), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PointLocation fromWGS84(PYXCoord2DDouble wgs84LatLon) {
    PointLocation ret = new PointLocation(pyxlibPINVOKE.PointLocation_fromWGS84__SWIG_1(PYXCoord2DDouble.getCPtr(wgs84LatLon)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PointLocation fromGeocenteric(double lat, double lon) {
    PointLocation ret = new PointLocation(pyxlibPINVOKE.PointLocation_fromGeocenteric__SWIG_0(lat, lon), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PointLocation fromGeocenteric(CoordLatLon geocenteric) {
    PointLocation ret = new PointLocation(pyxlibPINVOKE.PointLocation_fromGeocenteric__SWIG_1(CoordLatLon.getCPtr(geocenteric)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PointLocation fromPYXIndex(PYXIcosIndex index) {
    PointLocation ret = new PointLocation(pyxlibPINVOKE.PointLocation_fromPYXIndex(PYXIcosIndex.getCPtr(index)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PointLocation fromXYZ(PYXCoord3DDouble xyz) {
    PointLocation ret = new PointLocation(pyxlibPINVOKE.PointLocation_fromXYZ(PYXCoord3DDouble.getCPtr(xyz)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCoord2DDouble asWGS84() {
    PYXCoord2DDouble ret = new PYXCoord2DDouble(pyxlibPINVOKE.PointLocation_asWGS84(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CoordLatLon asGeocentric() {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.PointLocation_asGeocentric(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCoord3DDouble asXYZ() {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(pyxlibPINVOKE.PointLocation_asXYZ(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIcosIndex asPYXIcosIndex(int resolution) {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PointLocation_asPYXIcosIndex(swigCPtr, resolution), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double distance(PointLocation p2) {
    double ret = pyxlibPINVOKE.PointLocation_distance(swigCPtr, PointLocation.getCPtr(p2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
