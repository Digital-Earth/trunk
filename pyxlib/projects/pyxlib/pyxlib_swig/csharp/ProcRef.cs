/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcRef : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ProcRef(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ProcRef obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcRef() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ProcRef(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

	public override bool Equals(object procRefObject)
	{
		if (null == procRefObject)
		{
			return false;
		}

		ProcRef procRef = procRefObject as ProcRef;
		if (null != procRef)
		{
			return Equals(procRef);
		}

		return false;
	}

	public bool Equals(ProcRef procRef)
	{
		return pyxlib.isEqualProcRef(this,procRef);
	}

	public override int GetHashCode()
	{
		return pyxlib.procRefToStr(this).GetHashCode();
	}

	public override string ToString()
	{
		return pyxlib.procRefToStr(this);
	}

	public static bool operator ==(ProcRef a, ProcRef b)
	{
		if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(ProcRef a, ProcRef b)
	{
		return !(a==b);
	}

  public ProcRef() : this(pyxlibPINVOKE.new_ProcRef__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcRef(IProcess_SPtr spProc) : this(pyxlibPINVOKE.new_ProcRef__SWIG_1(IProcess_SPtr.getCPtr(spProc)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcRef(GUID procid, int nProcVer) : this(pyxlibPINVOKE.new_ProcRef__SWIG_2(GUID.getCPtr(procid), nProcVer), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public GUID getProcID() {
    GUID ret = new GUID(pyxlibPINVOKE.ProcRef_getProcID(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getProcVersion() {
    int ret = pyxlibPINVOKE.ProcRef_getProcVersion(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
