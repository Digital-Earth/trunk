/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcessListEvent : NotifierEvent {
  private HandleRef swigCPtr;

  public ProcessListEvent(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.ProcessListEventUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ProcessListEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcessListEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ProcessListEvent(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static ProcessListEvent_SPtr create(ProcRef procRef, ProcessListEvent.eAction nAction) {
    ProcessListEvent_SPtr ret = new ProcessListEvent_SPtr(pyxlibPINVOKE.ProcessListEvent_create(ProcRef.getCPtr(procRef), (int)nAction), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProcessListEvent_SPtr createChangedEvent() {
    ProcessListEvent_SPtr ret = new ProcessListEvent_SPtr(pyxlibPINVOKE.ProcessListEvent_createChangedEvent(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcRef getProcRef() {
    ProcRef ret = new ProcRef(pyxlibPINVOKE.ProcessListEvent_getProcRef(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessListEvent.eAction getAction() {
    ProcessListEvent.eAction ret = (ProcessListEvent.eAction)pyxlibPINVOKE.ProcessListEvent_getAction(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProcessListEvent dynamic_cast(NotifierEvent pSource) {
    IntPtr cPtr = pyxlibPINVOKE.ProcessListEvent_dynamic_cast(NotifierEvent.getCPtr(pSource));
    ProcessListEvent ret = (cPtr == IntPtr.Zero) ? null : new ProcessListEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum eAction {
    knAdded,
    knRemoved,
    knChanged
  }

}
