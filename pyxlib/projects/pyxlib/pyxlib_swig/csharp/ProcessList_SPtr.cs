/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcessList_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ProcessList_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ProcessList_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcessList_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ProcessList_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public ProcessList_SPtr() : this(pyxlibPINVOKE.new_ProcessList_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessList_SPtr(ProcessList p, bool add_ref) : this(pyxlibPINVOKE.new_ProcessList_SPtr__SWIG_1(ProcessList.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessList_SPtr(ProcessList p) : this(pyxlibPINVOKE.new_ProcessList_SPtr__SWIG_2(ProcessList.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessList_SPtr(ProcessList_SPtr rhs) : this(pyxlibPINVOKE.new_ProcessList_SPtr__SWIG_3(ProcessList_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.ProcessList_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(ProcessList rhs) {
    pyxlibPINVOKE.ProcessList_SPtr_reset__SWIG_1(swigCPtr, ProcessList.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessList get() {
    IntPtr cPtr = pyxlibPINVOKE.ProcessList_SPtr_get(swigCPtr);
    ProcessList ret = (cPtr == IntPtr.Zero) ? null : new ProcessList(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessList __ref__() {
    ProcessList ret = new ProcessList(pyxlibPINVOKE.ProcessList_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessList __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.ProcessList_SPtr___deref__(swigCPtr);
    ProcessList ret = (cPtr == IntPtr.Zero) ? null : new ProcessList(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(ProcessList_SPtr rhs) {
    pyxlibPINVOKE.ProcessList_SPtr_swap(swigCPtr, ProcessList_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.ProcessList_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.ProcessList_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessList_SPtr create() {
    ProcessList_SPtr ret = new ProcessList_SPtr(pyxlibPINVOKE.ProcessList_SPtr_create(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasProcs() {
    bool ret = pyxlibPINVOKE.ProcessList_SPtr_hasProcs(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(ProcRef procref) {
    bool ret = pyxlibPINVOKE.ProcessList_SPtr_contains(swigCPtr, ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addProc(ProcRef procref) {
    pyxlibPINVOKE.ProcessList_SPtr_addProc__SWIG_0(swigCPtr, ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addProc(IProcess_SPtr proc) {
    pyxlibPINVOKE.ProcessList_SPtr_addProc__SWIG_1(swigCPtr, IProcess_SPtr.getCPtr(proc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeProc(ProcRef procref) {
    pyxlibPINVOKE.ProcessList_SPtr_removeProc(swigCPtr, ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    pyxlibPINVOKE.ProcessList_SPtr_clear(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int count() {
    int ret = pyxlibPINVOKE.ProcessList_SPtr_count(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getProcessRefs(Vector_ProcRef vecProcs) {
    pyxlibPINVOKE.ProcessList_SPtr_getProcessRefs(swigCPtr, Vector_ProcRef.getCPtr(vecProcs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getProcesses(Vector_IProcess vecProcs) {
    pyxlibPINVOKE.ProcessList_SPtr_getProcesses(swigCPtr, Vector_IProcess.getCPtr(vecProcs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProcesses(Vector_IProcess vecProcs) {
    pyxlibPINVOKE.ProcessList_SPtr_setProcesses(swigCPtr, Vector_IProcess.getCPtr(vecProcs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier getListChangedNotifier() {
    Notifier ret = new Notifier(pyxlibPINVOKE.ProcessList_SPtr_getListChangedNotifier(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
