/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcessProcessingEvent : ProcessEvent {
  private HandleRef swigCPtr;

  public ProcessProcessingEvent(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.ProcessProcessingEventUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ProcessProcessingEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcessProcessingEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ProcessProcessingEvent(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static string Error {
  // Generated from %typemap(csvarin) const string &
  set {
    throw new NotImplementedException();
  }

  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessProcessingEvent_Error_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string Processing {
  // Generated from %typemap(csvarin) const string &
  set {
    throw new NotImplementedException();
  }

  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessProcessingEvent_Processing_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string Fetching {
  // Generated from %typemap(csvarin) const string &
  set {
    throw new NotImplementedException();
  }

  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessProcessingEvent_Fetching_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string Downloading {
  // Generated from %typemap(csvarin) const string &
  set {
    throw new NotImplementedException();
  }

  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessProcessingEvent_Downloading_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public string getProcessingMessage() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessProcessingEvent_getProcessingMessage(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static ProcessProcessingEvent_SPtr create(IProcess_SPtr spProc, string message) {
    ProcessProcessingEvent_SPtr ret = new ProcessProcessingEvent_SPtr(pyxlibPINVOKE.ProcessProcessingEvent_create(IProcess_SPtr.getCPtr(spProc), pyxlibPINVOKE.UnmanagedString.Create(message)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessProcessingEvent(IProcess_SPtr spProc, string message) : this(pyxlibPINVOKE.new_ProcessProcessingEvent(IProcess_SPtr.getCPtr(spProc), pyxlibPINVOKE.UnmanagedString.Create(message)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static ProcessProcessingEvent dynamic_cast(NotifierEvent pSource) {
    IntPtr cPtr = pyxlibPINVOKE.ProcessProcessingEvent_dynamic_cast(NotifierEvent.getCPtr(pSource));
    ProcessProcessingEvent ret = (cPtr == IntPtr.Zero) ? null : new ProcessProcessingEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
