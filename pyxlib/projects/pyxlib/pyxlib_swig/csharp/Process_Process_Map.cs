/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Process_Process_Map : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Process_Process_Map(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Process_Process_Map obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Process_Process_Map() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_Process_Process_Map(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public Process_Process_Map() : this(pyxlibPINVOKE.new_Process_Process_Map__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Process_Process_Map(Process_Process_Map arg0) : this(pyxlibPINVOKE.new_Process_Process_Map__SWIG_1(Process_Process_Map.getCPtr(arg0)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = pyxlibPINVOKE.Process_Process_Map_size(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool empty() {
    bool ret = pyxlibPINVOKE.Process_Process_Map_empty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear() {
    pyxlibPINVOKE.Process_Process_Map_clear(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IProcess_SPtr get(IProcess_SPtr key) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.Process_Process_Map_get(swigCPtr, IProcess_SPtr.getCPtr(key)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(IProcess_SPtr key, IProcess_SPtr x) {
    pyxlibPINVOKE.Process_Process_Map_set(swigCPtr, IProcess_SPtr.getCPtr(key), IProcess_SPtr.getCPtr(x));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void del(IProcess_SPtr key) {
    pyxlibPINVOKE.Process_Process_Map_del(swigCPtr, IProcess_SPtr.getCPtr(key));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_key(IProcess_SPtr key) {
    bool ret = pyxlibPINVOKE.Process_Process_Map_has_key(swigCPtr, IProcess_SPtr.getCPtr(key));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
