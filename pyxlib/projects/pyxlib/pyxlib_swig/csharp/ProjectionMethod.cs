/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProjectionMethod : PYXCoordConverter {
  private HandleRef swigCPtr;

  public ProjectionMethod(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.ProjectionMethodUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ProjectionMethod obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProjectionMethod() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ProjectionMethod(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override void nativeToPYXIS(PYXCoord2DDouble native, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.ProjectionMethod_nativeToPYXIS__SWIG_0(swigCPtr, PYXCoord2DDouble.getCPtr(native), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void pyxisToNative(PYXIcosIndex index, PYXCoord2DDouble pNative) {
    pyxlibPINVOKE.ProjectionMethod_pyxisToNative__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void nativeToPYXIS(CoordLatLon ll, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.ProjectionMethod_nativeToPYXIS__SWIG_1(swigCPtr, CoordLatLon.getCPtr(ll), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void pyxisToNative(PYXIcosIndex index, CoordLatLon pll) {
    pyxlibPINVOKE.ProjectionMethod_pyxisToNative__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index), CoordLatLon.getCPtr(pll));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void xyzToPYXIS(PYXCoord3DDouble coord, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.ProjectionMethod_xyzToPYXIS(swigCPtr, PYXCoord3DDouble.getCPtr(coord), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void pyxisToXYZ(PYXIcosIndex index, PYXCoord3DDouble pCoord) {
    pyxlibPINVOKE.ProjectionMethod_pyxisToXYZ(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord3DDouble.getCPtr(pCoord));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int precisionToResolution(double fPrecision) {
    int ret = pyxlibPINVOKE.ProjectionMethod_precisionToResolution(swigCPtr, fPrecision);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double resolutionToPrecision(int nResolution) {
    double ret = pyxlibPINVOKE.ProjectionMethod_resolutionToPrecision(swigCPtr, nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
