/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RangeDouble : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public RangeDouble(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(RangeDouble obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RangeDouble() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_RangeDouble(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public double min {
    set {
      pyxlibPINVOKE.RangeDouble_min_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = pyxlibPINVOKE.RangeDouble_min_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double max {
    set {
      pyxlibPINVOKE.RangeDouble_max_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = pyxlibPINVOKE.RangeDouble_max_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_RangeBorderType minType {
    set {
      pyxlibPINVOKE.RangeDouble_minType_set(swigCPtr, SWIGTYPE_p_RangeBorderType.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_RangeBorderType ret = new SWIGTYPE_p_RangeBorderType(pyxlibPINVOKE.RangeDouble_minType_get(swigCPtr), true);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_RangeBorderType maxType {
    set {
      pyxlibPINVOKE.RangeDouble_maxType_set(swigCPtr, SWIGTYPE_p_RangeBorderType.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_RangeBorderType ret = new SWIGTYPE_p_RangeBorderType(pyxlibPINVOKE.RangeDouble_maxType_get(swigCPtr), true);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static RangeDouble createClosedOpen(double min, double max) {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.RangeDouble_createClosedOpen(min, max), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RangeDouble createClosedClosed(double min, double max) {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.RangeDouble_createClosedClosed(min, max), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble() : this(pyxlibPINVOKE.new_RangeDouble__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeDouble(double value) : this(pyxlibPINVOKE.new_RangeDouble__SWIG_1(value), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeDouble(double _min, double _max, SWIGTYPE_p_RangeBorderType _minType, SWIGTYPE_p_RangeBorderType _maxType) : this(pyxlibPINVOKE.new_RangeDouble__SWIG_2(_min, _max, SWIGTYPE_p_RangeBorderType.getCPtr(_minType), SWIGTYPE_p_RangeBorderType.getCPtr(_maxType)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeDouble(RangeDouble other) : this(pyxlibPINVOKE.new_RangeDouble__SWIG_3(RangeDouble.getCPtr(other)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double middle() {
    double ret = pyxlibPINVOKE.RangeDouble_middle(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool single() {
    bool ret = pyxlibPINVOKE.RangeDouble_single(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool global() {
    bool ret = pyxlibPINVOKE.RangeDouble_global(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool infinite() {
    bool ret = pyxlibPINVOKE.RangeDouble_infinite(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(double value) {
    bool ret = pyxlibPINVOKE.RangeDouble_contains__SWIG_0(swigCPtr, value);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(RangeDouble range) {
    bool ret = pyxlibPINVOKE.RangeDouble_contains__SWIG_1(swigCPtr, RangeDouble.getCPtr(range));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(RangeDouble range) {
    bool ret = pyxlibPINVOKE.RangeDouble_intersects(swigCPtr, RangeDouble.getCPtr(range));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble lowerHalf() {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.RangeDouble_lowerHalf(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble higherHalf() {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.RangeDouble_higherHalf(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble normalize() {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.RangeDouble_normalize(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble normalizeWith(RangeDouble other) {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.RangeDouble_normalizeWith(swigCPtr, RangeDouble.getCPtr(other)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
