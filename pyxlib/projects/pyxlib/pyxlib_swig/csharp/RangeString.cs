/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RangeString : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public RangeString(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(RangeString obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RangeString() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_RangeString(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public string min {
  // Generated from %typemap(csvarin) const string &
  set {
    throw new NotImplementedException();
  }

  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.RangeString_min_get(swigCPtr));
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public string max {
  // Generated from %typemap(csvarin) const string &
  set {
    throw new NotImplementedException();
  }

  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.RangeString_max_get(swigCPtr));
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public SWIGTYPE_p_RangeBorderType minType {
    set {
      pyxlibPINVOKE.RangeString_minType_set(swigCPtr, SWIGTYPE_p_RangeBorderType.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_RangeBorderType ret = new SWIGTYPE_p_RangeBorderType(pyxlibPINVOKE.RangeString_minType_get(swigCPtr), true);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_RangeBorderType maxType {
    set {
      pyxlibPINVOKE.RangeString_maxType_set(swigCPtr, SWIGTYPE_p_RangeBorderType.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_RangeBorderType ret = new SWIGTYPE_p_RangeBorderType(pyxlibPINVOKE.RangeString_maxType_get(swigCPtr), true);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static RangeString createClosedOpen(string min, string max) {
    RangeString ret = new RangeString(pyxlibPINVOKE.RangeString_createClosedOpen(pyxlibPINVOKE.UnmanagedString.Create(min), pyxlibPINVOKE.UnmanagedString.Create(max)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RangeString createClosedClosed(string min, string max) {
    RangeString ret = new RangeString(pyxlibPINVOKE.RangeString_createClosedClosed(pyxlibPINVOKE.UnmanagedString.Create(min), pyxlibPINVOKE.UnmanagedString.Create(max)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeString() : this(pyxlibPINVOKE.new_RangeString__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeString(string value) : this(pyxlibPINVOKE.new_RangeString__SWIG_1(pyxlibPINVOKE.UnmanagedString.Create(value)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeString(string _min, string _max, SWIGTYPE_p_RangeBorderType _minType, SWIGTYPE_p_RangeBorderType _maxType) : this(pyxlibPINVOKE.new_RangeString__SWIG_2(pyxlibPINVOKE.UnmanagedString.Create(_min), pyxlibPINVOKE.UnmanagedString.Create(_max), SWIGTYPE_p_RangeBorderType.getCPtr(_minType), SWIGTYPE_p_RangeBorderType.getCPtr(_maxType)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeString(RangeString other) : this(pyxlibPINVOKE.new_RangeString__SWIG_3(RangeString.getCPtr(other)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string middle() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.RangeString_middle(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public bool single() {
    bool ret = pyxlibPINVOKE.RangeString_single(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool global() {
    bool ret = pyxlibPINVOKE.RangeString_global(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool infinite() {
    bool ret = pyxlibPINVOKE.RangeString_infinite(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(string value) {
    bool ret = pyxlibPINVOKE.RangeString_contains__SWIG_0(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(RangeString range) {
    bool ret = pyxlibPINVOKE.RangeString_contains__SWIG_1(swigCPtr, RangeString.getCPtr(range));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(RangeString range) {
    bool ret = pyxlibPINVOKE.RangeString_intersects(swigCPtr, RangeString.getCPtr(range));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeString lowerHalf() {
    RangeString ret = new RangeString(pyxlibPINVOKE.RangeString_lowerHalf(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeString higherHalf() {
    RangeString ret = new RangeString(pyxlibPINVOKE.RangeString_higherHalf(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeString normalize() {
    RangeString ret = new RangeString(pyxlibPINVOKE.RangeString_normalize(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeString normalizeWith(RangeString other) {
    RangeString ret = new RangeString(pyxlibPINVOKE.RangeString_normalizeWith(swigCPtr, RangeString.getCPtr(other)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
