/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ReferenceSphere : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ReferenceSphere(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ReferenceSphere obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ReferenceSphere() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ReferenceSphere(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static double kfRadius {
    get {
      double ret = pyxlibPINVOKE.ReferenceSphere_kfRadius_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ReferenceSphere getInstance() {
    IntPtr cPtr = pyxlibPINVOKE.ReferenceSphere_getInstance();
    ReferenceSphere ret = (cPtr == IntPtr.Zero) ? null : new ReferenceSphere(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getName() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ReferenceSphere_getName(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual double calcDistance(CoordLatLon pt1, CoordLatLon pt2) {
    double ret = pyxlibPINVOKE.ReferenceSphere_calcDistance(swigCPtr, CoordLatLon.getCPtr(pt1), CoordLatLon.getCPtr(pt2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CoordLatLon toGeocentric(CoordLatLon pt) {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.ReferenceSphere_toGeocentric(swigCPtr, CoordLatLon.getCPtr(pt)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CoordLatLon toDatum(CoordLatLon pt) {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.ReferenceSphere_toDatum(swigCPtr, CoordLatLon.getCPtr(pt)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
