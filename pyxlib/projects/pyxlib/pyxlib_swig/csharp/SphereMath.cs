/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SphereMath : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SphereMath(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(SphereMath obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SphereMath() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_SphereMath(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static double knNumericEpsilon {
    get {
      double ret = pyxlibPINVOKE.SphereMath_knNumericEpsilon_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double knDotNumericEpsilon {
    get {
      double ret = pyxlibPINVOKE.SphereMath_knDotNumericEpsilon_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void test() {
    pyxlibPINVOKE.SphereMath_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static CoordLatLon xyzll(PYXCoord3DDouble xyz) {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.SphereMath_xyzll(PYXCoord3DDouble.getCPtr(xyz)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void llxyz(CoordLatLon ll, PYXCoord3DDouble result) {
    pyxlibPINVOKE.SphereMath_llxyz__SWIG_0(CoordLatLon.getCPtr(ll), PYXCoord3DDouble.getCPtr(result));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PYXCoord3DDouble llxyz(CoordLatLon ll) {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(pyxlibPINVOKE.SphereMath_llxyz__SWIG_1(CoordLatLon.getCPtr(ll)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcPolygonArea(Vector_CoordLatLon vecVertices, double fRadius) {
    double ret = pyxlibPINVOKE.SphereMath_calcPolygonArea__SWIG_0(Vector_CoordLatLon.getCPtr(vecVertices), fRadius);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcPolygonArea(Vector_CoordLatLon vecVertices) {
    double ret = pyxlibPINVOKE.SphereMath_calcPolygonArea__SWIG_1(Vector_CoordLatLon.getCPtr(vecVertices));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double distanceBetween(PYXCoord3DDouble pointA, PYXCoord3DDouble pointB) {
    double ret = pyxlibPINVOKE.SphereMath_distanceBetween__SWIG_0(PYXCoord3DDouble.getCPtr(pointA), PYXCoord3DDouble.getCPtr(pointB));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double distanceBetween(CoordLatLon pointA, CoordLatLon pointB) {
    double ret = pyxlibPINVOKE.SphereMath_distanceBetween__SWIG_1(CoordLatLon.getCPtr(pointA), CoordLatLon.getCPtr(pointB));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double headingInDegrees(CoordLatLon from, CoordLatLon to) {
    double ret = pyxlibPINVOKE.SphereMath_headingInDegrees(CoordLatLon.getCPtr(from), CoordLatLon.getCPtr(to));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SphereMath() : this(pyxlibPINVOKE.new_SphereMath(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int knEarthRadius = pyxlibPINVOKE.SphereMath_knEarthRadius_get();
}
