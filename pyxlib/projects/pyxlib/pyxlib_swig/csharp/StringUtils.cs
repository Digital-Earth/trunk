/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class StringUtils : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public StringUtils(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(StringUtils obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringUtils() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_StringUtils(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.StringUtils_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string trim(string str) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_trim(pyxlibPINVOKE.UnmanagedString.Create(str)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string trimRight(string str) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_trimRight(pyxlibPINVOKE.UnmanagedString.Create(str)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string trimLeft(string str) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_trimLeft(pyxlibPINVOKE.UnmanagedString.Create(str)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string format(string strString, string strArg1, string strArg2, string strArg3, string strArg4) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_format__SWIG_0(pyxlibPINVOKE.UnmanagedString.Create(strString), pyxlibPINVOKE.UnmanagedString.Create(strArg1), pyxlibPINVOKE.UnmanagedString.Create(strArg2), pyxlibPINVOKE.UnmanagedString.Create(strArg3), pyxlibPINVOKE.UnmanagedString.Create(strArg4)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string format(string strString, string strArg1, string strArg2, string strArg3) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_format__SWIG_1(pyxlibPINVOKE.UnmanagedString.Create(strString), pyxlibPINVOKE.UnmanagedString.Create(strArg1), pyxlibPINVOKE.UnmanagedString.Create(strArg2), pyxlibPINVOKE.UnmanagedString.Create(strArg3)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string format(string strString, string strArg1, string strArg2) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_format__SWIG_2(pyxlibPINVOKE.UnmanagedString.Create(strString), pyxlibPINVOKE.UnmanagedString.Create(strArg1), pyxlibPINVOKE.UnmanagedString.Create(strArg2)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string format(string strString, string strArg1) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_format__SWIG_3(pyxlibPINVOKE.UnmanagedString.Create(strString), pyxlibPINVOKE.UnmanagedString.Create(strArg1)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string format(string strString) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_format__SWIG_4(pyxlibPINVOKE.UnmanagedString.Create(strString)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static int countDecimalPlaces(string strNumber) {
    int ret = pyxlibPINVOKE.StringUtils_countDecimalPlaces(pyxlibPINVOKE.UnmanagedString.Create(strNumber));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getDecimalString(string strNumber) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_getDecimalString(pyxlibPINVOKE.UnmanagedString.Create(strNumber)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string now() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_now());
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string ascTime(SWIGTYPE_p_time_t time) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_ascTime(SWIGTYPE_p_time_t.getCPtr(time)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static int toColour(string str) {
    int ret = pyxlibPINVOKE.StringUtils_toColour(pyxlibPINVOKE.UnmanagedString.Create(str));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isNumeric(string strValue) {
    bool ret = pyxlibPINVOKE.StringUtils_isNumeric(pyxlibPINVOKE.UnmanagedString.Create(strValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool tryParseFormattedNumber(string strValue, SWIGTYPE_p_std__string trimmedValue) {
    bool ret = pyxlibPINVOKE.StringUtils_tryParseFormattedNumber(pyxlibPINVOKE.UnmanagedString.Create(strValue), SWIGTYPE_p_std__string.getCPtr(trimmedValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isNumericOctal(string strValue) {
    bool ret = pyxlibPINVOKE.StringUtils_isNumericOctal(pyxlibPINVOKE.UnmanagedString.Create(strValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isNumericHexadecimal(string strValue) {
    bool ret = pyxlibPINVOKE.StringUtils_isNumericHexadecimal(pyxlibPINVOKE.UnmanagedString.Create(strValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string procRefToStr(ProcRef value, int nPrecision) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_procRefToStr__SWIG_0(ProcRef.getCPtr(value), nPrecision));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string procRefToStr(ProcRef value) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.StringUtils_procRefToStr__SWIG_1(ProcRef.getCPtr(value)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static void strToPYXValue(string strValue, PYXValue pValue) {
    pyxlibPINVOKE.StringUtils_strToPYXValue__SWIG_0(pyxlibPINVOKE.UnmanagedString.Create(strValue), PYXValue.getCPtr(pValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PYXValue strToPYXValue(string strValue) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.StringUtils_strToPYXValue__SWIG_1(pyxlibPINVOKE.UnmanagedString.Create(strValue)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringUtils() : this(pyxlibPINVOKE.new_StringUtils(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
