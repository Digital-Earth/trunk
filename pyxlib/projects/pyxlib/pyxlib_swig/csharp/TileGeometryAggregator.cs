/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class TileGeometryAggregator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public TileGeometryAggregator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TileGeometryAggregator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TileGeometryAggregator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_TileGeometryAggregator(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public TileGeometryAggregator(PYXTile tile) : this(pyxlibPINVOKE.new_TileGeometryAggregator(PYXTile.getCPtr(tile)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TileGeometryAggregator add(PYXGeometry_SPtr geometry) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_add(swigCPtr, PYXGeometry_SPtr.getCPtr(geometry)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TileGeometryAggregator intersect(PYXGeometry_SPtr geometry) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_intersect__SWIG_0(swigCPtr, PYXGeometry_SPtr.getCPtr(geometry)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TileGeometryAggregator intersect(IFeatureCollection_SPtr features) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_intersect__SWIG_1(swigCPtr, IFeatureCollection_SPtr.getCPtr(features)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TileGeometryAggregator intersect(ICoverage_SPtr coverage) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_intersect__SWIG_2(swigCPtr, ICoverage_SPtr.getCPtr(coverage)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TileGeometryAggregator substract(PYXGeometry_SPtr geometry) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_substract__SWIG_0(swigCPtr, PYXGeometry_SPtr.getCPtr(geometry)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TileGeometryAggregator substract(IFeatureCollection_SPtr features) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_substract__SWIG_1(swigCPtr, IFeatureCollection_SPtr.getCPtr(features)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TileGeometryAggregator substract(ICoverage_SPtr coverage) {
    TileGeometryAggregator ret = new TileGeometryAggregator(pyxlibPINVOKE.TileGeometryAggregator_substract__SWIG_2(swigCPtr, ICoverage_SPtr.getCPtr(coverage)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getFoundCellCount() {
    int ret = pyxlibPINVOKE.TileGeometryAggregator_getFoundCellCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTileCollection_SPtr asTileCollection() {
    PYXTileCollection_SPtr ret = new PYXTileCollection_SPtr(pyxlibPINVOKE.TileGeometryAggregator_asTileCollection(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
