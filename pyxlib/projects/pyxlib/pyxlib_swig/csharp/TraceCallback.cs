/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class TraceCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TraceCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TraceCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TraceCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_TraceCallback(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual void message(Trace.eLevel level, string strMessage) {
    pyxlibPINVOKE.TraceCallback_message(swigCPtr, (int)level, pyxlibPINVOKE.UnmanagedString.Create(strMessage));
  }

  public static void traceCallbackAdapter(Trace.eLevel nTraceLevel, string strMessage, SWIGTYPE_p_void pUserData) {
    pyxlibPINVOKE.TraceCallback_traceCallbackAdapter((int)nTraceLevel, pyxlibPINVOKE.UnmanagedString.Create(strMessage), SWIGTYPE_p_void.getCPtr(pUserData));
  }

  public TraceCallback() : this(pyxlibPINVOKE.new_TraceCallback(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("message", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTraceCallback_0(SwigDirectormessage);
    pyxlibPINVOKE.TraceCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TraceCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectormessage(int level, IntPtr strMessage) {
    message((Trace.eLevel)level, pyxlibPINVOKE.UnmanagedString.Consume(strMessage));
  }

  public delegate void SwigDelegateTraceCallback_0(int level, IntPtr strMessage);

  private SwigDelegateTraceCallback_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(Trace.eLevel), typeof(string) };
}
