/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UserCredentialsInitError : IUserCredentialsError {
  private HandleRef swigCPtr;

  public UserCredentialsInitError(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.UserCredentialsInitErrorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UserCredentialsInitError obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UserCredentialsInitError() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_UserCredentialsInitError(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsInitError_clsid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsInitError_aiid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int niid {
    get {
      int ret = pyxlibPINVOKE.UserCredentialsInitError_niid_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override uint AddRef() {
    uint ret = pyxlibPINVOKE.UserCredentialsInitError_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint Release() {
    uint ret = pyxlibPINVOKE.UserCredentialsInitError_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getErrorID() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UserCredentialsInitError_getErrorID(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public UserCredentialsInitError() : this(pyxlibPINVOKE.new_UserCredentialsInitError__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsInitError(GUID credentialsType, string target) : this(pyxlibPINVOKE.new_UserCredentialsInitError__SWIG_1(GUID.getCPtr(credentialsType), pyxlibPINVOKE.UnmanagedString.Create(target)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string getError() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UserCredentialsInitError_getError(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public override void setError(string strError) {
    pyxlibPINVOKE.UserCredentialsInitError_setError(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strError));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override GUID getNeededCredentialsType() {
    GUID ret = new GUID(pyxlibPINVOKE.UserCredentialsInitError_getNeededCredentialsType(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getCredentialsTarget() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UserCredentialsInitError_getCredentialsTarget(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setCredentialsDetials(GUID credentialsType, string target) {
    pyxlibPINVOKE.UserCredentialsInitError_setCredentialsDetials(swigCPtr, GUID.getCPtr(credentialsType), pyxlibPINVOKE.UnmanagedString.Create(target));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
