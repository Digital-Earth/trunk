/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UserCredentialsList : IUserCredentials {
  private HandleRef swigCPtr;

  public UserCredentialsList(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.UserCredentialsListUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UserCredentialsList obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UserCredentialsList() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_UserCredentialsList(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsList_clsid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsList_aiid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int niid {
    get {
      int ret = pyxlibPINVOKE.UserCredentialsList_niid_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override uint AddRef() {
    uint ret = pyxlibPINVOKE.UserCredentialsList_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint Release() {
    uint ret = pyxlibPINVOKE.UserCredentialsList_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override GUID getCredentialsType() {
    GUID ret = new GUID(pyxlibPINVOKE.UserCredentialsList_getCredentialsType(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getCredentialsCount() {
    int ret = pyxlibPINVOKE.UserCredentialsList_getCredentialsCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override IUserCredentials_SPtr getCredentials(int index) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UserCredentialsList_getCredentials__SWIG_0(swigCPtr, index), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override IUserCredentials_SPtr getCredentials() {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UserCredentialsList_getCredentials__SWIG_1(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override IUserCredentials_SPtr findFirstCredentialOfType(GUID type) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UserCredentialsList_findFirstCredentialOfType(swigCPtr, GUID.getCPtr(type)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addCredential(IUserCredentials_SPtr credential) {
    pyxlibPINVOKE.UserCredentialsList_addCredential(swigCPtr, IUserCredentials_SPtr.getCPtr(credential));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsList() : this(pyxlibPINVOKE.new_UserCredentialsList(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
