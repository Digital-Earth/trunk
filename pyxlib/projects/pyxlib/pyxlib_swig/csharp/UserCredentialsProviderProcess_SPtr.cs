/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UserCredentialsProviderProcess_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public UserCredentialsProviderProcess_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UserCredentialsProviderProcess_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UserCredentialsProviderProcess_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_UserCredentialsProviderProcess_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public UserCredentialsProviderProcess_SPtr() : this(pyxlibPINVOKE.new_UserCredentialsProviderProcess_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsProviderProcess_SPtr(UserCredentialsProviderProcess p, bool add_ref) : this(pyxlibPINVOKE.new_UserCredentialsProviderProcess_SPtr__SWIG_1(UserCredentialsProviderProcess.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsProviderProcess_SPtr(UserCredentialsProviderProcess p) : this(pyxlibPINVOKE.new_UserCredentialsProviderProcess_SPtr__SWIG_2(UserCredentialsProviderProcess.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsProviderProcess_SPtr(UserCredentialsProviderProcess_SPtr rhs) : this(pyxlibPINVOKE.new_UserCredentialsProviderProcess_SPtr__SWIG_3(UserCredentialsProviderProcess_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(UserCredentialsProviderProcess rhs) {
    pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_reset__SWIG_1(swigCPtr, UserCredentialsProviderProcess.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsProviderProcess get() {
    IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_get(swigCPtr);
    UserCredentialsProviderProcess ret = (cPtr == IntPtr.Zero) ? null : new UserCredentialsProviderProcess(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UserCredentialsProviderProcess __ref__() {
    UserCredentialsProviderProcess ret = new UserCredentialsProviderProcess(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UserCredentialsProviderProcess __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr___deref__(swigCPtr);
    UserCredentialsProviderProcess ret = (cPtr == IntPtr.Zero) ? null : new UserCredentialsProviderProcess(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(UserCredentialsProviderProcess_SPtr rhs) {
    pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_swap(swigCPtr, UserCredentialsProviderProcess_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_clsid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_aiid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int niid {
    get {
      int ret = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_niid_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void test() {
    pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_test(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint AddRef() {
    uint ret = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessSpec_SPtr getSpecStatic() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_getSpecStatic(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcessSpec_SPtr getSpec() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_getSpec(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IUnknown_CSPtr getOutput() {
    IUnknown_CSPtr ret = new IUnknown_CSPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_getOutput__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getAttributeSchema() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_getAttributeSchema(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public Attribute_Map getAttributes() {
    Attribute_Map ret = new Attribute_Map(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_getAttributes(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAttributes(Attribute_Map mapAttr) {
    pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_setAttributes(swigCPtr, Attribute_Map.getCPtr(mapAttr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IUserCredentials_SPtr getCredentials(string target, GUID credentialsType) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_getCredentials(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(target), GUID.getCPtr(credentialsType)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void confirmCredentials(string target, IUserCredentials_SPtr credential, bool valid) {
    pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_confirmCredentials(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(target), IUserCredentials_SPtr.getCPtr(credential), valid);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
