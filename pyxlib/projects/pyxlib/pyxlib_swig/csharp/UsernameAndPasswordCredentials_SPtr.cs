/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UsernameAndPasswordCredentials_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public UsernameAndPasswordCredentials_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UsernameAndPasswordCredentials_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsernameAndPasswordCredentials_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_UsernameAndPasswordCredentials_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public UsernameAndPasswordCredentials_SPtr() : this(pyxlibPINVOKE.new_UsernameAndPasswordCredentials_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsernameAndPasswordCredentials_SPtr(UsernameAndPasswordCredentials p, bool add_ref) : this(pyxlibPINVOKE.new_UsernameAndPasswordCredentials_SPtr__SWIG_1(UsernameAndPasswordCredentials.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsernameAndPasswordCredentials_SPtr(UsernameAndPasswordCredentials p) : this(pyxlibPINVOKE.new_UsernameAndPasswordCredentials_SPtr__SWIG_2(UsernameAndPasswordCredentials.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsernameAndPasswordCredentials_SPtr(UsernameAndPasswordCredentials_SPtr rhs) : this(pyxlibPINVOKE.new_UsernameAndPasswordCredentials_SPtr__SWIG_3(UsernameAndPasswordCredentials_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(UsernameAndPasswordCredentials rhs) {
    pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_reset__SWIG_1(swigCPtr, UsernameAndPasswordCredentials.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsernameAndPasswordCredentials get() {
    IntPtr cPtr = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_get(swigCPtr);
    UsernameAndPasswordCredentials ret = (cPtr == IntPtr.Zero) ? null : new UsernameAndPasswordCredentials(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsernameAndPasswordCredentials __ref__() {
    UsernameAndPasswordCredentials ret = new UsernameAndPasswordCredentials(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsernameAndPasswordCredentials __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr___deref__(swigCPtr);
    UsernameAndPasswordCredentials ret = (cPtr == IntPtr.Zero) ? null : new UsernameAndPasswordCredentials(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(UsernameAndPasswordCredentials_SPtr rhs) {
    pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_swap(swigCPtr, UsernameAndPasswordCredentials_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_clsid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_aiid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int niid {
    get {
      int ret = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_niid_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint AddRef() {
    uint ret = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID getCredentialsType() {
    GUID ret = new GUID(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_getCredentialsType(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getCredentialsCount() {
    int ret = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_getCredentialsCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IUserCredentials_SPtr getCredentials(int index) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_getCredentials__SWIG_0(swigCPtr, index), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IUserCredentials_SPtr getCredentials() {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_getCredentials__SWIG_1(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IUserCredentials_SPtr findFirstCredentialOfType(GUID type) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_findFirstCredentialOfType(swigCPtr, GUID.getCPtr(type)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getUsername() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_getUsername(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getPassword() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_getPassword(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public IUserCredentials_SPtr create(string username, string password) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_create(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(username), pyxlibPINVOKE.UnmanagedString.Create(password)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUsernameAndPassword(string username, string password) {
    pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_setUsernameAndPassword(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(username), pyxlibPINVOKE.UnmanagedString.Create(password));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UsernameAndPasswordCredentials_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
