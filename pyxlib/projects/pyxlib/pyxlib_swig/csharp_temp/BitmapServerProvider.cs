/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BitmapServerProvider : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public BitmapServerProvider(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(BitmapServerProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BitmapServerProvider() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_BitmapServerProvider(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual string loadIcon(string iconStyle) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(BitmapServerProvider)) ? pyxlibPINVOKE.BitmapServerProvider_loadIcon(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(iconStyle)) : pyxlibPINVOKE.BitmapServerProvider_loadIconSwigExplicitBitmapServerProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(iconStyle))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string loadResource(string resourceName) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(BitmapServerProvider)) ? pyxlibPINVOKE.BitmapServerProvider_loadResource(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(resourceName)) : pyxlibPINVOKE.BitmapServerProvider_loadResourceSwigExplicitBitmapServerProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(resourceName))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string loadBitmap(string path) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(BitmapServerProvider)) ? pyxlibPINVOKE.BitmapServerProvider_loadBitmap(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(path)) : pyxlibPINVOKE.BitmapServerProvider_loadBitmapSwigExplicitBitmapServerProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(path))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string forceRGB(string path) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(BitmapServerProvider)) ? pyxlibPINVOKE.BitmapServerProvider_forceRGB(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(path)) : pyxlibPINVOKE.BitmapServerProvider_forceRGBSwigExplicitBitmapServerProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(path))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual int release() {
    int ret = ((this.GetType() == typeof(BitmapServerProvider)) ? pyxlibPINVOKE.BitmapServerProvider_release(swigCPtr) : pyxlibPINVOKE.BitmapServerProvider_releaseSwigExplicitBitmapServerProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(BitmapServerProvider)) ? pyxlibPINVOKE.BitmapServerProvider_addRef(swigCPtr) : pyxlibPINVOKE.BitmapServerProvider_addRefSwigExplicitBitmapServerProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BitmapServerProvider_SPtr getBitmapServerProvider() {
    BitmapServerProvider_SPtr ret = new BitmapServerProvider_SPtr(pyxlibPINVOKE.BitmapServerProvider_getBitmapServerProvider(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setBitmapServerProvider(BitmapServerProvider_SPtr spProvider) {
    pyxlibPINVOKE.BitmapServerProvider_setBitmapServerProvider(BitmapServerProvider_SPtr.getCPtr(spProvider));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public BitmapServerProvider() : this(pyxlibPINVOKE.new_BitmapServerProvider(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("loadIcon", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateBitmapServerProvider_0(SwigDirectorloadIcon);
    if (SwigDerivedClassHasMethod("loadResource", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateBitmapServerProvider_1(SwigDirectorloadResource);
    if (SwigDerivedClassHasMethod("loadBitmap", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateBitmapServerProvider_2(SwigDirectorloadBitmap);
    if (SwigDerivedClassHasMethod("forceRGB", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateBitmapServerProvider_3(SwigDirectorforceRGB);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateBitmapServerProvider_4(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateBitmapServerProvider_5(SwigDirectoraddRef);
    pyxlibPINVOKE.BitmapServerProvider_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(BitmapServerProvider));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorloadIcon(IntPtr iconStyle) {
    return pyxlibPINVOKE.UnmanagedString.Create(loadIcon(pyxlibPINVOKE.UnmanagedString.Consume(iconStyle)));
  }

  private IntPtr SwigDirectorloadResource(IntPtr resourceName) {
    return pyxlibPINVOKE.UnmanagedString.Create(loadResource(pyxlibPINVOKE.UnmanagedString.Consume(resourceName)));
  }

  private IntPtr SwigDirectorloadBitmap(IntPtr path) {
    return pyxlibPINVOKE.UnmanagedString.Create(loadBitmap(pyxlibPINVOKE.UnmanagedString.Consume(path)));
  }

  private IntPtr SwigDirectorforceRGB(IntPtr path) {
    return pyxlibPINVOKE.UnmanagedString.Create(forceRGB(pyxlibPINVOKE.UnmanagedString.Consume(path)));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate IntPtr SwigDelegateBitmapServerProvider_0(IntPtr iconStyle);
  public delegate IntPtr SwigDelegateBitmapServerProvider_1(IntPtr resourceName);
  public delegate IntPtr SwigDelegateBitmapServerProvider_2(IntPtr path);
  public delegate IntPtr SwigDelegateBitmapServerProvider_3(IntPtr path);
  public delegate int SwigDelegateBitmapServerProvider_4();
  public delegate int SwigDelegateBitmapServerProvider_5();

  private SwigDelegateBitmapServerProvider_0 swigDelegate0;
  private SwigDelegateBitmapServerProvider_1 swigDelegate1;
  private SwigDelegateBitmapServerProvider_2 swigDelegate2;
  private SwigDelegateBitmapServerProvider_3 swigDelegate3;
  private SwigDelegateBitmapServerProvider_4 swigDelegate4;
  private SwigDelegateBitmapServerProvider_5 swigDelegate5;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes4 = new Type[] {  };
  private static Type[] swigMethodTypes5 = new Type[] {  };
}
