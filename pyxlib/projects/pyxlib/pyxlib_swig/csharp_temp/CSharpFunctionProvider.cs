/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CSharpFunctionProvider : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CSharpFunctionProvider(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CSharpFunctionProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CSharpFunctionProvider() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CSharpFunctionProvider(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual string applyXsltTransform(string transform, string inputXml) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_applyXsltTransform(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(transform), pyxlibPINVOKE.UnmanagedString.Create(inputXml)) : pyxlibPINVOKE.CSharpFunctionProvider_applyXsltTransformSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(transform), pyxlibPINVOKE.UnmanagedString.Create(inputXml))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual bool doesXPathMatch(string xPathExpression, string inputXml) {
    bool ret = ((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_doesXPathMatch(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(xPathExpression), pyxlibPINVOKE.UnmanagedString.Create(inputXml)) : pyxlibPINVOKE.CSharpFunctionProvider_doesXPathMatchSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(xPathExpression), pyxlibPINVOKE.UnmanagedString.Create(inputXml)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isWellFormedURI(string checkUri) {
    bool ret = ((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_isWellFormedURI(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(checkUri)) : pyxlibPINVOKE.CSharpFunctionProvider_isWellFormedURISwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(checkUri)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string setDefaultValueForUrlQueryParameter(string baseUri, string key, string value) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_setDefaultValueForUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value)) : pyxlibPINVOKE.CSharpFunctionProvider_setDefaultValueForUrlQueryParameterSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string overwriteUrlQueryParameter(string baseUri, string key, string value) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_overwriteUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value)) : pyxlibPINVOKE.CSharpFunctionProvider_overwriteUrlQueryParameterSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string removeUrlQueryParameter(string baseUri, string key) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_removeUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key)) : pyxlibPINVOKE.CSharpFunctionProvider_removeUrlQueryParameterSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getUrlQueryParameter(string baseUri, string key) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_getUrlQueryParameter(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key)) : pyxlibPINVOKE.CSharpFunctionProvider_getUrlQueryParameterSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri), pyxlibPINVOKE.UnmanagedString.Create(key))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getUrlHost(string baseUri) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_getUrlHost(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri)) : pyxlibPINVOKE.CSharpFunctionProvider_getUrlHostSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(baseUri))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string XMLSerialize(Vector_String serializeMe) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_XMLSerialize(swigCPtr, Vector_String.getCPtr(serializeMe)) : pyxlibPINVOKE.CSharpFunctionProvider_XMLSerializeSwigExplicitCSharpFunctionProvider(swigCPtr, Vector_String.getCPtr(serializeMe))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual bool XMLDeserialize(Vector_String target, string source) {
    bool ret = ((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_XMLDeserialize(swigCPtr, Vector_String.getCPtr(target), pyxlibPINVOKE.UnmanagedString.Create(source)) : pyxlibPINVOKE.CSharpFunctionProvider_XMLDeserializeSwigExplicitCSharpFunctionProvider(swigCPtr, Vector_String.getCPtr(target), pyxlibPINVOKE.UnmanagedString.Create(source)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getSerializedManifest(IPath_SPtr spPathProc) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_getSerializedManifest(swigCPtr, IPath_SPtr.getCPtr(spPathProc)) : pyxlibPINVOKE.CSharpFunctionProvider_getSerializedManifestSwigExplicitCSharpFunctionProvider(swigCPtr, IPath_SPtr.getCPtr(spPathProc))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getSerializedManifestForFile(string filename) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_getSerializedManifestForFile(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(filename)) : pyxlibPINVOKE.CSharpFunctionProvider_getSerializedManifestForFileSwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(filename))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getIdentity(string strManifest) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_getIdentity(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strManifest)) : pyxlibPINVOKE.CSharpFunctionProvider_getIdentitySwigExplicitCSharpFunctionProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strManifest))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual int release() {
    int ret = ((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_release(swigCPtr) : pyxlibPINVOKE.CSharpFunctionProvider_releaseSwigExplicitCSharpFunctionProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(CSharpFunctionProvider)) ? pyxlibPINVOKE.CSharpFunctionProvider_addRef(swigCPtr) : pyxlibPINVOKE.CSharpFunctionProvider_addRefSwigExplicitCSharpFunctionProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CSharpFunctionProvider_SPtr getCSharpFunctionProvider() {
    CSharpFunctionProvider_SPtr ret = new CSharpFunctionProvider_SPtr(pyxlibPINVOKE.CSharpFunctionProvider_getCSharpFunctionProvider(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setCSharpFunctionProvider(CSharpFunctionProvider_SPtr spProvider) {
    pyxlibPINVOKE.CSharpFunctionProvider_setCSharpFunctionProvider(CSharpFunctionProvider_SPtr.getCPtr(spProvider));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpFunctionProvider() : this(pyxlibPINVOKE.new_CSharpFunctionProvider(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("applyXsltTransform", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCSharpFunctionProvider_0(SwigDirectorapplyXsltTransform);
    if (SwigDerivedClassHasMethod("doesXPathMatch", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCSharpFunctionProvider_1(SwigDirectordoesXPathMatch);
    if (SwigDerivedClassHasMethod("isWellFormedURI", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCSharpFunctionProvider_2(SwigDirectorisWellFormedURI);
    if (SwigDerivedClassHasMethod("setDefaultValueForUrlQueryParameter", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCSharpFunctionProvider_3(SwigDirectorsetDefaultValueForUrlQueryParameter);
    if (SwigDerivedClassHasMethod("overwriteUrlQueryParameter", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateCSharpFunctionProvider_4(SwigDirectoroverwriteUrlQueryParameter);
    if (SwigDerivedClassHasMethod("removeUrlQueryParameter", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateCSharpFunctionProvider_5(SwigDirectorremoveUrlQueryParameter);
    if (SwigDerivedClassHasMethod("getUrlQueryParameter", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateCSharpFunctionProvider_6(SwigDirectorgetUrlQueryParameter);
    if (SwigDerivedClassHasMethod("getUrlHost", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateCSharpFunctionProvider_7(SwigDirectorgetUrlHost);
    if (SwigDerivedClassHasMethod("XMLSerialize", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateCSharpFunctionProvider_8(SwigDirectorXMLSerialize);
    if (SwigDerivedClassHasMethod("XMLDeserialize", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateCSharpFunctionProvider_9(SwigDirectorXMLDeserialize);
    if (SwigDerivedClassHasMethod("getSerializedManifest", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateCSharpFunctionProvider_10(SwigDirectorgetSerializedManifest);
    if (SwigDerivedClassHasMethod("getSerializedManifestForFile", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateCSharpFunctionProvider_11(SwigDirectorgetSerializedManifestForFile);
    if (SwigDerivedClassHasMethod("getIdentity", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateCSharpFunctionProvider_12(SwigDirectorgetIdentity);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateCSharpFunctionProvider_13(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateCSharpFunctionProvider_14(SwigDirectoraddRef);
    pyxlibPINVOKE.CSharpFunctionProvider_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(CSharpFunctionProvider));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorapplyXsltTransform(IntPtr transform, IntPtr inputXml) {
    return pyxlibPINVOKE.UnmanagedString.Create(applyXsltTransform(pyxlibPINVOKE.UnmanagedString.Consume(transform), pyxlibPINVOKE.UnmanagedString.Consume(inputXml)));
  }

  private bool SwigDirectordoesXPathMatch(IntPtr xPathExpression, IntPtr inputXml) {
    return doesXPathMatch(pyxlibPINVOKE.UnmanagedString.Consume(xPathExpression), pyxlibPINVOKE.UnmanagedString.Consume(inputXml));
  }

  private bool SwigDirectorisWellFormedURI(IntPtr checkUri) {
    return isWellFormedURI(pyxlibPINVOKE.UnmanagedString.Consume(checkUri));
  }

  private IntPtr SwigDirectorsetDefaultValueForUrlQueryParameter(IntPtr baseUri, IntPtr key, IntPtr value) {
    return pyxlibPINVOKE.UnmanagedString.Create(setDefaultValueForUrlQueryParameter(pyxlibPINVOKE.UnmanagedString.Consume(baseUri), pyxlibPINVOKE.UnmanagedString.Consume(key), pyxlibPINVOKE.UnmanagedString.Consume(value)));
  }

  private IntPtr SwigDirectoroverwriteUrlQueryParameter(IntPtr baseUri, IntPtr key, IntPtr value) {
    return pyxlibPINVOKE.UnmanagedString.Create(overwriteUrlQueryParameter(pyxlibPINVOKE.UnmanagedString.Consume(baseUri), pyxlibPINVOKE.UnmanagedString.Consume(key), pyxlibPINVOKE.UnmanagedString.Consume(value)));
  }

  private IntPtr SwigDirectorremoveUrlQueryParameter(IntPtr baseUri, IntPtr key) {
    return pyxlibPINVOKE.UnmanagedString.Create(removeUrlQueryParameter(pyxlibPINVOKE.UnmanagedString.Consume(baseUri), pyxlibPINVOKE.UnmanagedString.Consume(key)));
  }

  private IntPtr SwigDirectorgetUrlQueryParameter(IntPtr baseUri, IntPtr key) {
    return pyxlibPINVOKE.UnmanagedString.Create(getUrlQueryParameter(pyxlibPINVOKE.UnmanagedString.Consume(baseUri), pyxlibPINVOKE.UnmanagedString.Consume(key)));
  }

  private IntPtr SwigDirectorgetUrlHost(IntPtr baseUri) {
    return pyxlibPINVOKE.UnmanagedString.Create(getUrlHost(pyxlibPINVOKE.UnmanagedString.Consume(baseUri)));
  }

  private IntPtr SwigDirectorXMLSerialize(IntPtr serializeMe) {
    return pyxlibPINVOKE.UnmanagedString.Create(XMLSerialize(new Vector_String(serializeMe, false)));
  }

  private bool SwigDirectorXMLDeserialize(IntPtr target, IntPtr source) {
    return XMLDeserialize(new Vector_String(target, false), pyxlibPINVOKE.UnmanagedString.Consume(source));
  }

  private IntPtr SwigDirectorgetSerializedManifest(IntPtr spPathProc) {
    return pyxlibPINVOKE.UnmanagedString.Create(getSerializedManifest(new IPath_SPtr(spPathProc, false)));
  }

  private IntPtr SwigDirectorgetSerializedManifestForFile(IntPtr filename) {
    return pyxlibPINVOKE.UnmanagedString.Create(getSerializedManifestForFile(pyxlibPINVOKE.UnmanagedString.Consume(filename)));
  }

  private IntPtr SwigDirectorgetIdentity(IntPtr strManifest) {
    return pyxlibPINVOKE.UnmanagedString.Create(getIdentity(pyxlibPINVOKE.UnmanagedString.Consume(strManifest)));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate IntPtr SwigDelegateCSharpFunctionProvider_0(IntPtr transform, IntPtr inputXml);
  public delegate bool SwigDelegateCSharpFunctionProvider_1(IntPtr xPathExpression, IntPtr inputXml);
  public delegate bool SwigDelegateCSharpFunctionProvider_2(IntPtr checkUri);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_3(IntPtr baseUri, IntPtr key, IntPtr value);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_4(IntPtr baseUri, IntPtr key, IntPtr value);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_5(IntPtr baseUri, IntPtr key);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_6(IntPtr baseUri, IntPtr key);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_7(IntPtr baseUri);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_8(IntPtr serializeMe);
  public delegate bool SwigDelegateCSharpFunctionProvider_9(IntPtr target, IntPtr source);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_10(IntPtr spPathProc);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_11(IntPtr filename);
  public delegate IntPtr SwigDelegateCSharpFunctionProvider_12(IntPtr strManifest);
  public delegate int SwigDelegateCSharpFunctionProvider_13();
  public delegate int SwigDelegateCSharpFunctionProvider_14();

  private SwigDelegateCSharpFunctionProvider_0 swigDelegate0;
  private SwigDelegateCSharpFunctionProvider_1 swigDelegate1;
  private SwigDelegateCSharpFunctionProvider_2 swigDelegate2;
  private SwigDelegateCSharpFunctionProvider_3 swigDelegate3;
  private SwigDelegateCSharpFunctionProvider_4 swigDelegate4;
  private SwigDelegateCSharpFunctionProvider_5 swigDelegate5;
  private SwigDelegateCSharpFunctionProvider_6 swigDelegate6;
  private SwigDelegateCSharpFunctionProvider_7 swigDelegate7;
  private SwigDelegateCSharpFunctionProvider_8 swigDelegate8;
  private SwigDelegateCSharpFunctionProvider_9 swigDelegate9;
  private SwigDelegateCSharpFunctionProvider_10 swigDelegate10;
  private SwigDelegateCSharpFunctionProvider_11 swigDelegate11;
  private SwigDelegateCSharpFunctionProvider_12 swigDelegate12;
  private SwigDelegateCSharpFunctionProvider_13 swigDelegate13;
  private SwigDelegateCSharpFunctionProvider_14 swigDelegate14;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(string), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(string), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(Vector_String) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(Vector_String), typeof(string) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(IPath_SPtr) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes13 = new Type[] {  };
  private static Type[] swigMethodTypes14 = new Type[] {  };
}
