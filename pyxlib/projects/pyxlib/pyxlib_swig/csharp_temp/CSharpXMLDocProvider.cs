/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CSharpXMLDocProvider : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CSharpXMLDocProvider(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CSharpXMLDocProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CSharpXMLDocProvider() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CSharpXMLDocProvider(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual int createDocument(string xmlString, bool removeNamespaces) {
    int ret = ((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_createDocument(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(xmlString), removeNamespaces) : pyxlibPINVOKE.CSharpXMLDocProvider_createDocumentSwigExplicitCSharpXMLDocProvider(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(xmlString), removeNamespaces));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void destroyDocument(int docHandle) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_destroyDocument(swigCPtr, docHandle); else pyxlibPINVOKE.CSharpXMLDocProvider_destroyDocumentSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void saveToFile(int docHandle, string path) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_saveToFile(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(path)); else pyxlibPINVOKE.CSharpXMLDocProvider_saveToFileSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(path));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int getNodesCount(int docHandle, string xmlPath) {
    int ret = ((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_getNodesCount(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)) : pyxlibPINVOKE.CSharpXMLDocProvider_getNodesCountSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasNode(int docHandle, string xmlPath) {
    bool ret = ((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_hasNode(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)) : pyxlibPINVOKE.CSharpXMLDocProvider_hasNodeSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setNodeText(int docHandle, string xmlPath, string text) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_setNodeText(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(text)); else pyxlibPINVOKE.CSharpXMLDocProvider_setNodeTextSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(text));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getNodeText(int docHandle, string xmlPath) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_getNodeText(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)) : pyxlibPINVOKE.CSharpXMLDocProvider_getNodeTextSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string getInnerXMLString(int docHandle, string xmlPath) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_getInnerXMLString(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)) : pyxlibPINVOKE.CSharpXMLDocProvider_getInnerXMLStringSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void setInnerXMLString(int docHandle, string xmlPath, string innerXml) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_setInnerXMLString(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(innerXml)); else pyxlibPINVOKE.CSharpXMLDocProvider_setInnerXMLStringSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(innerXml));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getOuterXMLString(int docHandle, string xmlPath) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_getOuterXMLString(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)) : pyxlibPINVOKE.CSharpXMLDocProvider_getOuterXMLStringSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void removeNode(int docHandle, string xmlPath) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_removeNode(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath)); else pyxlibPINVOKE.CSharpXMLDocProvider_removeNodeSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addChild(int docHandle, string xmlPath, string xmlNode) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_addChild(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(xmlNode)); else pyxlibPINVOKE.CSharpXMLDocProvider_addChildSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(xmlNode));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addChildWithInnerText(int docHandle, string xmlPath, string xmlNode, string innerText) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_addChildWithInnerText(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(xmlNode), pyxlibPINVOKE.UnmanagedString.Create(innerText)); else pyxlibPINVOKE.CSharpXMLDocProvider_addChildWithInnerTextSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(xmlNode), pyxlibPINVOKE.UnmanagedString.Create(innerText));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool hasAttribute(int docHandle, string xmlPath, string attributeName) {
    bool ret = ((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_hasAttribute(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName)) : pyxlibPINVOKE.CSharpXMLDocProvider_hasAttributeSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getAttributeValue(int docHandle, string xmlPath, string attributeName) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_getAttributeValue(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName)) : pyxlibPINVOKE.CSharpXMLDocProvider_getAttributeValueSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void setAttributeValue(int docHandle, string xmlPath, string attributeName, string attributeValue) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_setAttributeValue(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName), pyxlibPINVOKE.UnmanagedString.Create(attributeValue)); else pyxlibPINVOKE.CSharpXMLDocProvider_setAttributeValueSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName), pyxlibPINVOKE.UnmanagedString.Create(attributeValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addAttribute(int docHandle, string xmlPath, string attributeName, string attributeValue) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_addAttribute(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName), pyxlibPINVOKE.UnmanagedString.Create(attributeValue)); else pyxlibPINVOKE.CSharpXMLDocProvider_addAttributeSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName), pyxlibPINVOKE.UnmanagedString.Create(attributeValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeAttribute(int docHandle, string xmlPath, string attributeName) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_removeAttribute(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName)); else pyxlibPINVOKE.CSharpXMLDocProvider_removeAttributeSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(xmlPath), pyxlibPINVOKE.UnmanagedString.Create(attributeName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addNamespace(int docHandle, string prefix, string uri) {
    if (this.GetType() == typeof(CSharpXMLDocProvider)) pyxlibPINVOKE.CSharpXMLDocProvider_addNamespace(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(prefix), pyxlibPINVOKE.UnmanagedString.Create(uri)); else pyxlibPINVOKE.CSharpXMLDocProvider_addNamespaceSwigExplicitCSharpXMLDocProvider(swigCPtr, docHandle, pyxlibPINVOKE.UnmanagedString.Create(prefix), pyxlibPINVOKE.UnmanagedString.Create(uri));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_release(swigCPtr) : pyxlibPINVOKE.CSharpXMLDocProvider_releaseSwigExplicitCSharpXMLDocProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(CSharpXMLDocProvider)) ? pyxlibPINVOKE.CSharpXMLDocProvider_addRef(swigCPtr) : pyxlibPINVOKE.CSharpXMLDocProvider_addRefSwigExplicitCSharpXMLDocProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CSharpXMLDocProvider_SPtr getCSharpXMLDocProvider() {
    CSharpXMLDocProvider_SPtr ret = new CSharpXMLDocProvider_SPtr(pyxlibPINVOKE.CSharpXMLDocProvider_getCSharpXMLDocProvider(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setCSharpXMLDocProvider(CSharpXMLDocProvider_SPtr spProvider) {
    pyxlibPINVOKE.CSharpXMLDocProvider_setCSharpXMLDocProvider(CSharpXMLDocProvider_SPtr.getCPtr(spProvider));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CSharpXMLDocProvider() : this(pyxlibPINVOKE.new_CSharpXMLDocProvider(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("createDocument", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCSharpXMLDocProvider_0(SwigDirectorcreateDocument);
    if (SwigDerivedClassHasMethod("destroyDocument", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCSharpXMLDocProvider_1(SwigDirectordestroyDocument);
    if (SwigDerivedClassHasMethod("saveToFile", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCSharpXMLDocProvider_2(SwigDirectorsaveToFile);
    if (SwigDerivedClassHasMethod("getNodesCount", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCSharpXMLDocProvider_3(SwigDirectorgetNodesCount);
    if (SwigDerivedClassHasMethod("hasNode", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateCSharpXMLDocProvider_4(SwigDirectorhasNode);
    if (SwigDerivedClassHasMethod("setNodeText", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateCSharpXMLDocProvider_5(SwigDirectorsetNodeText);
    if (SwigDerivedClassHasMethod("getNodeText", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateCSharpXMLDocProvider_6(SwigDirectorgetNodeText);
    if (SwigDerivedClassHasMethod("getInnerXMLString", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateCSharpXMLDocProvider_7(SwigDirectorgetInnerXMLString);
    if (SwigDerivedClassHasMethod("setInnerXMLString", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateCSharpXMLDocProvider_8(SwigDirectorsetInnerXMLString);
    if (SwigDerivedClassHasMethod("getOuterXMLString", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateCSharpXMLDocProvider_9(SwigDirectorgetOuterXMLString);
    if (SwigDerivedClassHasMethod("removeNode", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateCSharpXMLDocProvider_10(SwigDirectorremoveNode);
    if (SwigDerivedClassHasMethod("addChild", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateCSharpXMLDocProvider_11(SwigDirectoraddChild);
    if (SwigDerivedClassHasMethod("addChildWithInnerText", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateCSharpXMLDocProvider_12(SwigDirectoraddChildWithInnerText);
    if (SwigDerivedClassHasMethod("hasAttribute", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateCSharpXMLDocProvider_13(SwigDirectorhasAttribute);
    if (SwigDerivedClassHasMethod("getAttributeValue", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateCSharpXMLDocProvider_14(SwigDirectorgetAttributeValue);
    if (SwigDerivedClassHasMethod("setAttributeValue", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateCSharpXMLDocProvider_15(SwigDirectorsetAttributeValue);
    if (SwigDerivedClassHasMethod("addAttribute", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateCSharpXMLDocProvider_16(SwigDirectoraddAttribute);
    if (SwigDerivedClassHasMethod("removeAttribute", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateCSharpXMLDocProvider_17(SwigDirectorremoveAttribute);
    if (SwigDerivedClassHasMethod("addNamespace", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateCSharpXMLDocProvider_18(SwigDirectoraddNamespace);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateCSharpXMLDocProvider_19(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateCSharpXMLDocProvider_20(SwigDirectoraddRef);
    pyxlibPINVOKE.CSharpXMLDocProvider_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(CSharpXMLDocProvider));
    return hasDerivedMethod;
  }

  private int SwigDirectorcreateDocument(IntPtr xmlString, bool removeNamespaces) {
    return createDocument(pyxlibPINVOKE.UnmanagedString.Consume(xmlString), removeNamespaces);
  }

  private void SwigDirectordestroyDocument(int docHandle) {
    destroyDocument(docHandle);
  }

  private void SwigDirectorsaveToFile(int docHandle, IntPtr path) {
    saveToFile(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(path));
  }

  private int SwigDirectorgetNodesCount(int docHandle, IntPtr xmlPath) {
    return getNodesCount(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath));
  }

  private bool SwigDirectorhasNode(int docHandle, IntPtr xmlPath) {
    return hasNode(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath));
  }

  private void SwigDirectorsetNodeText(int docHandle, IntPtr xmlPath, IntPtr text) {
    setNodeText(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(text));
  }

  private IntPtr SwigDirectorgetNodeText(int docHandle, IntPtr xmlPath) {
    return pyxlibPINVOKE.UnmanagedString.Create(getNodeText(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath)));
  }

  private IntPtr SwigDirectorgetInnerXMLString(int docHandle, IntPtr xmlPath) {
    return pyxlibPINVOKE.UnmanagedString.Create(getInnerXMLString(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath)));
  }

  private void SwigDirectorsetInnerXMLString(int docHandle, IntPtr xmlPath, IntPtr innerXml) {
    setInnerXMLString(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(innerXml));
  }

  private IntPtr SwigDirectorgetOuterXMLString(int docHandle, IntPtr xmlPath) {
    return pyxlibPINVOKE.UnmanagedString.Create(getOuterXMLString(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath)));
  }

  private void SwigDirectorremoveNode(int docHandle, IntPtr xmlPath) {
    removeNode(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath));
  }

  private void SwigDirectoraddChild(int docHandle, IntPtr xmlPath, IntPtr xmlNode) {
    addChild(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(xmlNode));
  }

  private void SwigDirectoraddChildWithInnerText(int docHandle, IntPtr xmlPath, IntPtr xmlNode, IntPtr innerText) {
    addChildWithInnerText(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(xmlNode), pyxlibPINVOKE.UnmanagedString.Consume(innerText));
  }

  private bool SwigDirectorhasAttribute(int docHandle, IntPtr xmlPath, IntPtr attributeName) {
    return hasAttribute(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(attributeName));
  }

  private IntPtr SwigDirectorgetAttributeValue(int docHandle, IntPtr xmlPath, IntPtr attributeName) {
    return pyxlibPINVOKE.UnmanagedString.Create(getAttributeValue(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(attributeName)));
  }

  private void SwigDirectorsetAttributeValue(int docHandle, IntPtr xmlPath, IntPtr attributeName, IntPtr attributeValue) {
    setAttributeValue(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(attributeName), pyxlibPINVOKE.UnmanagedString.Consume(attributeValue));
  }

  private void SwigDirectoraddAttribute(int docHandle, IntPtr xmlPath, IntPtr attributeName, IntPtr attributeValue) {
    addAttribute(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(attributeName), pyxlibPINVOKE.UnmanagedString.Consume(attributeValue));
  }

  private void SwigDirectorremoveAttribute(int docHandle, IntPtr xmlPath, IntPtr attributeName) {
    removeAttribute(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(xmlPath), pyxlibPINVOKE.UnmanagedString.Consume(attributeName));
  }

  private void SwigDirectoraddNamespace(int docHandle, IntPtr prefix, IntPtr uri) {
    addNamespace(docHandle, pyxlibPINVOKE.UnmanagedString.Consume(prefix), pyxlibPINVOKE.UnmanagedString.Consume(uri));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate int SwigDelegateCSharpXMLDocProvider_0(IntPtr xmlString, bool removeNamespaces);
  public delegate void SwigDelegateCSharpXMLDocProvider_1(int docHandle);
  public delegate void SwigDelegateCSharpXMLDocProvider_2(int docHandle, IntPtr path);
  public delegate int SwigDelegateCSharpXMLDocProvider_3(int docHandle, IntPtr xmlPath);
  public delegate bool SwigDelegateCSharpXMLDocProvider_4(int docHandle, IntPtr xmlPath);
  public delegate void SwigDelegateCSharpXMLDocProvider_5(int docHandle, IntPtr xmlPath, IntPtr text);
  public delegate IntPtr SwigDelegateCSharpXMLDocProvider_6(int docHandle, IntPtr xmlPath);
  public delegate IntPtr SwigDelegateCSharpXMLDocProvider_7(int docHandle, IntPtr xmlPath);
  public delegate void SwigDelegateCSharpXMLDocProvider_8(int docHandle, IntPtr xmlPath, IntPtr innerXml);
  public delegate IntPtr SwigDelegateCSharpXMLDocProvider_9(int docHandle, IntPtr xmlPath);
  public delegate void SwigDelegateCSharpXMLDocProvider_10(int docHandle, IntPtr xmlPath);
  public delegate void SwigDelegateCSharpXMLDocProvider_11(int docHandle, IntPtr xmlPath, IntPtr xmlNode);
  public delegate void SwigDelegateCSharpXMLDocProvider_12(int docHandle, IntPtr xmlPath, IntPtr xmlNode, IntPtr innerText);
  public delegate bool SwigDelegateCSharpXMLDocProvider_13(int docHandle, IntPtr xmlPath, IntPtr attributeName);
  public delegate IntPtr SwigDelegateCSharpXMLDocProvider_14(int docHandle, IntPtr xmlPath, IntPtr attributeName);
  public delegate void SwigDelegateCSharpXMLDocProvider_15(int docHandle, IntPtr xmlPath, IntPtr attributeName, IntPtr attributeValue);
  public delegate void SwigDelegateCSharpXMLDocProvider_16(int docHandle, IntPtr xmlPath, IntPtr attributeName, IntPtr attributeValue);
  public delegate void SwigDelegateCSharpXMLDocProvider_17(int docHandle, IntPtr xmlPath, IntPtr attributeName);
  public delegate void SwigDelegateCSharpXMLDocProvider_18(int docHandle, IntPtr prefix, IntPtr uri);
  public delegate int SwigDelegateCSharpXMLDocProvider_19();
  public delegate int SwigDelegateCSharpXMLDocProvider_20();

  private SwigDelegateCSharpXMLDocProvider_0 swigDelegate0;
  private SwigDelegateCSharpXMLDocProvider_1 swigDelegate1;
  private SwigDelegateCSharpXMLDocProvider_2 swigDelegate2;
  private SwigDelegateCSharpXMLDocProvider_3 swigDelegate3;
  private SwigDelegateCSharpXMLDocProvider_4 swigDelegate4;
  private SwigDelegateCSharpXMLDocProvider_5 swigDelegate5;
  private SwigDelegateCSharpXMLDocProvider_6 swigDelegate6;
  private SwigDelegateCSharpXMLDocProvider_7 swigDelegate7;
  private SwigDelegateCSharpXMLDocProvider_8 swigDelegate8;
  private SwigDelegateCSharpXMLDocProvider_9 swigDelegate9;
  private SwigDelegateCSharpXMLDocProvider_10 swigDelegate10;
  private SwigDelegateCSharpXMLDocProvider_11 swigDelegate11;
  private SwigDelegateCSharpXMLDocProvider_12 swigDelegate12;
  private SwigDelegateCSharpXMLDocProvider_13 swigDelegate13;
  private SwigDelegateCSharpXMLDocProvider_14 swigDelegate14;
  private SwigDelegateCSharpXMLDocProvider_15 swigDelegate15;
  private SwigDelegateCSharpXMLDocProvider_16 swigDelegate16;
  private SwigDelegateCSharpXMLDocProvider_17 swigDelegate17;
  private SwigDelegateCSharpXMLDocProvider_18 swigDelegate18;
  private SwigDelegateCSharpXMLDocProvider_19 swigDelegate19;
  private SwigDelegateCSharpXMLDocProvider_20 swigDelegate20;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string), typeof(bool) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(int), typeof(string), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(int), typeof(string), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(int), typeof(string), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes18 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes19 = new Type[] {  };
  private static Type[] swigMethodTypes20 = new Type[] {  };
}
