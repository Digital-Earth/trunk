/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CacheWithProcessEvent_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CacheWithProcessEvent_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CacheWithProcessEvent_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CacheWithProcessEvent_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CacheWithProcessEvent_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public CacheWithProcessEvent_SPtr() : this(pyxlibPINVOKE.new_CacheWithProcessEvent_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CacheWithProcessEvent_SPtr(CacheWithProcessEvent p, bool add_ref) : this(pyxlibPINVOKE.new_CacheWithProcessEvent_SPtr__SWIG_1(CacheWithProcessEvent.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CacheWithProcessEvent_SPtr(CacheWithProcessEvent p) : this(pyxlibPINVOKE.new_CacheWithProcessEvent_SPtr__SWIG_2(CacheWithProcessEvent.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CacheWithProcessEvent_SPtr(CacheWithProcessEvent_SPtr rhs) : this(pyxlibPINVOKE.new_CacheWithProcessEvent_SPtr__SWIG_3(CacheWithProcessEvent_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.CacheWithProcessEvent_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(CacheWithProcessEvent rhs) {
    pyxlibPINVOKE.CacheWithProcessEvent_SPtr_reset__SWIG_1(swigCPtr, CacheWithProcessEvent.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CacheWithProcessEvent get() {
    IntPtr cPtr = pyxlibPINVOKE.CacheWithProcessEvent_SPtr_get(swigCPtr);
    CacheWithProcessEvent ret = (cPtr == IntPtr.Zero) ? null : new CacheWithProcessEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CacheWithProcessEvent __ref__() {
    CacheWithProcessEvent ret = new CacheWithProcessEvent(pyxlibPINVOKE.CacheWithProcessEvent_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CacheWithProcessEvent __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.CacheWithProcessEvent_SPtr___deref__(swigCPtr);
    CacheWithProcessEvent ret = (cPtr == IntPtr.Zero) ? null : new CacheWithProcessEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(CacheWithProcessEvent_SPtr rhs) {
    pyxlibPINVOKE.CacheWithProcessEvent_SPtr_swap(swigCPtr, CacheWithProcessEvent_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.CacheWithProcessEvent_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.CacheWithProcessEvent_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CacheWithProcessEvent_SPtr create(ICache_SPtr spCache, IProcess_SPtr spProcess) {
    CacheWithProcessEvent_SPtr ret = new CacheWithProcessEvent_SPtr(pyxlibPINVOKE.CacheWithProcessEvent_SPtr_create(swigCPtr, ICache_SPtr.getCPtr(spCache), IProcess_SPtr.getCPtr(spProcess)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IProcess_SPtr getProcess() {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.CacheWithProcessEvent_SPtr_getProcess(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getHandled() {
    bool ret = pyxlibPINVOKE.CacheWithProcessEvent_SPtr_getHandled(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHandled(bool handled) {
    pyxlibPINVOKE.CacheWithProcessEvent_SPtr_setHandled(swigCPtr, handled);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CacheWithProcessEvent dynamic_cast(NotifierEvent pSource) {
    IntPtr cPtr = pyxlibPINVOKE.CacheWithProcessEvent_SPtr_dynamic_cast(swigCPtr, NotifierEvent.getCPtr(pSource));
    CacheWithProcessEvent ret = (cPtr == IntPtr.Zero) ? null : new CacheWithProcessEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICache_SPtr getCache() {
    ICache_SPtr ret = new ICache_SPtr(pyxlibPINVOKE.CacheWithProcessEvent_SPtr_getCache(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
