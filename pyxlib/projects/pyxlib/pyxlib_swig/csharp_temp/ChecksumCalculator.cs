/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ChecksumCalculator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ChecksumCalculator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ChecksumCalculator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChecksumCalculator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ChecksumCalculator(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual string calculateCheckSum(string str) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(ChecksumCalculator)) ? pyxlibPINVOKE.ChecksumCalculator_calculateCheckSum(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(str)) : pyxlibPINVOKE.ChecksumCalculator_calculateCheckSumSwigExplicitChecksumCalculator(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(str))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string calculateFileCheckSum(string path) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(ChecksumCalculator)) ? pyxlibPINVOKE.ChecksumCalculator_calculateFileCheckSum(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(path)) : pyxlibPINVOKE.ChecksumCalculator_calculateFileCheckSumSwigExplicitChecksumCalculator(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(path))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual string findFileMatchingChecksum(string checksum) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(ChecksumCalculator)) ? pyxlibPINVOKE.ChecksumCalculator_findFileMatchingChecksum(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(checksum)) : pyxlibPINVOKE.ChecksumCalculator_findFileMatchingChecksumSwigExplicitChecksumCalculator(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(checksum))));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static ChecksumCalculator_SPtr getChecksumCalculator() {
    ChecksumCalculator_SPtr ret = new ChecksumCalculator_SPtr(pyxlibPINVOKE.ChecksumCalculator_getChecksumCalculator(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setChecksumCalculator(ChecksumCalculator_SPtr spCalculator) {
    pyxlibPINVOKE.ChecksumCalculator_setChecksumCalculator(ChecksumCalculator_SPtr.getCPtr(spCalculator));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(ChecksumCalculator)) ? pyxlibPINVOKE.ChecksumCalculator_release(swigCPtr) : pyxlibPINVOKE.ChecksumCalculator_releaseSwigExplicitChecksumCalculator(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(ChecksumCalculator)) ? pyxlibPINVOKE.ChecksumCalculator_addRef(swigCPtr) : pyxlibPINVOKE.ChecksumCalculator_addRefSwigExplicitChecksumCalculator(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChecksumCalculator() : this(pyxlibPINVOKE.new_ChecksumCalculator(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("calculateCheckSum", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChecksumCalculator_0(SwigDirectorcalculateCheckSum);
    if (SwigDerivedClassHasMethod("calculateFileCheckSum", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChecksumCalculator_1(SwigDirectorcalculateFileCheckSum);
    if (SwigDerivedClassHasMethod("findFileMatchingChecksum", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChecksumCalculator_2(SwigDirectorfindFileMatchingChecksum);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChecksumCalculator_3(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChecksumCalculator_4(SwigDirectoraddRef);
    pyxlibPINVOKE.ChecksumCalculator_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChecksumCalculator));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorcalculateCheckSum(IntPtr str) {
    return pyxlibPINVOKE.UnmanagedString.Create(calculateCheckSum(pyxlibPINVOKE.UnmanagedString.Consume(str)));
  }

  private IntPtr SwigDirectorcalculateFileCheckSum(IntPtr path) {
    return pyxlibPINVOKE.UnmanagedString.Create(calculateFileCheckSum(pyxlibPINVOKE.UnmanagedString.Consume(path)));
  }

  private IntPtr SwigDirectorfindFileMatchingChecksum(IntPtr checksum) {
    return pyxlibPINVOKE.UnmanagedString.Create(findFileMatchingChecksum(pyxlibPINVOKE.UnmanagedString.Consume(checksum)));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate IntPtr SwigDelegateChecksumCalculator_0(IntPtr str);
  public delegate IntPtr SwigDelegateChecksumCalculator_1(IntPtr path);
  public delegate IntPtr SwigDelegateChecksumCalculator_2(IntPtr checksum);
  public delegate int SwigDelegateChecksumCalculator_3();
  public delegate int SwigDelegateChecksumCalculator_4();

  private SwigDelegateChecksumCalculator_0 swigDelegate0;
  private SwigDelegateChecksumCalculator_1 swigDelegate1;
  private SwigDelegateChecksumCalculator_2 swigDelegate2;
  private SwigDelegateChecksumCalculator_3 swigDelegate3;
  private SwigDelegateChecksumCalculator_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes3 = new Type[] {  };
  private static Type[] swigMethodTypes4 = new Type[] {  };
}
