/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CoordLatLon : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CoordLatLon(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CoordLatLon obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CoordLatLon() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_CoordLatLon(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

	public override string ToString()
	{
		return String.Format("(lat:{0},lon:{1})",this.latInDegrees(),this.lonInDegrees());
	}

  public static double kfLatitudeAbsMax {
    get {
      double ret = pyxlibPINVOKE.CoordLatLon_kfLatitudeAbsMax_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfLongitudeAbsMax {
    get {
      double ret = pyxlibPINVOKE.CoordLatLon_kfLongitudeAbsMax_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void test() {
    pyxlibPINVOKE.CoordLatLon_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CoordLatLon() : this(pyxlibPINVOKE.new_CoordLatLon__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CoordLatLon(double fLat, double fLon) : this(pyxlibPINVOKE.new_CoordLatLon__SWIG_1(fLat, fLon), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CoordLatLon(CoordLatLon from, double bearing, double distance) : this(pyxlibPINVOKE.new_CoordLatLon__SWIG_2(CoordLatLon.getCPtr(from), bearing, distance), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double lat() {
    double ret = pyxlibPINVOKE.CoordLatLon_lat(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLat(double fLat) {
    pyxlibPINVOKE.CoordLatLon_setLat(swigCPtr, fLat);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double latInDegrees() {
    double ret = pyxlibPINVOKE.CoordLatLon_latInDegrees(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLatInDegrees(double fLatInDegrees) {
    pyxlibPINVOKE.CoordLatLon_setLatInDegrees(swigCPtr, fLatInDegrees);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double lon() {
    double ret = pyxlibPINVOKE.CoordLatLon_lon(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLon(double fLon) {
    pyxlibPINVOKE.CoordLatLon_setLon(swigCPtr, fLon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double lonInDegrees() {
    double ret = pyxlibPINVOKE.CoordLatLon_lonInDegrees(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLonInDegrees(double fLonInDegrees) {
    pyxlibPINVOKE.CoordLatLon_setLonInDegrees(swigCPtr, fLonInDegrees);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(double fLat, double fLon) {
    pyxlibPINVOKE.CoordLatLon_set(swigCPtr, fLat, fLon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInDegrees(double fLatInDegrees, double fLonInDegrees) {
    pyxlibPINVOKE.CoordLatLon_setInDegrees(swigCPtr, fLatInDegrees, fLonInDegrees);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void randomize() {
    pyxlibPINVOKE.CoordLatLon_randomize(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void perturb(double fMaxDeg) {
    pyxlibPINVOKE.CoordLatLon_perturb__SWIG_0(swigCPtr, fMaxDeg);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void perturb(double fMaxDegLat, double fMaxDegLon) {
    pyxlibPINVOKE.CoordLatLon_perturb__SWIG_1(swigCPtr, fMaxDegLat, fMaxDegLon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNorthPole(double fEpsilon) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isNorthPole__SWIG_0(swigCPtr, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNorthPole() {
    bool ret = pyxlibPINVOKE.CoordLatLon_isNorthPole__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSouthPole(double fEpsilon) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isSouthPole__SWIG_0(swigCPtr, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSouthPole() {
    bool ret = pyxlibPINVOKE.CoordLatLon_isSouthPole__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOnEquator(double fEpsilon) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isOnEquator__SWIG_0(swigCPtr, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOnEquator() {
    bool ret = pyxlibPINVOKE.CoordLatLon_isOnEquator__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOnPrimeMeridian(double fEpsilon) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isOnPrimeMeridian__SWIG_0(swigCPtr, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOnPrimeMeridian() {
    bool ret = pyxlibPINVOKE.CoordLatLon_isOnPrimeMeridian__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOnIntlDateLine(double fEpsilon) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isOnIntlDateLine__SWIG_0(swigCPtr, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOnIntlDateLine() {
    bool ret = pyxlibPINVOKE.CoordLatLon_isOnIntlDateLine__SWIG_1(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equal(CoordLatLon latLon, double fPrecision) {
    bool ret = pyxlibPINVOKE.CoordLatLon_equal__SWIG_0(swigCPtr, CoordLatLon.getCPtr(latLon), fPrecision);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equal(CoordLatLon latLon) {
    bool ret = pyxlibPINVOKE.CoordLatLon_equal__SWIG_1(swigCPtr, CoordLatLon.getCPtr(latLon));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool insideSWNE(CoordLatLon southWest, CoordLatLon northEast) {
    bool ret = pyxlibPINVOKE.CoordLatLon_insideSWNE(swigCPtr, CoordLatLon.getCPtr(southWest), CoordLatLon.getCPtr(northEast));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool insideNWSE(CoordLatLon nouthWest, CoordLatLon southEast) {
    bool ret = pyxlibPINVOKE.CoordLatLon_insideNWSE(swigCPtr, CoordLatLon.getCPtr(nouthWest), CoordLatLon.getCPtr(southEast));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool crossesIntlDateLine(CoordLatLon pt1, CoordLatLon pt2) {
    bool ret = pyxlibPINVOKE.CoordLatLon_crossesIntlDateLine(CoordLatLon.getCPtr(pt1), CoordLatLon.getCPtr(pt2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calculateResolutionRadians(string strLatitude, string strLongitude) {
    double ret = pyxlibPINVOKE.CoordLatLon_calculateResolutionRadians(pyxlibPINVOKE.UnmanagedString.Create(strLatitude), pyxlibPINVOKE.UnmanagedString.Create(strLongitude));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLatitudeValid(double fLatitude) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isLatitudeValid(fLatitude);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLongitudeValid(double fLongitude) {
    bool ret = pyxlibPINVOKE.CoordLatLon_isLongitudeValid(fLongitude);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CoordLatLon northPole() {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.CoordLatLon_northPole(), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CoordLatLon southPole() {
    CoordLatLon ret = new CoordLatLon(pyxlibPINVOKE.CoordLatLon_southPole(), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double distanceToLine(CoordLatLon L1, CoordLatLon L2) {
    double ret = pyxlibPINVOKE.CoordLatLon_distanceToLine(swigCPtr, CoordLatLon.getCPtr(L1), CoordLatLon.getCPtr(L2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double sideN(double resolution) {
    double ret = pyxlibPINVOKE.CoordLatLon_sideN(resolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double hexagonCircumradius(double resolution) {
    double ret = pyxlibPINVOKE.CoordLatLon_hexagonCircumradius(resolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double hexagonInradius(double resolution) {
    double ret = pyxlibPINVOKE.CoordLatLon_hexagonInradius(resolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pentagonCircumradius(double resolution) {
    double ret = pyxlibPINVOKE.CoordLatLon_pentagonCircumradius(resolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pentagonInradius(double resolution) {
    double ret = pyxlibPINVOKE.CoordLatLon_pentagonInradius(resolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
