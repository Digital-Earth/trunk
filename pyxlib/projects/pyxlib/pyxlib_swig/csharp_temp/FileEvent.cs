/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class FileEvent : NotifierEvent {
  private HandleRef swigCPtr;

  public FileEvent(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.FileEventUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(FileEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FileEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_FileEvent(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FileEvent_SPtr create(IPath_SPtr spPath, int index) {
    FileEvent_SPtr ret = new FileEvent_SPtr(pyxlibPINVOKE.FileEvent_create__SWIG_0(IPath_SPtr.getCPtr(spPath), index), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FileEvent_SPtr create(IPath_SPtr spPath) {
    FileEvent_SPtr ret = new FileEvent_SPtr(pyxlibPINVOKE.FileEvent_create__SWIG_1(IPath_SPtr.getCPtr(spPath)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getIndex() {
    int ret = pyxlibPINVOKE.FileEvent_getIndex(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IPath_SPtr getPath() {
    IPath_SPtr ret = new IPath_SPtr(pyxlibPINVOKE.FileEvent_getPath(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getFailed() {
    bool ret = pyxlibPINVOKE.FileEvent_getFailed(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFailed(bool bFailed) {
    pyxlibPINVOKE.FileEvent_setFailed(swigCPtr, bFailed);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getLocalPath() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.FileEvent_getLocalPath(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setLocalPath(string value) {
    pyxlibPINVOKE.FileEvent_setLocalPath(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FileEvent dynamic_cast(NotifierEvent pSource) {
    IntPtr cPtr = pyxlibPINVOKE.FileEvent_dynamic_cast(NotifierEvent.getCPtr(pSource));
    FileEvent ret = (cPtr == IntPtr.Zero) ? null : new FileEvent(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
