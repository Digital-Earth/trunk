/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GdalInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public GdalInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(GdalInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GdalInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_GdalInfo(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public GdalInfo() : this(pyxlibPINVOKE.new_GdalInfo(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool OracleSupportAvailable() {
    bool ret = pyxlibPINVOKE.GdalInfo_OracleSupportAvailable();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetRasterDataSources(GdalInfoDataSourceNodeList rasterDataSources, string username, string password, string sid) {
    pyxlibPINVOKE.GdalInfo_GetRasterDataSources(swigCPtr, GdalInfoDataSourceNodeList.getCPtr(rasterDataSources), pyxlibPINVOKE.UnmanagedString.Create(username), pyxlibPINVOKE.UnmanagedString.Create(password), pyxlibPINVOKE.UnmanagedString.Create(sid));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReleaseRasterDataSourceNodes(GdalInfoDataSourceNodeList nodeList) {
    pyxlibPINVOKE.GdalInfo_ReleaseRasterDataSourceNodes(swigCPtr, GdalInfoDataSourceNodeList.getCPtr(nodeList));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GenerateVrt(string filename, string connectString) {
    pyxlibPINVOKE.GdalInfo_GenerateVrt(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(filename), pyxlibPINVOKE.UnmanagedString.Create(connectString));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
