/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class HttpRequestProvider : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HttpRequestProvider(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HttpRequestProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HttpRequestProvider() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_HttpRequestProvider(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual int createRequest(string url, string method) {
    int ret = ((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_createRequest__SWIG_0(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(url), pyxlibPINVOKE.UnmanagedString.Create(method)) : pyxlibPINVOKE.HttpRequestProvider_createRequestSwigExplicitHttpRequestProvider__SWIG_0(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(url), pyxlibPINVOKE.UnmanagedString.Create(method)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int createRequest(string url, string method, IUserCredentials_SPtr credentials) {
    int ret = ((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_createRequest__SWIG_1(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(url), pyxlibPINVOKE.UnmanagedString.Create(method), IUserCredentials_SPtr.getCPtr(credentials)) : pyxlibPINVOKE.HttpRequestProvider_createRequestSwigExplicitHttpRequestProvider__SWIG_1(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(url), pyxlibPINVOKE.UnmanagedString.Create(method), IUserCredentials_SPtr.getCPtr(credentials)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void destroyRequest(int requestHandle) {
    if (this.GetType() == typeof(HttpRequestProvider)) pyxlibPINVOKE.HttpRequestProvider_destroyRequest(swigCPtr, requestHandle); else pyxlibPINVOKE.HttpRequestProvider_destroyRequestSwigExplicitHttpRequestProvider(swigCPtr, requestHandle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getResponse(int requestHandle) {
    bool ret = ((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_getResponse(swigCPtr, requestHandle) : pyxlibPINVOKE.HttpRequestProvider_getResponseSwigExplicitHttpRequestProvider(swigCPtr, requestHandle));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getResponseBody(int requestHandle) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_getResponseBody(swigCPtr, requestHandle) : pyxlibPINVOKE.HttpRequestProvider_getResponseBodySwigExplicitHttpRequestProvider(swigCPtr, requestHandle)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual bool downloadResponse(int requestHandle, string filename) {
    bool ret = ((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_downloadResponse(swigCPtr, requestHandle, pyxlibPINVOKE.UnmanagedString.Create(filename)) : pyxlibPINVOKE.HttpRequestProvider_downloadResponseSwigExplicitHttpRequestProvider(swigCPtr, requestHandle, pyxlibPINVOKE.UnmanagedString.Create(filename)));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void addRequestBody(int requestHandle, string body) {
    if (this.GetType() == typeof(HttpRequestProvider)) pyxlibPINVOKE.HttpRequestProvider_addRequestBody(swigCPtr, requestHandle, pyxlibPINVOKE.UnmanagedString.Create(body)); else pyxlibPINVOKE.HttpRequestProvider_addRequestBodySwigExplicitHttpRequestProvider(swigCPtr, requestHandle, pyxlibPINVOKE.UnmanagedString.Create(body));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addRequestHeader(int requestHandle, string headerName, string headerValue) {
    if (this.GetType() == typeof(HttpRequestProvider)) pyxlibPINVOKE.HttpRequestProvider_addRequestHeader(swigCPtr, requestHandle, pyxlibPINVOKE.UnmanagedString.Create(headerName), pyxlibPINVOKE.UnmanagedString.Create(headerValue)); else pyxlibPINVOKE.HttpRequestProvider_addRequestHeaderSwigExplicitHttpRequestProvider(swigCPtr, requestHandle, pyxlibPINVOKE.UnmanagedString.Create(headerName), pyxlibPINVOKE.UnmanagedString.Create(headerValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_release(swigCPtr) : pyxlibPINVOKE.HttpRequestProvider_releaseSwigExplicitHttpRequestProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(HttpRequestProvider)) ? pyxlibPINVOKE.HttpRequestProvider_addRef(swigCPtr) : pyxlibPINVOKE.HttpRequestProvider_addRefSwigExplicitHttpRequestProvider(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HttpRequestProvider_SPtr getHttpRequestProvider() {
    HttpRequestProvider_SPtr ret = new HttpRequestProvider_SPtr(pyxlibPINVOKE.HttpRequestProvider_getHttpRequestProvider(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setHttpRequestProvider(HttpRequestProvider_SPtr spProvider) {
    pyxlibPINVOKE.HttpRequestProvider_setHttpRequestProvider(HttpRequestProvider_SPtr.getCPtr(spProvider));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public HttpRequestProvider() : this(pyxlibPINVOKE.new_HttpRequestProvider(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("createRequest", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHttpRequestProvider_0(SwigDirectorcreateRequest);
    if (SwigDerivedClassHasMethod("createRequest", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHttpRequestProvider_1(SwigDirectorcreateRequest);
    if (SwigDerivedClassHasMethod("destroyRequest", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHttpRequestProvider_2(SwigDirectordestroyRequest);
    if (SwigDerivedClassHasMethod("getResponse", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHttpRequestProvider_3(SwigDirectorgetResponse);
    if (SwigDerivedClassHasMethod("getResponseBody", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHttpRequestProvider_4(SwigDirectorgetResponseBody);
    if (SwigDerivedClassHasMethod("downloadResponse", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateHttpRequestProvider_5(SwigDirectordownloadResponse);
    if (SwigDerivedClassHasMethod("addRequestBody", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateHttpRequestProvider_6(SwigDirectoraddRequestBody);
    if (SwigDerivedClassHasMethod("addRequestHeader", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateHttpRequestProvider_7(SwigDirectoraddRequestHeader);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateHttpRequestProvider_8(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateHttpRequestProvider_9(SwigDirectoraddRef);
    pyxlibPINVOKE.HttpRequestProvider_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HttpRequestProvider));
    return hasDerivedMethod;
  }

  private int SwigDirectorcreateRequest(IntPtr url, IntPtr method) {
    return createRequest(pyxlibPINVOKE.UnmanagedString.Consume(url), pyxlibPINVOKE.UnmanagedString.Consume(method));
  }

  private int SwigDirectorcreateRequest(IntPtr url, IntPtr method, IntPtr credentials) {
    return createRequest(pyxlibPINVOKE.UnmanagedString.Consume(url), pyxlibPINVOKE.UnmanagedString.Consume(method), new IUserCredentials_SPtr(credentials, false));
  }

  private void SwigDirectordestroyRequest(int requestHandle) {
    destroyRequest(requestHandle);
  }

  private bool SwigDirectorgetResponse(int requestHandle) {
    return getResponse(requestHandle);
  }

  private IntPtr SwigDirectorgetResponseBody(int requestHandle) {
    return pyxlibPINVOKE.UnmanagedString.Create(getResponseBody(requestHandle));
  }

  private bool SwigDirectordownloadResponse(int requestHandle, IntPtr filename) {
    return downloadResponse(requestHandle, pyxlibPINVOKE.UnmanagedString.Consume(filename));
  }

  private void SwigDirectoraddRequestBody(int requestHandle, IntPtr body) {
    addRequestBody(requestHandle, pyxlibPINVOKE.UnmanagedString.Consume(body));
  }

  private void SwigDirectoraddRequestHeader(int requestHandle, IntPtr headerName, IntPtr headerValue) {
    addRequestHeader(requestHandle, pyxlibPINVOKE.UnmanagedString.Consume(headerName), pyxlibPINVOKE.UnmanagedString.Consume(headerValue));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate int SwigDelegateHttpRequestProvider_0(IntPtr url, IntPtr method);
  public delegate int SwigDelegateHttpRequestProvider_1(IntPtr url, IntPtr method, IntPtr credentials);
  public delegate void SwigDelegateHttpRequestProvider_2(int requestHandle);
  public delegate bool SwigDelegateHttpRequestProvider_3(int requestHandle);
  public delegate IntPtr SwigDelegateHttpRequestProvider_4(int requestHandle);
  public delegate bool SwigDelegateHttpRequestProvider_5(int requestHandle, IntPtr filename);
  public delegate void SwigDelegateHttpRequestProvider_6(int requestHandle, IntPtr body);
  public delegate void SwigDelegateHttpRequestProvider_7(int requestHandle, IntPtr headerName, IntPtr headerValue);
  public delegate int SwigDelegateHttpRequestProvider_8();
  public delegate int SwigDelegateHttpRequestProvider_9();

  private SwigDelegateHttpRequestProvider_0 swigDelegate0;
  private SwigDelegateHttpRequestProvider_1 swigDelegate1;
  private SwigDelegateHttpRequestProvider_2 swigDelegate2;
  private SwigDelegateHttpRequestProvider_3 swigDelegate3;
  private SwigDelegateHttpRequestProvider_4 swigDelegate4;
  private SwigDelegateHttpRequestProvider_5 swigDelegate5;
  private SwigDelegateHttpRequestProvider_6 swigDelegate6;
  private SwigDelegateHttpRequestProvider_7 swigDelegate7;
  private SwigDelegateHttpRequestProvider_8 swigDelegate8;
  private SwigDelegateHttpRequestProvider_9 swigDelegate9;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(string), typeof(string), typeof(IUserCredentials_SPtr) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(int), typeof(string) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(int), typeof(string), typeof(string) };
  private static Type[] swigMethodTypes8 = new Type[] {  };
  private static Type[] swigMethodTypes9 = new Type[] {  };
}
