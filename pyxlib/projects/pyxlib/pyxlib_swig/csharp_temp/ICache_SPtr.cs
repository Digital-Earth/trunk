/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ICache_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ICache_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ICache_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICache_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ICache_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public ICache_SPtr() : this(pyxlibPINVOKE.new_ICache_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICache_SPtr(ICache p, bool add_ref) : this(pyxlibPINVOKE.new_ICache_SPtr__SWIG_1(ICache.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICache_SPtr(ICache p) : this(pyxlibPINVOKE.new_ICache_SPtr__SWIG_2(ICache.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICache_SPtr(ICache_SPtr rhs) : this(pyxlibPINVOKE.new_ICache_SPtr__SWIG_3(ICache_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.ICache_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(ICache rhs) {
    pyxlibPINVOKE.ICache_SPtr_reset__SWIG_1(swigCPtr, ICache.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICache get() {
    IntPtr cPtr = pyxlibPINVOKE.ICache_SPtr_get(swigCPtr);
    ICache ret = (cPtr == IntPtr.Zero) ? null : new ICache(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICache __ref__() {
    ICache ret = new ICache(pyxlibPINVOKE.ICache_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICache __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.ICache_SPtr___deref__(swigCPtr);
    ICache ret = (cPtr == IntPtr.Zero) ? null : new ICache(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(ICache_SPtr rhs) {
    pyxlibPINVOKE.ICache_SPtr_swap(swigCPtr, ICache_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.ICache_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.ICache_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.ICache_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void initCacheDir() {
    pyxlibPINVOKE.ICache_SPtr_initCacheDir(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCacheDir(string strDir) {
    pyxlibPINVOKE.ICache_SPtr_setCacheDir(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDir));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getCacheDir() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ICache_SPtr_getCacheDir(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setCacheTileDepth(int nDepth) {
    pyxlibPINVOKE.ICache_SPtr_setCacheTileDepth(swigCPtr, nDepth);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCacheTileDepth() {
    int ret = pyxlibPINVOKE.ICache_SPtr_getCacheTileDepth(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCacheCellResolution(int nCellResolution) {
    pyxlibPINVOKE.ICache_SPtr_setCacheCellResolution(swigCPtr, nCellResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCacheCellResolution() {
    int ret = pyxlibPINVOKE.ICache_SPtr_getCacheCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCachePersistence(bool bPersistent) {
    pyxlibPINVOKE.ICache_SPtr_setCachePersistence(swigCPtr, bPersistent);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool openReadOnly(string strDir) {
    bool ret = pyxlibPINVOKE.ICache_SPtr_openReadOnly(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDir));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool openReadWrite(string strDir) {
    bool ret = pyxlibPINVOKE.ICache_SPtr_openReadWrite__SWIG_0(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDir));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool openReadWrite(string strDir, PYXTableDefinition defn, Vector_Value vecValues, PYXTableDefinition coverageDefn, int nCellResolution, int nTileResolution) {
    bool ret = pyxlibPINVOKE.ICache_SPtr_openReadWrite__SWIG_1(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDir), PYXTableDefinition.getCPtr(defn), Vector_Value.getCPtr(vecValues), PYXTableDefinition.getCPtr(coverageDefn), nCellResolution, nTileResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool openReadWrite(string strDir, PYXTableDefinition defn, Vector_Value vecValues, PYXTableDefinition coverageDefn, int nCellResolution) {
    bool ret = pyxlibPINVOKE.ICache_SPtr_openReadWrite__SWIG_2(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDir), PYXTableDefinition.getCPtr(defn), Vector_Value.getCPtr(vecValues), PYXTableDefinition.getCPtr(coverageDefn), nCellResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCacheMaxTileCount(int nMaxTiles) {
    pyxlibPINVOKE.ICache_SPtr_setCacheMaxTileCount(swigCPtr, nMaxTiles);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void close() {
    pyxlibPINVOKE.ICache_SPtr_close(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void persistAllTiles() {
    pyxlibPINVOKE.ICache_SPtr_persistAllTiles(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string toFileName(PYXTile tile) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ICache_SPtr_toFileName(swigCPtr, PYXTile.getCPtr(tile)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setGreedyCache(bool bGreedy) {
    pyxlibPINVOKE.ICache_SPtr_setGreedyCache(swigCPtr, bGreedy);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTileFile(string strFileName, PYXTile_SPtr spTile, ProcessDataChangedEvent.ChangeTrigger trigger) {
    pyxlibPINVOKE.ICache_SPtr_addTileFile(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strFileName), PYXTile_SPtr.getCPtr(spTile), (int)trigger);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool forceCoverageTile(PYXTile tile) {
    bool ret = pyxlibPINVOKE.ICache_SPtr_forceCoverageTile(swigCPtr, PYXTile.getCPtr(tile));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Notifier getNeedATileNotifier() {
    Notifier ret = new Notifier(pyxlibPINVOKE.ICache_SPtr_getNeedATileNotifier(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Notifier getCacheChangedNotifier() {
    Notifier ret = new Notifier(pyxlibPINVOKE.ICache_SPtr_getCacheChangedNotifier(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint AddRef() {
    uint ret = pyxlibPINVOKE.ICache_SPtr_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = pyxlibPINVOKE.ICache_SPtr_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
