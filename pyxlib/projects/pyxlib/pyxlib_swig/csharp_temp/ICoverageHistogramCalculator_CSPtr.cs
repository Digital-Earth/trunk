/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ICoverageHistogramCalculator_CSPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ICoverageHistogramCalculator_CSPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ICoverageHistogramCalculator_CSPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICoverageHistogramCalculator_CSPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ICoverageHistogramCalculator_CSPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public ICoverageHistogramCalculator_CSPtr() : this(pyxlibPINVOKE.new_ICoverageHistogramCalculator_CSPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICoverageHistogramCalculator_CSPtr(ICoverageHistogramCalculator p, bool add_ref) : this(pyxlibPINVOKE.new_ICoverageHistogramCalculator_CSPtr__SWIG_1(ICoverageHistogramCalculator.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICoverageHistogramCalculator_CSPtr(ICoverageHistogramCalculator p) : this(pyxlibPINVOKE.new_ICoverageHistogramCalculator_CSPtr__SWIG_2(ICoverageHistogramCalculator.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICoverageHistogramCalculator_CSPtr(ICoverageHistogramCalculator_CSPtr rhs) : this(pyxlibPINVOKE.new_ICoverageHistogramCalculator_CSPtr__SWIG_3(ICoverageHistogramCalculator_CSPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(ICoverageHistogramCalculator rhs) {
    pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_reset__SWIG_1(swigCPtr, ICoverageHistogramCalculator.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICoverageHistogramCalculator get() {
    IntPtr cPtr = pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_get(swigCPtr);
    ICoverageHistogramCalculator ret = (cPtr == IntPtr.Zero) ? null : new ICoverageHistogramCalculator(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICoverageHistogramCalculator __ref__() {
    ICoverageHistogramCalculator ret = new ICoverageHistogramCalculator(pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICoverageHistogramCalculator __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr___deref__(swigCPtr);
    ICoverageHistogramCalculator ret = (cPtr == IntPtr.Zero) ? null : new ICoverageHistogramCalculator(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(ICoverageHistogramCalculator_CSPtr rhs) {
    pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_swap(swigCPtr, ICoverageHistogramCalculator_CSPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.ICoverageHistogramCalculator_CSPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
