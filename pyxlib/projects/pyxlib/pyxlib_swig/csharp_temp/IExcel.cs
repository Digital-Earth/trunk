/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IExcel : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IExcel(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IExcel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IExcel() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IExcel(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static IExcel Implementation(IExcel pImplementation) {
    IntPtr cPtr = pyxlibPINVOKE.IExcel_Implementation__SWIG_0(IExcel.getCPtr(pImplementation));
    IExcel ret = (cPtr == IntPtr.Zero) ? null : new IExcel(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IExcel Implementation() {
    IntPtr cPtr = pyxlibPINVOKE.IExcel_Implementation__SWIG_1();
    IExcel ret = (cPtr == IntPtr.Zero) ? null : new IExcel(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IWorkbookPointer CreateWorkbook(string filename) {
    IWorkbookPointer ret = new IWorkbookPointer(pyxlibPINVOKE.IExcel_CreateWorkbook(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(filename)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected IExcel() : this(pyxlibPINVOKE.new_IExcel(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateWorkbook", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIExcel_0(SwigDirectorCreateWorkbook);
    pyxlibPINVOKE.IExcel_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IExcel));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateWorkbook(IntPtr filename) {
    return IWorkbookPointer.getCPtr(CreateWorkbook(pyxlibPINVOKE.UnmanagedString.Consume(filename))).Handle;
  }

  public delegate IntPtr SwigDelegateIExcel_0(IntPtr filename);

  private SwigDelegateIExcel_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string) };
}
