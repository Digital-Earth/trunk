/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IFeatureGroup : IFeatureCollection {
  private HandleRef swigCPtr;

  public IFeatureGroup(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.IFeatureGroupUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IFeatureGroup obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IFeatureGroup() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IFeatureGroup(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

	public System.Collections.Generic.IEnumerable<IFeature_SPtr> GetGroupEnumerator(PYXGeometry geometry)
	{
		FeatureIterator_SPtr iterator = getGroupIterator(geometry);
		if (iterator.isNull())
		{
			yield break;
		}
		while(!iterator.end())
		{
			yield return iterator.getFeature();
			iterator.next();
		}
	}

	public System.Collections.Generic.IEnumerable<IFeature_SPtr> GetGroupEnumerator()
	{
		FeatureIterator_SPtr iterator = getGroupIterator();
		if (iterator.isNull())
		{
			yield break;
		}
		while(!iterator.end())
		{
			yield return iterator.getFeature();
			iterator.next();
		}
	}

  public static GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IFeatureGroup_iid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual RangeInt getFeaturesCount() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.IFeatureGroup_getFeaturesCount(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool moreDetailsAvailable() {
    bool ret = pyxlibPINVOKE.IFeatureGroup_moreDetailsAvailable(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXHistogram_SPtr getFieldHistogram(int fieldIndex) {
    PYXHistogram_SPtr ret = new PYXHistogram_SPtr(pyxlibPINVOKE.IFeatureGroup_getFieldHistogram__SWIG_0(swigCPtr, fieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXHistogram_SPtr getFieldHistogram(PYXGeometry geometry, int fieldIndex) {
    PYXHistogram_SPtr ret = new PYXHistogram_SPtr(pyxlibPINVOKE.IFeatureGroup_getFieldHistogram__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry), fieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IFeatureGroup_SPtr getFeatureGroup(string groupId) {
    IFeatureGroup_SPtr ret = new IFeatureGroup_SPtr(pyxlibPINVOKE.IFeatureGroup_getFeatureGroup(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(groupId)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IFeatureGroup_SPtr getFeatureGroupForFeature(string featureId) {
    IFeatureGroup_SPtr ret = new IFeatureGroup_SPtr(pyxlibPINVOKE.IFeatureGroup_getFeatureGroupForFeature(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(featureId)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FeatureIterator_SPtr getGroupIterator() {
    FeatureIterator_SPtr ret = new FeatureIterator_SPtr(pyxlibPINVOKE.IFeatureGroup_getGroupIterator__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FeatureIterator_SPtr getGroupIterator(PYXGeometry geometry) {
    FeatureIterator_SPtr ret = new FeatureIterator_SPtr(pyxlibPINVOKE.IFeatureGroup_getGroupIterator__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
