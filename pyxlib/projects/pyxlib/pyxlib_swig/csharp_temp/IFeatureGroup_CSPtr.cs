/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IFeatureGroup_CSPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IFeatureGroup_CSPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IFeatureGroup_CSPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IFeatureGroup_CSPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IFeatureGroup_CSPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }


	public System.Collections.Generic.IEnumerable<IFeature_SPtr> GetFeaturesEnumerator(PYXGeometry geometry)
	{
		FeatureIterator_SPtr iterator = getIterator(geometry);
		if (iterator.isNull())
		{
			yield break;
		}
		while(!iterator.end())
		{
			yield return iterator.getFeature();
			iterator.next();
		}
	}

	public System.Collections.Generic.IEnumerable<IFeature_SPtr> GetFeaturesEnumerator()
	{
		FeatureIterator_SPtr iterator = getIterator();
		if (iterator.isNull())
		{
			yield break;
		}
		while(!iterator.end())
		{
			yield return iterator.getFeature();
			iterator.next();
		}
	}

	public System.Collections.Generic.IEnumerable<IFeature_SPtr> GetGroupEnumerator(PYXGeometry geometry)
	{
		FeatureIterator_SPtr iterator = getGroupIterator(geometry);
		if (iterator.isNull())
		{
			yield break;
		}
		while(!iterator.end())
		{
			yield return iterator.getFeature();
			iterator.next();
		}
	}

	public System.Collections.Generic.IEnumerable<IFeature_SPtr> GetGroupEnumerator()
	{
		FeatureIterator_SPtr iterator = getGroupIterator();
		if (iterator.isNull())
		{
			yield break;
		}
		while(!iterator.end())
		{
			yield return iterator.getFeature();
			iterator.next();
		}
	}

  public IFeatureGroup_CSPtr() : this(pyxlibPINVOKE.new_IFeatureGroup_CSPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IFeatureGroup_CSPtr(IFeatureGroup p, bool add_ref) : this(pyxlibPINVOKE.new_IFeatureGroup_CSPtr__SWIG_1(IFeatureGroup.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IFeatureGroup_CSPtr(IFeatureGroup p) : this(pyxlibPINVOKE.new_IFeatureGroup_CSPtr__SWIG_2(IFeatureGroup.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IFeatureGroup_CSPtr(IFeatureGroup_CSPtr rhs) : this(pyxlibPINVOKE.new_IFeatureGroup_CSPtr__SWIG_3(IFeatureGroup_CSPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.IFeatureGroup_CSPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(IFeatureGroup rhs) {
    pyxlibPINVOKE.IFeatureGroup_CSPtr_reset__SWIG_1(swigCPtr, IFeatureGroup.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IFeatureGroup get() {
    IntPtr cPtr = pyxlibPINVOKE.IFeatureGroup_CSPtr_get(swigCPtr);
    IFeatureGroup ret = (cPtr == IntPtr.Zero) ? null : new IFeatureGroup(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IFeatureGroup __ref__() {
    IFeatureGroup ret = new IFeatureGroup(pyxlibPINVOKE.IFeatureGroup_CSPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IFeatureGroup __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.IFeatureGroup_CSPtr___deref__(swigCPtr);
    IFeatureGroup ret = (cPtr == IntPtr.Zero) ? null : new IFeatureGroup(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(IFeatureGroup_CSPtr rhs) {
    pyxlibPINVOKE.IFeatureGroup_CSPtr_swap(swigCPtr, IFeatureGroup_CSPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.IFeatureGroup_CSPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.IFeatureGroup_CSPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IFeatureGroup_CSPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RangeInt getFeaturesCount() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFeaturesCount(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool moreDetailsAvailable() {
    bool ret = pyxlibPINVOKE.IFeatureGroup_CSPtr_moreDetailsAvailable(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogram_SPtr getFieldHistogram(int fieldIndex) {
    PYXHistogram_SPtr ret = new PYXHistogram_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFieldHistogram__SWIG_0(swigCPtr, fieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogram_SPtr getFieldHistogram(PYXGeometry geometry, int fieldIndex) {
    PYXHistogram_SPtr ret = new PYXHistogram_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFieldHistogram__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry), fieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IFeatureGroup_SPtr getFeatureGroup(string groupId) {
    IFeatureGroup_SPtr ret = new IFeatureGroup_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFeatureGroup(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(groupId)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IFeatureGroup_SPtr getFeatureGroupForFeature(string featureId) {
    IFeatureGroup_SPtr ret = new IFeatureGroup_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFeatureGroupForFeature(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(featureId)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureIterator_SPtr getGroupIterator() {
    FeatureIterator_SPtr ret = new FeatureIterator_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getGroupIterator__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureIterator_SPtr getGroupIterator(PYXGeometry geometry) {
    FeatureIterator_SPtr ret = new FeatureIterator_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getGroupIterator__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureIterator_SPtr getIterator() {
    FeatureIterator_SPtr ret = new FeatureIterator_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getIterator__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureIterator_SPtr getIterator(PYXGeometry geometry) {
    FeatureIterator_SPtr ret = new FeatureIterator_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getIterator__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTableDefinition_CSPtr getFeatureDefinition() {
    PYXTableDefinition_CSPtr ret = new PYXTableDefinition_CSPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFeatureDefinition__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorTFeatureStyle_t getFeatureStyles() {
    SWIGTYPE_p_std__vectorTFeatureStyle_t ret = new SWIGTYPE_p_std__vectorTFeatureStyle_t(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFeatureStyles(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IFeature_SPtr getFeature(string strFeatureID) {
    IFeature_SPtr ret = new IFeature_SPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFeature(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strFeatureID)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool canRasterize() {
    bool ret = pyxlibPINVOKE.IFeatureGroup_CSPtr_canRasterize(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isWritable() {
    bool ret = pyxlibPINVOKE.IFeatureGroup_CSPtr_isWritable(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getID() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IFeatureGroup_CSPtr_getID(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public PYXGeometry_CSPtr getGeometry_const() {
    PYXGeometry_CSPtr ret = new PYXGeometry_CSPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getGeometry_const(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getStyle() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IFeatureGroup_CSPtr_getStyle__SWIG_0(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getStyle(string strStyleToGet) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IFeatureGroup_CSPtr_getStyle__SWIG_1(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strStyleToGet)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public PYXTableDefinition_CSPtr getDefinition() {
    PYXTableDefinition_CSPtr ret = new PYXTableDefinition_CSPtr(pyxlibPINVOKE.IFeatureGroup_CSPtr_getDefinition__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getFieldValue(int nFieldIndex) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFieldValue(swigCPtr, nFieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getFieldValueByName(string strName) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFieldValueByName(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector_Value getFieldValues() {
    Vector_Value ret = new Vector_Value(pyxlibPINVOKE.IFeatureGroup_CSPtr_getFieldValues(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
