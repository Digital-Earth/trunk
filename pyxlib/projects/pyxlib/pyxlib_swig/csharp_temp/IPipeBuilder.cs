/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IPipeBuilder : PYXCOM_IUnknown {
  private HandleRef swigCPtr;

  public IPipeBuilder(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.IPipeBuilderUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IPipeBuilder obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPipeBuilder() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IPipeBuilder(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IPipeBuilder_iid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual bool isDataSourceSupported(string strPath, IPipeBuilder.eCheckOptions options) {
    bool ret = pyxlibPINVOKE.IPipeBuilder_isDataSourceSupported(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strPath), (int)options);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXCatalog_CSPtr buildCatalog(string strPath) {
    PYXCatalog_CSPtr ret = new PYXCatalog_CSPtr(pyxlibPINVOKE.IPipeBuilder_buildCatalog(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strPath)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setConfig(string key, string value) {
    pyxlibPINVOKE.IPipeBuilder_setConfig(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IProcess_SPtr buildPipeline(PYXDataSet_SPtr pDataSet) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.IPipeBuilder_buildPipeline(swigCPtr, PYXDataSet_SPtr.getCPtr(pDataSet)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool get(SWIGTYPE_p_bool boolValue) {
    bool ret = pyxlibPINVOKE.IPipeBuilder_get(swigCPtr, SWIGTYPE_p_bool.getCPtr(boolValue));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set(bool boolValue) {
    bool ret = pyxlibPINVOKE.IPipeBuilder_set(swigCPtr, boolValue);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool builtDirectory() {
    bool ret = pyxlibPINVOKE.IPipeBuilder_builtDirectory(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum eCheckOptions {
    knPartial = 0,
    knLenient = 1,
    knStrict = 2
  }

}
