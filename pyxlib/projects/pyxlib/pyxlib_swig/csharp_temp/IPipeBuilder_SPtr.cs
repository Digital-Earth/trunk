/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IPipeBuilder_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IPipeBuilder_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IPipeBuilder_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPipeBuilder_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IPipeBuilder_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public IPipeBuilder_SPtr() : this(pyxlibPINVOKE.new_IPipeBuilder_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IPipeBuilder_SPtr(IPipeBuilder p, bool add_ref) : this(pyxlibPINVOKE.new_IPipeBuilder_SPtr__SWIG_1(IPipeBuilder.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IPipeBuilder_SPtr(IPipeBuilder p) : this(pyxlibPINVOKE.new_IPipeBuilder_SPtr__SWIG_2(IPipeBuilder.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IPipeBuilder_SPtr(IPipeBuilder_SPtr rhs) : this(pyxlibPINVOKE.new_IPipeBuilder_SPtr__SWIG_3(IPipeBuilder_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.IPipeBuilder_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(IPipeBuilder rhs) {
    pyxlibPINVOKE.IPipeBuilder_SPtr_reset__SWIG_1(swigCPtr, IPipeBuilder.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IPipeBuilder get() {
    IntPtr cPtr = pyxlibPINVOKE.IPipeBuilder_SPtr_get(swigCPtr);
    IPipeBuilder ret = (cPtr == IntPtr.Zero) ? null : new IPipeBuilder(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IPipeBuilder __ref__() {
    IPipeBuilder ret = new IPipeBuilder(pyxlibPINVOKE.IPipeBuilder_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IPipeBuilder __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.IPipeBuilder_SPtr___deref__(swigCPtr);
    IPipeBuilder ret = (cPtr == IntPtr.Zero) ? null : new IPipeBuilder(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(IPipeBuilder_SPtr rhs) {
    pyxlibPINVOKE.IPipeBuilder_SPtr_swap(swigCPtr, IPipeBuilder_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.IPipeBuilder_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.IPipeBuilder_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IPipeBuilder_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isDataSourceSupported(string strPath, IPipeBuilder.eCheckOptions options) {
    bool ret = pyxlibPINVOKE.IPipeBuilder_SPtr_isDataSourceSupported(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strPath), (int)options);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCatalog_CSPtr buildCatalog(string strPath) {
    PYXCatalog_CSPtr ret = new PYXCatalog_CSPtr(pyxlibPINVOKE.IPipeBuilder_SPtr_buildCatalog(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strPath)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setConfig(string key, string value) {
    pyxlibPINVOKE.IPipeBuilder_SPtr_setConfig(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IProcess_SPtr buildPipeline(PYXDataSet_SPtr pDataSet) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.IPipeBuilder_SPtr_buildPipeline(swigCPtr, PYXDataSet_SPtr.getCPtr(pDataSet)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set(bool boolValue) {
    bool ret = pyxlibPINVOKE.IPipeBuilder_SPtr_set(swigCPtr, boolValue);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool builtDirectory() {
    bool ret = pyxlibPINVOKE.IPipeBuilder_SPtr_builtDirectory(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint AddRef() {
    uint ret = pyxlibPINVOKE.IPipeBuilder_SPtr_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = pyxlibPINVOKE.IPipeBuilder_SPtr_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
