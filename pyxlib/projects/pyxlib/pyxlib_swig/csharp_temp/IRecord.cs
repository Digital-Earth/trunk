/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IRecord : PYXCOM_IUnknown {
  private HandleRef swigCPtr;

  public IRecord(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.IRecordUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IRecord obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IRecord() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IRecord(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IRecord_iid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual PYXTableDefinition_CSPtr getDefinition() {
    PYXTableDefinition_CSPtr ret = new PYXTableDefinition_CSPtr(pyxlibPINVOKE.IRecord_getDefinition__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValue getFieldValue(int nFieldIndex) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.IRecord_getFieldValue(swigCPtr, nFieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setFieldValue(PYXValue value, int nFieldIndex) {
    pyxlibPINVOKE.IRecord_setFieldValue(swigCPtr, PYXValue.getCPtr(value), nFieldIndex);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PYXValue getFieldValueByName(string strName) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.IRecord_getFieldValueByName(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setFieldValueByName(PYXValue value, string strName) {
    pyxlibPINVOKE.IRecord_setFieldValueByName(swigCPtr, PYXValue.getCPtr(value), pyxlibPINVOKE.UnmanagedString.Create(strName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector_Value getFieldValues() {
    Vector_Value ret = new Vector_Value(pyxlibPINVOKE.IRecord_getFieldValues(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setFieldValues(Vector_Value vecValues) {
    pyxlibPINVOKE.IRecord_setFieldValues(swigCPtr, Vector_Value.getCPtr(vecValues));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addField(string strName, PYXFieldDefinition.eContextType nContext, PYXValue.eType nType, int nCount, PYXValue value) {
    pyxlibPINVOKE.IRecord_addField__SWIG_0(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName), (int)nContext, (int)nType, nCount, PYXValue.getCPtr(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addField(string strName, PYXFieldDefinition.eContextType nContext, PYXValue.eType nType, int nCount) {
    pyxlibPINVOKE.IRecord_addField__SWIG_1(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName), (int)nContext, (int)nType, nCount);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addField(string strName, PYXFieldDefinition.eContextType nContext, PYXValue.eType nType) {
    pyxlibPINVOKE.IRecord_addField__SWIG_2(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName), (int)nContext, (int)nType);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
