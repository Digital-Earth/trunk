/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IUserCredentialsProvider_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IUserCredentialsProvider_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IUserCredentialsProvider_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IUserCredentialsProvider_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IUserCredentialsProvider_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public IUserCredentialsProvider_SPtr() : this(pyxlibPINVOKE.new_IUserCredentialsProvider_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IUserCredentialsProvider_SPtr(IUserCredentialsProvider p, bool add_ref) : this(pyxlibPINVOKE.new_IUserCredentialsProvider_SPtr__SWIG_1(IUserCredentialsProvider.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IUserCredentialsProvider_SPtr(IUserCredentialsProvider p) : this(pyxlibPINVOKE.new_IUserCredentialsProvider_SPtr__SWIG_2(IUserCredentialsProvider.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IUserCredentialsProvider_SPtr(IUserCredentialsProvider_SPtr rhs) : this(pyxlibPINVOKE.new_IUserCredentialsProvider_SPtr__SWIG_3(IUserCredentialsProvider_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.IUserCredentialsProvider_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(IUserCredentialsProvider rhs) {
    pyxlibPINVOKE.IUserCredentialsProvider_SPtr_reset__SWIG_1(swigCPtr, IUserCredentialsProvider.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public IUserCredentialsProvider get() {
    IntPtr cPtr = pyxlibPINVOKE.IUserCredentialsProvider_SPtr_get(swigCPtr);
    IUserCredentialsProvider ret = (cPtr == IntPtr.Zero) ? null : new IUserCredentialsProvider(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IUserCredentialsProvider __ref__() {
    IUserCredentialsProvider ret = new IUserCredentialsProvider(pyxlibPINVOKE.IUserCredentialsProvider_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IUserCredentialsProvider __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.IUserCredentialsProvider_SPtr___deref__(swigCPtr);
    IUserCredentialsProvider ret = (cPtr == IntPtr.Zero) ? null : new IUserCredentialsProvider(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(IUserCredentialsProvider_SPtr rhs) {
    pyxlibPINVOKE.IUserCredentialsProvider_SPtr_swap(swigCPtr, IUserCredentialsProvider_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.IUserCredentialsProvider_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.IUserCredentialsProvider_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.IUserCredentialsProvider_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IUserCredentials_SPtr getCredentials(string target, GUID credentialsType) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.IUserCredentialsProvider_SPtr_getCredentials(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(target), GUID.getCPtr(credentialsType)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void confirmCredentials(string target, IUserCredentials_SPtr credential, bool valid) {
    pyxlibPINVOKE.IUserCredentialsProvider_SPtr_confirmCredentials(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(target), IUserCredentials_SPtr.getCPtr(credential), valid);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint AddRef() {
    uint ret = pyxlibPINVOKE.IUserCredentialsProvider_SPtr_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = pyxlibPINVOKE.IUserCredentialsProvider_SPtr_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
