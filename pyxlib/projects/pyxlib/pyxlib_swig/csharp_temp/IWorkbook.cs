/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IWorkbook : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IWorkbook(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IWorkbook obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IWorkbook() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IWorkbook(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual string GetName() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.IWorkbook_GetName(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void GetTableNames(Vector_String tableNames) {
    pyxlibPINVOKE.IWorkbook_GetTableNames(swigCPtr, Vector_String.getCPtr(tableNames));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IWorkbookTablePointer CreateTable(string tableName) {
    IWorkbookTablePointer ret = new IWorkbookTablePointer(pyxlibPINVOKE.IWorkbook_CreateTable(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(tableName)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(IWorkbook)) ? pyxlibPINVOKE.IWorkbook_addRef(swigCPtr) : pyxlibPINVOKE.IWorkbook_addRefSwigExplicitIWorkbook(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(IWorkbook)) ? pyxlibPINVOKE.IWorkbook_release(swigCPtr) : pyxlibPINVOKE.IWorkbook_releaseSwigExplicitIWorkbook(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected IWorkbook() : this(pyxlibPINVOKE.new_IWorkbook(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetName", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIWorkbook_0(SwigDirectorGetName);
    if (SwigDerivedClassHasMethod("GetTableNames", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIWorkbook_1(SwigDirectorGetTableNames);
    if (SwigDerivedClassHasMethod("CreateTable", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateIWorkbook_2(SwigDirectorCreateTable);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateIWorkbook_3(SwigDirectoraddRef);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateIWorkbook_4(SwigDirectorrelease);
    pyxlibPINVOKE.IWorkbook_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IWorkbook));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorGetName() {
    return pyxlibPINVOKE.UnmanagedString.Create(GetName());
  }

  private void SwigDirectorGetTableNames(IntPtr tableNames) {
    GetTableNames(new Vector_String(tableNames, false));
  }

  private IntPtr SwigDirectorCreateTable(IntPtr tableName) {
    return IWorkbookTablePointer.getCPtr(CreateTable(pyxlibPINVOKE.UnmanagedString.Consume(tableName))).Handle;
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  private int SwigDirectorrelease() {
    return release();
  }

  public delegate IntPtr SwigDelegateIWorkbook_0();
  public delegate void SwigDelegateIWorkbook_1(IntPtr tableNames);
  public delegate IntPtr SwigDelegateIWorkbook_2(IntPtr tableName);
  public delegate int SwigDelegateIWorkbook_3();
  public delegate int SwigDelegateIWorkbook_4();

  private SwigDelegateIWorkbook_0 swigDelegate0;
  private SwigDelegateIWorkbook_1 swigDelegate1;
  private SwigDelegateIWorkbook_2 swigDelegate2;
  private SwigDelegateIWorkbook_3 swigDelegate3;
  private SwigDelegateIWorkbook_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(Vector_String) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes3 = new Type[] {  };
  private static Type[] swigMethodTypes4 = new Type[] {  };
}
