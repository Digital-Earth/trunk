/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IWorkbookView : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IWorkbookView(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IWorkbookView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IWorkbookView() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_IWorkbookView(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool IsEmpty() {
    bool ret = pyxlibPINVOKE.IWorkbookView_IsEmpty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetColumnCount() {
    uint ret = pyxlibPINVOKE.IWorkbookView_GetColumnCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void GetColumnName(uint columnOffset, PYXValue value) {
    pyxlibPINVOKE.IWorkbookView_GetColumnName(swigCPtr, columnOffset, PYXValue.getCPtr(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool GetHeadingRow(Vector_Value columns) {
    bool ret = pyxlibPINVOKE.IWorkbookView_GetHeadingRow(swigCPtr, Vector_Value.getCPtr(columns));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetHeadingCell(uint columnOffset, PYXValue value) {
    bool ret = pyxlibPINVOKE.IWorkbookView_GetHeadingCell(swigCPtr, columnOffset, PYXValue.getCPtr(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetDataRowCount() {
    uint ret = pyxlibPINVOKE.IWorkbookView_GetDataRowCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsDataRowEmpty(uint dataRowOffset) {
    bool ret = pyxlibPINVOKE.IWorkbookView_IsDataRowEmpty(swigCPtr, dataRowOffset);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetDataRow(uint dataRowOffset, Vector_Value columns) {
    bool ret = pyxlibPINVOKE.IWorkbookView_GetDataRow(swigCPtr, dataRowOffset, Vector_Value.getCPtr(columns));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetDataCell(uint dataRowOffset, uint columnOffset, PYXValue value) {
    bool ret = pyxlibPINVOKE.IWorkbookView_GetDataCell(swigCPtr, dataRowOffset, columnOffset, PYXValue.getCPtr(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(IWorkbookView)) ? pyxlibPINVOKE.IWorkbookView_release(swigCPtr) : pyxlibPINVOKE.IWorkbookView_releaseSwigExplicitIWorkbookView(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(IWorkbookView)) ? pyxlibPINVOKE.IWorkbookView_addRef(swigCPtr) : pyxlibPINVOKE.IWorkbookView_addRefSwigExplicitIWorkbookView(swigCPtr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected IWorkbookView() : this(pyxlibPINVOKE.new_IWorkbookView(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("IsEmpty", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIWorkbookView_0(SwigDirectorIsEmpty);
    if (SwigDerivedClassHasMethod("GetColumnCount", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIWorkbookView_1(SwigDirectorGetColumnCount);
    if (SwigDerivedClassHasMethod("GetColumnName", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateIWorkbookView_2(SwigDirectorGetColumnName);
    if (SwigDerivedClassHasMethod("GetHeadingRow", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateIWorkbookView_3(SwigDirectorGetHeadingRow);
    if (SwigDerivedClassHasMethod("GetHeadingCell", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateIWorkbookView_4(SwigDirectorGetHeadingCell);
    if (SwigDerivedClassHasMethod("GetDataRowCount", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateIWorkbookView_5(SwigDirectorGetDataRowCount);
    if (SwigDerivedClassHasMethod("IsDataRowEmpty", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateIWorkbookView_6(SwigDirectorIsDataRowEmpty);
    if (SwigDerivedClassHasMethod("GetDataRow", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateIWorkbookView_7(SwigDirectorGetDataRow);
    if (SwigDerivedClassHasMethod("GetDataCell", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateIWorkbookView_8(SwigDirectorGetDataCell);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateIWorkbookView_9(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateIWorkbookView_10(SwigDirectoraddRef);
    pyxlibPINVOKE.IWorkbookView_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IWorkbookView));
    return hasDerivedMethod;
  }

  private bool SwigDirectorIsEmpty() {
    return IsEmpty();
  }

  private uint SwigDirectorGetColumnCount() {
    return GetColumnCount();
  }

  private void SwigDirectorGetColumnName(uint columnOffset, IntPtr value) {
    GetColumnName(columnOffset, new PYXValue(value, false));
  }

  private bool SwigDirectorGetHeadingRow(IntPtr columns) {
    return GetHeadingRow(new Vector_Value(columns, false));
  }

  private bool SwigDirectorGetHeadingCell(uint columnOffset, IntPtr value) {
    return GetHeadingCell(columnOffset, new PYXValue(value, false));
  }

  private uint SwigDirectorGetDataRowCount() {
    return GetDataRowCount();
  }

  private bool SwigDirectorIsDataRowEmpty(uint dataRowOffset) {
    return IsDataRowEmpty(dataRowOffset);
  }

  private bool SwigDirectorGetDataRow(uint dataRowOffset, IntPtr columns) {
    return GetDataRow(dataRowOffset, new Vector_Value(columns, false));
  }

  private bool SwigDirectorGetDataCell(uint dataRowOffset, uint columnOffset, IntPtr value) {
    return GetDataCell(dataRowOffset, columnOffset, new PYXValue(value, false));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate bool SwigDelegateIWorkbookView_0();
  public delegate uint SwigDelegateIWorkbookView_1();
  public delegate void SwigDelegateIWorkbookView_2(uint columnOffset, IntPtr value);
  public delegate bool SwigDelegateIWorkbookView_3(IntPtr columns);
  public delegate bool SwigDelegateIWorkbookView_4(uint columnOffset, IntPtr value);
  public delegate uint SwigDelegateIWorkbookView_5();
  public delegate bool SwigDelegateIWorkbookView_6(uint dataRowOffset);
  public delegate bool SwigDelegateIWorkbookView_7(uint dataRowOffset, IntPtr columns);
  public delegate bool SwigDelegateIWorkbookView_8(uint dataRowOffset, uint columnOffset, IntPtr value);
  public delegate int SwigDelegateIWorkbookView_9();
  public delegate int SwigDelegateIWorkbookView_10();

  private SwigDelegateIWorkbookView_0 swigDelegate0;
  private SwigDelegateIWorkbookView_1 swigDelegate1;
  private SwigDelegateIWorkbookView_2 swigDelegate2;
  private SwigDelegateIWorkbookView_3 swigDelegate3;
  private SwigDelegateIWorkbookView_4 swigDelegate4;
  private SwigDelegateIWorkbookView_5 swigDelegate5;
  private SwigDelegateIWorkbookView_6 swigDelegate6;
  private SwigDelegateIWorkbookView_7 swigDelegate7;
  private SwigDelegateIWorkbookView_8 swigDelegate8;
  private SwigDelegateIWorkbookView_9 swigDelegate9;
  private SwigDelegateIWorkbookView_10 swigDelegate10;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(uint), typeof(PYXValue) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(Vector_Value) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(uint), typeof(PYXValue) };
  private static Type[] swigMethodTypes5 = new Type[] {  };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(uint) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(uint), typeof(Vector_Value) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(uint), typeof(uint), typeof(PYXValue) };
  private static Type[] swigMethodTypes9 = new Type[] {  };
  private static Type[] swigMethodTypes10 = new Type[] {  };
}
