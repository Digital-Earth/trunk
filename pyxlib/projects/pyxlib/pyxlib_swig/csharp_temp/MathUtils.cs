/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class MathUtils : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public MathUtils(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(MathUtils obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MathUtils() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_MathUtils(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static double kf30Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf30Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf60Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf60Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf90Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf90Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf120Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf120Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf150Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf150Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf180Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf180Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf240Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf240Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf300Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf300Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kf360Rad {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kf360Rad_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfSin30 {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfSin30_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfCos30 {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfCos30_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfSin60 {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfSin60_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfCos60 {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfCos60_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfTan60 {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfTan60_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float kfDefaultFloatPrecision {
    get {
      float ret = pyxlibPINVOKE.MathUtils_kfDefaultFloatPrecision_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfDefaultDoublePrecision {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfDefaultDoublePrecision_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfPI {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfPI_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfDegreesToRadians {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfDegreesToRadians_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfPHI {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfPHI_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfSqrt3 {
    get {
      double ret = pyxlibPINVOKE.MathUtils_kfSqrt3_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool equal(float fLHS, float fRHS, float fEpsilon) {
    bool ret = pyxlibPINVOKE.MathUtils_equal__SWIG_0(fLHS, fRHS, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool equal(float fLHS, float fRHS) {
    bool ret = pyxlibPINVOKE.MathUtils_equal__SWIG_1(fLHS, fRHS);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool equal(double fLHS, double fRHS, double fEpsilon) {
    bool ret = pyxlibPINVOKE.MathUtils_equal__SWIG_2(fLHS, fRHS, fEpsilon);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool equal(double fLHS, double fRHS) {
    bool ret = pyxlibPINVOKE.MathUtils_equal__SWIG_3(fLHS, fRHS);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double radiansToDegrees(double fAngle) {
    double ret = pyxlibPINVOKE.MathUtils_radiansToDegrees(fAngle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double degreesToRadians(double fAngle) {
    double ret = pyxlibPINVOKE.MathUtils_degreesToRadians(fAngle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double hav(double fAngle) {
    double ret = pyxlibPINVOKE.MathUtils_hav(fAngle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MathUtils() : this(pyxlibPINVOKE.new_MathUtils(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
