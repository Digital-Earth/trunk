/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Notifier : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Notifier(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Notifier obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Notifier() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_Notifier(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

    /// <summary>Delegate for notifications.</summary>
    /// <param name="spEvent"></param>
    public delegate void Notification( NotifierEvent_SPtr spEvent);

    /// <summary> 
    /// Utility class for connecting .Net delegate to C++ observer.
    /// </summary>
    private class DelegateObserver : Observer
    {
        /// <summary> The actual notification to call back.</summary>
        private Notification m_notification;
        /// <summary> The actual notification to call back.</summary>
        public Notification Notification
        {
            get { return m_notification; }
        }

        /// <summary> Constructs a DelegateObserver.</summary>
        /// <param name="notification">The callback fn.</param>
        public DelegateObserver(Notification notification)
        {
            m_notification = notification;
        }

        /// <summary> Override the "OnNotification" callback.</summary>
        /// <param name="spEvent"></param>
        protected override void updateObserverImpl(NotifierEvent_SPtr spEvent)
        {
            m_notification(spEvent);
        }
    }

    private static System.Collections.Generic.List<DelegateObserver> s_observers =
        new System.Collections.Generic.List<DelegateObserver>();

    public event Notification Event{
        add
        {
            DelegateObserver observer = new DelegateObserver(value);
            lock (s_observers)
            {
                s_observers.Add(observer);
            }
            attach(observer);
        }
        remove
        {
            lock (s_observers)
            {
                DelegateObserver observer = null;
                foreach (DelegateObserver o in s_observers)
                {
                    if (o.Notification == value)
                    {
                        observer = o;
                        break;
                    }
                }
                if (observer != null)
                {
                    detach(observer);
                    s_observers.Remove(observer);
                }
            }
        }
    }

  public static void test() {
    pyxlibPINVOKE.Notifier_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier(string strName) : this(pyxlibPINVOKE.new_Notifier__SWIG_0(pyxlibPINVOKE.UnmanagedString.Create(strName)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier() : this(pyxlibPINVOKE.new_Notifier__SWIG_1(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier(Notifier rhs) : this(pyxlibPINVOKE.new_Notifier__SWIG_2(Notifier.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void attach(Observer pObserver) {
    pyxlibPINVOKE.Notifier_attach(swigCPtr, Observer.getCPtr(pObserver));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void detach(Observer pObserver) {
    pyxlibPINVOKE.Notifier_detach(swigCPtr, Observer.getCPtr(pObserver));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNotifierName(string strName) {
    pyxlibPINVOKE.Notifier_setNotifierName(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void notify(NotifierEvent_SPtr spEvent) {
    pyxlibPINVOKE.Notifier_notify(swigCPtr, NotifierEvent_SPtr.getCPtr(spEvent));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getObserverCount() {
    int ret = pyxlibPINVOKE.Notifier_getObserverCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getNotifierDescription() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.Notifier_getNotifierDescription(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

}
