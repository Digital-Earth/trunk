/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Observer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Observer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Observer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Observer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_Observer(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static string kstrDescription {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.Observer_kstrDescription_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public virtual string getObserverDescription() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(((this.GetType() == typeof(Observer)) ? pyxlibPINVOKE.Observer_getObserverDescription(swigCPtr) : pyxlibPINVOKE.Observer_getObserverDescriptionSwigExplicitObserver(swigCPtr)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  protected virtual void updateObserverImpl(NotifierEvent_SPtr spEvent) {
    pyxlibPINVOKE.Observer_updateObserverImpl(swigCPtr, NotifierEvent_SPtr.getCPtr(spEvent));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Observer() : this(pyxlibPINVOKE.new_Observer(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("getObserverDescription", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateObserver_0(SwigDirectorgetObserverDescription);
    if (SwigDerivedClassHasMethod("updateObserverImpl", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateObserver_1(SwigDirectorupdateObserverImpl);
    pyxlibPINVOKE.Observer_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Observer));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorgetObserverDescription() {
    return pyxlibPINVOKE.UnmanagedString.Create(getObserverDescription());
  }

  private void SwigDirectorupdateObserverImpl(IntPtr spEvent) {
    updateObserverImpl(new NotifierEvent_SPtr(spEvent, false));
  }

  public delegate IntPtr SwigDelegateObserver_0();
  public delegate void SwigDelegateObserver_1(IntPtr spEvent);

  private SwigDelegateObserver_0 swigDelegate0;
  private SwigDelegateObserver_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(NotifierEvent_SPtr) };
}
