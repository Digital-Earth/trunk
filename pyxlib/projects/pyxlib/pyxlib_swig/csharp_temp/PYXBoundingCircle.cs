/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXBoundingCircle : PYXBoundingShape {
  private HandleRef swigCPtr;

  public PYXBoundingCircle(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXBoundingCircleUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXBoundingCircle obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXBoundingCircle() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXBoundingCircle(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PYXBoundingCircle global() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXBoundingCircle_global(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXBoundingCircle() : this(pyxlibPINVOKE.new_PYXBoundingCircle__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXBoundingCircle(PYXCoord3DDouble center, double radius) : this(pyxlibPINVOKE.new_PYXBoundingCircle__SWIG_1(PYXCoord3DDouble.getCPtr(center), radius), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXBoundingCircle(SWIGTYPE_p_SphereMath__GreatCircleArc arc, double radius) : this(pyxlibPINVOKE.new_PYXBoundingCircle__SWIG_2(SWIGTYPE_p_SphereMath__GreatCircleArc.getCPtr(arc), radius), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXBoundingCircle(PYXBoundingCircle other) : this(pyxlibPINVOKE.new_PYXBoundingCircle__SWIG_3(PYXBoundingCircle.getCPtr(other)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int estimateResolutionFromRadius(double radius) {
    int ret = pyxlibPINVOKE.PYXBoundingCircle_estimateResolutionFromRadius(radius);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(PYXCoord3DDouble location) {
    bool ret = pyxlibPINVOKE.PYXBoundingCircle_contains__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(PYXBoundingCircle other) {
    bool ret = pyxlibPINVOKE.PYXBoundingCircle_contains__SWIG_1(swigCPtr, PYXBoundingCircle.getCPtr(other));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXBoundingCircle other) {
    bool ret = pyxlibPINVOKE.PYXBoundingCircle_intersects(swigCPtr, PYXBoundingCircle.getCPtr(other));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCoord3DDouble getCenter() {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(pyxlibPINVOKE.PYXBoundingCircle_getCenter(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRadius() {
    double ret = pyxlibPINVOKE.PYXBoundingCircle_getRadius(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEmpty() {
    bool ret = pyxlibPINVOKE.PYXBoundingCircle_isEmpty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool canIntersects(SWIGTYPE_p_SphereMath__GreatCircleArc ray) {
    bool ret = pyxlibPINVOKE.PYXBoundingCircle_canIntersects(swigCPtr, SWIGTYPE_p_SphereMath__GreatCircleArc.getCPtr(ray));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool canBeCloser(PYXCoord3DDouble location, double distance) {
    bool ret = pyxlibPINVOKE.PYXBoundingCircle_canBeCloser(swigCPtr, PYXCoord3DDouble.getCPtr(location), distance);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getBoundingArea() {
    double ret = pyxlibPINVOKE.PYXBoundingCircle_getBoundingArea(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
