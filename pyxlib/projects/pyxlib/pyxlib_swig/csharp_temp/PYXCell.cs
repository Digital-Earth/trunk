/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCell : PYXGeometry {
  private HandleRef swigCPtr;

  public PYXCell(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXCellUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCell obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCell() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCell(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static void test() {
    pyxlibPINVOKE.PYXCell_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PYXCell_SPtr create() {
    PYXCell_SPtr ret = new PYXCell_SPtr(pyxlibPINVOKE.PYXCell_create__SWIG_0(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCell_SPtr create(PYXCell rhs) {
    PYXCell_SPtr ret = new PYXCell_SPtr(pyxlibPINVOKE.PYXCell_create__SWIG_1(PYXCell.getCPtr(rhs)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCell_SPtr create(PYXIcosIndex index) {
    PYXCell_SPtr ret = new PYXCell_SPtr(pyxlibPINVOKE.PYXCell_create__SWIG_2(PYXIcosIndex.getCPtr(index)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCell() : this(pyxlibPINVOKE.new_PYXCell(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setIndex(PYXIcosIndex index) {
    pyxlibPINVOKE.PYXCell_setIndex(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXIcosIndex getIndex() {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PYXCell_getIndex(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXGeometry_SPtr clone() {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXCell_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isEmpty() {
    bool ret = pyxlibPINVOKE.PYXCell_isEmpty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setEmpty() {
    pyxlibPINVOKE.PYXCell_setEmpty(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int getCellResolution() {
    int ret = pyxlibPINVOKE.PYXCell_getCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setCellResolution(int nCellResolution) {
    pyxlibPINVOKE.PYXCell_setCellResolution(swigCPtr, nCellResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override PYXGeometry_SPtr intersection(PYXGeometry geometry, bool bCommutative) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXCell_intersection__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry), bCommutative), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXGeometry_SPtr intersection(PYXGeometry geometry) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXCell_intersection__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXGeometry_SPtr intersection(PYXCell cell) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXCell_intersection__SWIG_2(swigCPtr, PYXCell.getCPtr(cell)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool intersects(PYXGeometry geometry, bool bCommutative) {
    bool ret = pyxlibPINVOKE.PYXCell_intersects__SWIG_0(swigCPtr, PYXGeometry.getCPtr(geometry), bCommutative);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool intersects(PYXGeometry geometry) {
    bool ret = pyxlibPINVOKE.PYXCell_intersects__SWIG_1(swigCPtr, PYXGeometry.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXCell cell) {
    bool ret = pyxlibPINVOKE.PYXCell_intersects__SWIG_2(swigCPtr, PYXCell.getCPtr(cell));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXIterator_SPtr getIterator() {
    PYXIterator_SPtr ret = new PYXIterator_SPtr(pyxlibPINVOKE.PYXCell_getIterator(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void calcPerimeter(Vector_Index pVecIndex) {
    pyxlibPINVOKE.PYXCell_calcPerimeter(swigCPtr, Vector_Index.getCPtr(pVecIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void copyTo(PYXTileCollection pTileCollection) {
    pyxlibPINVOKE.PYXCell_copyTo__SWIG_0(swigCPtr, PYXTileCollection.getCPtr(pTileCollection));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void copyTo(PYXTileCollection pTileCollection, int nTargetResolution) {
    pyxlibPINVOKE.PYXCell_copyTo__SWIG_1(swigCPtr, PYXTileCollection.getCPtr(pTileCollection), nTargetResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void getBoundingRects(ICoordConverter coordConvertor, PYXRect2DDouble pRect1, PYXRect2DDouble pRect2) {
    pyxlibPINVOKE.PYXCell_getBoundingRects(swigCPtr, ICoordConverter.getCPtr(coordConvertor), PYXRect2DDouble.getCPtr(pRect1), PYXRect2DDouble.getCPtr(pRect2));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXCell_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
