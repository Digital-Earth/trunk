/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCellHistogram_CSPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXCellHistogram_CSPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCellHistogram_CSPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCellHistogram_CSPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCellHistogram_CSPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXCellHistogram_CSPtr() : this(pyxlibPINVOKE.new_PYXCellHistogram_CSPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCellHistogram_CSPtr(PYXCellHistogram p, bool add_ref) : this(pyxlibPINVOKE.new_PYXCellHistogram_CSPtr__SWIG_1(PYXCellHistogram.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCellHistogram_CSPtr(PYXCellHistogram p) : this(pyxlibPINVOKE.new_PYXCellHistogram_CSPtr__SWIG_2(PYXCellHistogram.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCellHistogram_CSPtr(PYXCellHistogram_CSPtr rhs) : this(pyxlibPINVOKE.new_PYXCellHistogram_CSPtr__SWIG_3(PYXCellHistogram_CSPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.PYXCellHistogram_CSPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(PYXCellHistogram rhs) {
    pyxlibPINVOKE.PYXCellHistogram_CSPtr_reset__SWIG_1(swigCPtr, PYXCellHistogram.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCellHistogram get() {
    IntPtr cPtr = pyxlibPINVOKE.PYXCellHistogram_CSPtr_get(swigCPtr);
    PYXCellHistogram ret = (cPtr == IntPtr.Zero) ? null : new PYXCellHistogram(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCellHistogram __ref__() {
    PYXCellHistogram ret = new PYXCellHistogram(pyxlibPINVOKE.PYXCellHistogram_CSPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCellHistogram __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.PYXCellHistogram_CSPtr___deref__(swigCPtr);
    PYXCellHistogram ret = (cPtr == IntPtr.Zero) ? null : new PYXCellHistogram(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(PYXCellHistogram_CSPtr rhs) {
    pyxlibPINVOKE.PYXCellHistogram_CSPtr_swap(swigCPtr, PYXCellHistogram_CSPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.PYXCellHistogram_CSPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.PYXCellHistogram_CSPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getCellResolution() {
    int ret = pyxlibPINVOKE.PYXCellHistogram_CSPtr_getCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble getArea() {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getArea__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeDouble getArea(RangePYXValue range) {
    RangeDouble ret = new RangeDouble(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getArea__SWIG_1(swigCPtr, RangePYXValue.getCPtr(range)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCellHistogramBinVector getCellBins() {
    PYXCellHistogramBinVector ret = new PYXCellHistogramBinVector(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getCellBins(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCellHistogramBinVector getCellNormalizedBins(PYXHistogram.Normalization mode, int binCount) {
    PYXCellHistogramBinVector ret = new PYXCellHistogramBinVector(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getCellNormalizedBins(swigCPtr, (int)mode, binCount), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt getFeatureCount() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getFeatureCount__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt getFeatureCount(RangePYXValue range) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getFeatureCount__SWIG_1(swigCPtr, RangePYXValue.getCPtr(range)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getSum() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getSum(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getAverage() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getAverage(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getSumSquare() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getSumSquare(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangePYXValue getBoundaries() {
    RangePYXValue ret = new RangePYXValue(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getBoundaries(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogramBinVector getBins() {
    PYXHistogramBinVector ret = new PYXHistogramBinVector(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getBins(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogramBinVector getNormalizedBins(PYXHistogram.Normalization mode, int binCount) {
    PYXHistogramBinVector ret = new PYXHistogramBinVector(pyxlibPINVOKE.PYXCellHistogram_CSPtr_getNormalizedBins(swigCPtr, (int)mode, binCount), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
