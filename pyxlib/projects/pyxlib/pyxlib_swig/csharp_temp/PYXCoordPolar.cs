/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCoordPolar : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXCoordPolar(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCoordPolar obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCoordPolar() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCoordPolar(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.PYXCoordPolar_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCoordPolar(double fRadius, double fAngle) : this(pyxlibPINVOKE.new_PYXCoordPolar__SWIG_0(fRadius, fAngle), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCoordPolar(double fRadius) : this(pyxlibPINVOKE.new_PYXCoordPolar__SWIG_1(fRadius), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCoordPolar() : this(pyxlibPINVOKE.new_PYXCoordPolar__SWIG_2(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double radius() {
    double ret = pyxlibPINVOKE.PYXCoordPolar_radius(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRadius(double fRadius) {
    pyxlibPINVOKE.PYXCoordPolar_setRadius(swigCPtr, fRadius);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double angle() {
    double ret = pyxlibPINVOKE.PYXCoordPolar_angle(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAngle(double fAngle) {
    pyxlibPINVOKE.PYXCoordPolar_setAngle(swigCPtr, fAngle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public double angleInDegrees() {
    double ret = pyxlibPINVOKE.PYXCoordPolar_angleInDegrees(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAngleInDegrees(double fAngle) {
    pyxlibPINVOKE.PYXCoordPolar_setAngleInDegrees(swigCPtr, fAngle);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool equal(PYXCoordPolar pt, double fPrecision) {
    bool ret = pyxlibPINVOKE.PYXCoordPolar_equal__SWIG_0(swigCPtr, PYXCoordPolar.getCPtr(pt), fPrecision);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equal(PYXCoordPolar pt) {
    bool ret = pyxlibPINVOKE.PYXCoordPolar_equal__SWIG_1(swigCPtr, PYXCoordPolar.getCPtr(pt));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
