/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXCurveRegion : PYXVectorRegion {
  private HandleRef swigCPtr;

  public PYXCurveRegion(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXCurveRegionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXCurveRegion obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXCurveRegion() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXCurveRegion(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override IRegion_SPtr clone() {
    IRegion_SPtr ret = new IRegion_SPtr(pyxlibPINVOKE.PYXCurveRegion_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getVerticesCount() {
    int ret = pyxlibPINVOKE.PYXCurveRegion_getVerticesCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t getVisitor() {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXCurveRegion_getVisitor(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void serializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer, SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t visitor) {
    pyxlibPINVOKE.PYXCurveRegion_serializeVisitor(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer), SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t.getCPtr(visitor));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t deserializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer) {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXCurveRegion_deserializeVisitor(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getDistanceToBorder(PYXCoord3DDouble location, double errorThreshold) {
    double ret = pyxlibPINVOKE.PYXCurveRegion_getDistanceToBorder__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getDistanceToBorder(PYXCoord3DDouble location) {
    double ret = pyxlibPINVOKE.PYXCurveRegion_getDistanceToBorder__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPointContained(PYXCoord3DDouble location, double errorThreshold) {
    bool ret = pyxlibPINVOKE.PYXCurveRegion_isPointContained__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPointContained(PYXCoord3DDouble location) {
    bool ret = pyxlibPINVOKE.PYXCurveRegion_isPointContained__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXRegion.CellIntersectionState intersects(PYXIcosIndex index, bool asTile) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXCurveRegion_intersects__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), asTile);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXRegion.CellIntersectionState intersects(PYXIcosIndex index) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXCurveRegion_intersects__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXRegion.CellIntersectionState intersects(PYXBoundingCircle circle, double errorThreshold) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXCurveRegion_intersects__SWIG_2(swigCPtr, PYXBoundingCircle.getCPtr(circle), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXRegion.CellIntersectionState intersects(PYXBoundingCircle circle) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXCurveRegion_intersects__SWIG_3(swigCPtr, PYXBoundingCircle.getCPtr(circle));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXCurveRegion_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCurveRegion_SPtr create() {
    PYXCurveRegion_SPtr ret = new PYXCurveRegion_SPtr(pyxlibPINVOKE.PYXCurveRegion_create__SWIG_0(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCurveRegion_SPtr create(PYXCurveRegion curve) {
    PYXCurveRegion_SPtr ret = new PYXCurveRegion_SPtr(pyxlibPINVOKE.PYXCurveRegion_create__SWIG_1(PYXCurveRegion.getCPtr(curve)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCurveRegion_SPtr create(PYXCoord3DDouble pointA, PYXCoord3DDouble pointB) {
    PYXCurveRegion_SPtr ret = new PYXCurveRegion_SPtr(pyxlibPINVOKE.PYXCurveRegion_create__SWIG_2(PYXCoord3DDouble.getCPtr(pointA), PYXCoord3DDouble.getCPtr(pointB)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCurveRegion_SPtr create(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t points, bool closeCurve) {
    PYXCurveRegion_SPtr ret = new PYXCurveRegion_SPtr(pyxlibPINVOKE.PYXCurveRegion_create__SWIG_3(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t.getCPtr(points), closeCurve), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXCurveRegion_SPtr create(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t points) {
    PYXCurveRegion_SPtr ret = new PYXCurveRegion_SPtr(pyxlibPINVOKE.PYXCurveRegion_create__SWIG_4(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t.getCPtr(points)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCurveRegion() : this(pyxlibPINVOKE.new_PYXCurveRegion__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCurveRegion(PYXCurveRegion curve) : this(pyxlibPINVOKE.new_PYXCurveRegion__SWIG_1(PYXCurveRegion.getCPtr(curve)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCurveRegion(PYXCoord3DDouble pointA, PYXCoord3DDouble pointB) : this(pyxlibPINVOKE.new_PYXCurveRegion__SWIG_2(PYXCoord3DDouble.getCPtr(pointA), PYXCoord3DDouble.getCPtr(pointB)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCurveRegion(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t points, bool closeCurve) : this(pyxlibPINVOKE.new_PYXCurveRegion__SWIG_3(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t.getCPtr(points), closeCurve), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXCurveRegion(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t points) : this(pyxlibPINVOKE.new_PYXCurveRegion__SWIG_4(SWIGTYPE_p_std__vectorTPYXCoord3DTdouble_t_t.getCPtr(points)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void closeCurve() {
    pyxlibPINVOKE.PYXCurveRegion_closeCurve(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isClosed() {
    bool ret = pyxlibPINVOKE.PYXCurveRegion_isClosed(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCoord3DDouble getVertex(uint index) {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(pyxlibPINVOKE.PYXCurveRegion_getVertex(swigCPtr, index), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void test() {
    pyxlibPINVOKE.PYXCurveRegion_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
