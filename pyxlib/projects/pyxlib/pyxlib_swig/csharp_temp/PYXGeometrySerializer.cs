/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXGeometrySerializer : IDisposable {
	private HandleRef swigCPtr;
	protected bool swigCMemOwn;

	public PYXGeometrySerializer(IntPtr cPtr, bool cMemoryOwn) {
		swigCMemOwn = cMemoryOwn;
		swigCPtr = new HandleRef(this, cPtr);
	}

	public static HandleRef getCPtr(PYXGeometrySerializer obj) {
		return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
	}

	public static PYXGeometry_SPtr deserialize(string strIn)
	{
		char[] chars = strIn.ToCharArray();

		System.Collections.Generic.List<byte> bytes = new System.Collections.Generic.List<byte>();

		foreach (char c in chars)
		{
			if (c < 0x100)
			{
				bytes.Add((byte)c);
			}
			else
			{
				bytes.Add((byte)(c / 256));
				bytes.Add((byte)(c % 256));
			}
		}

		byte[] toEncodeAsBytes = bytes.ToArray();

		return PYXGeometrySerializer.deserializeFromBase64(System.Convert.ToBase64String(toEncodeAsBytes));
	}

	public static string serialize(PYXGeometry geometry)
	{
		string base64steam = PYXGeometrySerializer.serializeToBase64(geometry);

		byte[] encodedDataAsBytes = System.Convert.FromBase64String(base64steam);

		char[] chars = new char[encodedDataAsBytes.Length];

		for (int i = 0; i < chars.Length; i++)
		{
			chars[i] = (char)encodedDataAsBytes[i];
		}

		return new String(chars);
	}

  ~PYXGeometrySerializer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXGeometrySerializer(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.PYXGeometrySerializer_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PYXGeometry_SPtr deserializeFromBase64(string strIn) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(pyxlibPINVOKE.PYXGeometrySerializer_deserializeFromBase64(pyxlibPINVOKE.UnmanagedString.Create(strIn)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string serializeToBase64(PYXGeometry geometry) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXGeometrySerializer_serializeToBase64(PYXGeometry.getCPtr(geometry)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public PYXGeometrySerializer() : this(pyxlibPINVOKE.new_PYXGeometrySerializer(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
