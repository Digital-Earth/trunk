/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXHistogram : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXHistogram(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXHistogram obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXHistogram() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXHistogram(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static PYXHistogram_SPtr createFromFeatures(FeatureIterator_SPtr features, int fieldIndex) {
    PYXHistogram_SPtr ret = new PYXHistogram_SPtr(pyxlibPINVOKE.PYXHistogram_createFromFeatures(FeatureIterator_SPtr.getCPtr(features), fieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RangeInt getFeatureCount() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXHistogram_getFeatureCount__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RangeInt getFeatureCount(RangePYXValue range) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXHistogram_getFeatureCount__SWIG_1(swigCPtr, RangePYXValue.getCPtr(range)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValue getSum() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXHistogram_getSum(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValue getAverage() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXHistogram_getAverage(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXValue getSumSquare() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXHistogram_getSumSquare(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RangePYXValue getBoundaries() {
    RangePYXValue ret = new RangePYXValue(pyxlibPINVOKE.PYXHistogram_getBoundaries(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXHistogramBinVector getBins() {
    PYXHistogramBinVector ret = new PYXHistogramBinVector(pyxlibPINVOKE.PYXHistogram_getBins(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXHistogramBinVector getNormalizedBins(PYXHistogram.Normalization mode, int binCount) {
    PYXHistogramBinVector ret = new PYXHistogramBinVector(pyxlibPINVOKE.PYXHistogram_getNormalizedBins(swigCPtr, (int)mode, binCount), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void add(PYXValue value) {
    pyxlibPINVOKE.PYXHistogram_add__SWIG_0(swigCPtr, PYXValue.getCPtr(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void add(PYXHistogram histogram) {
    pyxlibPINVOKE.PYXHistogram_add__SWIG_1(swigCPtr, PYXHistogram.getCPtr(histogram));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Normalization {
    knLinearBins,
    knNormalizedBin
  }

}
