/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXHistogram_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXHistogram_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXHistogram_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXHistogram_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXHistogram_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXHistogram_SPtr() : this(pyxlibPINVOKE.new_PYXHistogram_SPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXHistogram_SPtr(PYXHistogram p, bool add_ref) : this(pyxlibPINVOKE.new_PYXHistogram_SPtr__SWIG_1(PYXHistogram.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXHistogram_SPtr(PYXHistogram p) : this(pyxlibPINVOKE.new_PYXHistogram_SPtr__SWIG_2(PYXHistogram.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXHistogram_SPtr(PYXHistogram_SPtr rhs) : this(pyxlibPINVOKE.new_PYXHistogram_SPtr__SWIG_3(PYXHistogram_SPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.PYXHistogram_SPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(PYXHistogram rhs) {
    pyxlibPINVOKE.PYXHistogram_SPtr_reset__SWIG_1(swigCPtr, PYXHistogram.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXHistogram get() {
    IntPtr cPtr = pyxlibPINVOKE.PYXHistogram_SPtr_get(swigCPtr);
    PYXHistogram ret = (cPtr == IntPtr.Zero) ? null : new PYXHistogram(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogram __ref__() {
    PYXHistogram ret = new PYXHistogram(pyxlibPINVOKE.PYXHistogram_SPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogram __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.PYXHistogram_SPtr___deref__(swigCPtr);
    PYXHistogram ret = (cPtr == IntPtr.Zero) ? null : new PYXHistogram(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(PYXHistogram_SPtr rhs) {
    pyxlibPINVOKE.PYXHistogram_SPtr_swap(swigCPtr, PYXHistogram_SPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.PYXHistogram_SPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.PYXHistogram_SPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogram_SPtr createFromFeatures(FeatureIterator_SPtr features, int fieldIndex) {
    PYXHistogram_SPtr ret = new PYXHistogram_SPtr(pyxlibPINVOKE.PYXHistogram_SPtr_createFromFeatures(swigCPtr, FeatureIterator_SPtr.getCPtr(features), fieldIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt getFeatureCount() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXHistogram_SPtr_getFeatureCount__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt getFeatureCount(RangePYXValue range) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXHistogram_SPtr_getFeatureCount__SWIG_1(swigCPtr, RangePYXValue.getCPtr(range)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getSum() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXHistogram_SPtr_getSum(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getAverage() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXHistogram_SPtr_getAverage(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXValue getSumSquare() {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXHistogram_SPtr_getSumSquare(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangePYXValue getBoundaries() {
    RangePYXValue ret = new RangePYXValue(pyxlibPINVOKE.PYXHistogram_SPtr_getBoundaries(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogramBinVector getBins() {
    PYXHistogramBinVector ret = new PYXHistogramBinVector(pyxlibPINVOKE.PYXHistogram_SPtr_getBins(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXHistogramBinVector getNormalizedBins(PYXHistogram.Normalization mode, int binCount) {
    PYXHistogramBinVector ret = new PYXHistogramBinVector(pyxlibPINVOKE.PYXHistogram_SPtr_getNormalizedBins(swigCPtr, (int)mode, binCount), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void add(PYXValue value) {
    pyxlibPINVOKE.PYXHistogram_SPtr_add__SWIG_0(swigCPtr, PYXValue.getCPtr(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(PYXHistogram histogram) {
    pyxlibPINVOKE.PYXHistogram_SPtr_add__SWIG_1(swigCPtr, PYXHistogram.getCPtr(histogram));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
