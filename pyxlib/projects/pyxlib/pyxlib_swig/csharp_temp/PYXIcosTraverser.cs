/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXIcosTraverser : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXIcosTraverser(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXIcosTraverser obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXIcosTraverser() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXIcosTraverser(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public bool traverse(int nStartResolution, int nMaxResolution) {
    bool ret = pyxlibPINVOKE.PYXIcosTraverser_traverse__SWIG_0(swigCPtr, nStartResolution, nMaxResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool traverse(int nStartResolution) {
    bool ret = pyxlibPINVOKE.PYXIcosTraverser_traverse__SWIG_1(swigCPtr, nStartResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool traverse() {
    bool ret = pyxlibPINVOKE.PYXIcosTraverser_traverse__SWIG_2(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool traverse(PYXIcosIndex startIndex, int nMaxResolution) {
    bool ret = pyxlibPINVOKE.PYXIcosTraverser_traverse__SWIG_3(swigCPtr, PYXIcosIndex.getCPtr(startIndex), nMaxResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool traverse(PYXIcosIndex startIndex) {
    bool ret = pyxlibPINVOKE.PYXIcosTraverser_traverse__SWIG_4(swigCPtr, PYXIcosIndex.getCPtr(startIndex));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGeometry(PYXGeometry_SPtr spGeom) {
    pyxlibPINVOKE.PYXIcosTraverser_setGeometry(swigCPtr, PYXGeometry_SPtr.getCPtr(spGeom));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum eTraversalResult {
    knContinue = 0,
    knAbort = 1,
    knPrune = 2
  }

}
