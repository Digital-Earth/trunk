/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXIndex : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXIndex(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXIndex obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXIndex() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXIndex(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.PYXIndex_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint knDigitMask {
    get {
      uint ret = pyxlibPINVOKE.PYXIndex_knDigitMask_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int knBitsPerDigit {
    get {
      int ret = pyxlibPINVOKE.PYXIndex_knBitsPerDigit_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PYXIndex() : this(pyxlibPINVOKE.new_PYXIndex__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXIndex(PYXIndex rhs) : this(pyxlibPINVOKE.new_PYXIndex__SWIG_1(PYXIndex.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXIndex(string strIndex) : this(pyxlibPINVOKE.new_PYXIndex__SWIG_2(pyxlibPINVOKE.UnmanagedString.Create(strIndex)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.PYXIndex_reset(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getResolution() {
    int ret = pyxlibPINVOKE.PYXIndex_getResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setResolution(int nResolution) {
    pyxlibPINVOKE.PYXIndex_setResolution(swigCPtr, nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string toString() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXIndex_toString(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public bool isNull() {
    bool ret = pyxlibPINVOKE.PYXIndex_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isAtOrigin() {
    bool ret = pyxlibPINVOKE.PYXIndex_isAtOrigin__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isAtOrigin(uint nDigitCount) {
    bool ret = pyxlibPINVOKE.PYXIndex_isAtOrigin__SWIG_1(swigCPtr, nDigitCount);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasVertexChildren() {
    bool ret = pyxlibPINVOKE.PYXIndex_hasVertexChildren(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void appendDigit(uint nDigit) {
    pyxlibPINVOKE.PYXIndex_appendDigit(swigCPtr, nDigit);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void appendPair(uint nHexDigits) {
    pyxlibPINVOKE.PYXIndex_appendPair(swigCPtr, nHexDigits);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prependDigit(uint nDigit) {
    pyxlibPINVOKE.PYXIndex_prependDigit(swigCPtr, nDigit);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prependPair(uint nHexDigits) {
    pyxlibPINVOKE.PYXIndex_prependPair(swigCPtr, nHexDigits);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void negate() {
    pyxlibPINVOKE.PYXIndex_negate(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isAncestorOf(PYXIndex index) {
    bool ret = pyxlibPINVOKE.PYXIndex_isAncestorOf(swigCPtr, PYXIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isDescendantOf(PYXIndex index) {
    bool ret = pyxlibPINVOKE.PYXIndex_isDescendantOf(swigCPtr, PYXIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint stripRight() {
    uint ret = pyxlibPINVOKE.PYXIndex_stripRight(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint stripRightPair() {
    uint ret = pyxlibPINVOKE.PYXIndex_stripRightPair(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint stripLeft() {
    uint ret = pyxlibPINVOKE.PYXIndex_stripLeft(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint stripLeftPair() {
    uint ret = pyxlibPINVOKE.PYXIndex_stripLeftPair(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void randomize(int nResolution) {
    pyxlibPINVOKE.PYXIndex_randomize(swigCPtr, nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getDigitCount() {
    int ret = pyxlibPINVOKE.PYXIndex_getDigitCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void append(PYXIndex index) {
    pyxlibPINVOKE.PYXIndex_append(swigCPtr, PYXIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDigit(int nPosition) {
    uint ret = pyxlibPINVOKE.PYXIndex_getDigit(swigCPtr, nPosition);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getLastDigit() {
    uint ret = pyxlibPINVOKE.PYXIndex_getLastDigit(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIndex subseq(int nPos, int nLen) {
    PYXIndex ret = new PYXIndex(pyxlibPINVOKE.PYXIndex_subseq__SWIG_0(swigCPtr, nPos, nLen), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIndex subseq(int nPos) {
    PYXIndex ret = new PYXIndex(pyxlibPINVOKE.PYXIndex_subseq__SWIG_1(swigCPtr, nPos), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint mostSignificant(SWIGTYPE_p_int pnPosition) {
    uint ret = pyxlibPINVOKE.PYXIndex_mostSignificant(swigCPtr, SWIGTYPE_p_int.getCPtr(pnPosition));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
