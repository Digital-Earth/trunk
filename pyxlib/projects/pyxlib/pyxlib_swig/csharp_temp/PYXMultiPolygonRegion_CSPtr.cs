/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXMultiPolygonRegion_CSPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXMultiPolygonRegion_CSPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXMultiPolygonRegion_CSPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXMultiPolygonRegion_CSPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXMultiPolygonRegion_CSPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXMultiPolygonRegion_CSPtr() : this(pyxlibPINVOKE.new_PYXMultiPolygonRegion_CSPtr__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXMultiPolygonRegion_CSPtr(PYXMultiPolygonRegion p, bool add_ref) : this(pyxlibPINVOKE.new_PYXMultiPolygonRegion_CSPtr__SWIG_1(PYXMultiPolygonRegion.getCPtr(p), add_ref), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXMultiPolygonRegion_CSPtr(PYXMultiPolygonRegion p) : this(pyxlibPINVOKE.new_PYXMultiPolygonRegion_CSPtr__SWIG_2(PYXMultiPolygonRegion.getCPtr(p)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXMultiPolygonRegion_CSPtr(PYXMultiPolygonRegion_CSPtr rhs) : this(pyxlibPINVOKE.new_PYXMultiPolygonRegion_CSPtr__SWIG_3(PYXMultiPolygonRegion_CSPtr.getCPtr(rhs)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_reset__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(PYXMultiPolygonRegion rhs) {
    pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_reset__SWIG_1(swigCPtr, PYXMultiPolygonRegion.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXMultiPolygonRegion get() {
    IntPtr cPtr = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_get(swigCPtr);
    PYXMultiPolygonRegion ret = (cPtr == IntPtr.Zero) ? null : new PYXMultiPolygonRegion(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXMultiPolygonRegion __ref__() {
    PYXMultiPolygonRegion ret = new PYXMultiPolygonRegion(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr___ref__(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXMultiPolygonRegion __deref__() {
    IntPtr cPtr = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr___deref__(swigCPtr);
    PYXMultiPolygonRegion ret = (cPtr == IntPtr.Zero) ? null : new PYXMultiPolygonRegion(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(PYXMultiPolygonRegion_CSPtr rhs) {
    pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_swap(swigCPtr, PYXMultiPolygonRegion_CSPtr.getCPtr(rhs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_isNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_isNotNull(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IRegion_SPtr clone() {
    IRegion_SPtr ret = new IRegion_SPtr(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getVerticesCount() {
    int ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getVerticesCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t getVisitor() {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getVisitor(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getDistanceToBorder(PYXCoord3DDouble location, double errorThreshold) {
    double ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getDistanceToBorder__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getDistanceToBorder(PYXCoord3DDouble location) {
    double ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getDistanceToBorder__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPointContained(PYXCoord3DDouble location, double errorThreshold) {
    bool ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_isPointContained(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXRegion.CellIntersectionState intersects(PYXIcosIndex index, bool asTile) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_intersects__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), asTile);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXRegion.CellIntersectionState intersects(PYXIcosIndex index) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_intersects__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXRegion.CellIntersectionState intersects(PYXBoundingCircle circle, double errorThreshold) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_intersects__SWIG_2(swigCPtr, PYXBoundingCircle.getCPtr(circle), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXRegion.CellIntersectionState intersects(PYXBoundingCircle circle) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_intersects__SWIG_3(swigCPtr, PYXBoundingCircle.getCPtr(circle));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void serializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer, SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t visitor) {
    pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_serializeVisitor(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer), SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t.getCPtr(visitor));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t deserializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer) {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_deserializeVisitor__SWIG_0(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t deserializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer, PYXIcosIndex index) {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_deserializeVisitor__SWIG_1(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer), PYXIcosIndex.getCPtr(index)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCoord3DDouble getExteriorPoint() {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getExteriorPoint(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getExteriorPointContained() {
    bool ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getExteriorPointContained(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getRingsCount() {
    int ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getRingsCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getRingVerticesCount(uint index) {
    int ret = pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getRingVerticesCount(swigCPtr, index);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXCoord3DDouble getRingVertex(uint ringIndex, uint vertexIndex) {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(pyxlibPINVOKE.PYXMultiPolygonRegion_CSPtr_getRingVertex(swigCPtr, ringIndex, vertexIndex), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
