/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXRhombus : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXRhombus(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXRhombus obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXRhombus() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXRhombus(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXRhombus() : this(pyxlibPINVOKE.new_PYXRhombus__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombus(int rootNumber) : this(pyxlibPINVOKE.new_PYXRhombus__SWIG_1(rootNumber), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombus(PYXCursor cursor) : this(pyxlibPINVOKE.new_PYXRhombus__SWIG_2(PYXCursor.getCPtr(cursor)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombus(PYXIcosIndex index, PYXMath.eHexDirection direction) : this(pyxlibPINVOKE.new_PYXRhombus__SWIG_3(PYXIcosIndex.getCPtr(index), (int)direction), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombus(PYXRhombus other) : this(pyxlibPINVOKE.new_PYXRhombus__SWIG_4(PYXRhombus.getCPtr(other)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombus getSubRhombus(int index) {
    PYXRhombus ret = new PYXRhombus(pyxlibPINVOKE.PYXRhombus_getSubRhombus__SWIG_0(swigCPtr, index), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXRhombus getSubRhombus(int u, int v) {
    PYXRhombus ret = new PYXRhombus(pyxlibPINVOKE.PYXRhombus_getSubRhombus__SWIG_1(swigCPtr, u, v), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXRhombus_Vector getSubRhombi() {
    PYXRhombus_Vector ret = new PYXRhombus_Vector(pyxlibPINVOKE.PYXRhombus_getSubRhombi(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIcosIndex getSubIndex(int u, int v) {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PYXRhombus_getSubIndex__SWIG_0(swigCPtr, u, v), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIcosIndex getSubIndex(int u, int v, int depth) {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PYXRhombus_getSubIndex__SWIG_1(swigCPtr, u, v, depth), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXIcosIndex getIndex(int vertex) {
    PYXIcosIndex ret = new PYXIcosIndex(pyxlibPINVOKE.PYXRhombus_getIndex(swigCPtr, vertex), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXMath.eHexDirection getDirection(int vertex) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXRhombus_getDirection(swigCPtr, vertex);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXMath.eHexDirection getRevDirection(int vertex) {
    PYXMath.eHexDirection ret = (PYXMath.eHexDirection)pyxlibPINVOKE.PYXRhombus_getRevDirection(swigCPtr, vertex);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInside(PYXIcosIndex index) {
    bool ret = pyxlibPINVOKE.PYXRhombus_isInside__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(PYXIcosIndex index) {
    bool ret = pyxlibPINVOKE.PYXRhombus_intersects(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInside(PYXIcosIndex index, out int coordU, out int coordV) {
    bool ret = pyxlibPINVOKE.PYXRhombus_isInside__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index), out coordU, out coordV);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInside(PYXIcosIndex index, out double coordU, out double coordV) {
    bool ret = pyxlibPINVOKE.PYXRhombus_isInside__SWIG_2(swigCPtr, PYXIcosIndex.getCPtr(index), out coordU, out coordV);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getUVMax(int resDepth) {
    int ret = pyxlibPINVOKE.PYXRhombus_getUVMax(swigCPtr, resDepth);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void test() {
    pyxlibPINVOKE.PYXRhombus_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
