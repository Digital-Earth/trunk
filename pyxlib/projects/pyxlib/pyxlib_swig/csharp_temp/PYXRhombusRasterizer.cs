/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXRhombusRasterizer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXRhombusRasterizer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXRhombusRasterizer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXRhombusRasterizer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXRhombusRasterizer(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXRhombusRasterizer(PYXRhombus rhombus, int resolutionDepth) : this(pyxlibPINVOKE.new_PYXRhombusRasterizer__SWIG_0(PYXRhombus.getCPtr(rhombus), resolutionDepth), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXRhombusRasterizer(PYXRhombus rhombus, int resolutionDepth, int tileDepth) : this(pyxlibPINVOKE.new_PYXRhombusRasterizer__SWIG_1(PYXRhombus.getCPtr(rhombus), resolutionDepth, tileDepth), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCellResolution() {
    int ret = pyxlibPINVOKE.PYXRhombusRasterizer_getCellResolution(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXTile_SPtr getNeededTile() {
    PYXTile_SPtr ret = new PYXTile_SPtr(pyxlibPINVOKE.PYXRhombusRasterizer_getNeededTile(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isReady() {
    bool ret = pyxlibPINVOKE.PYXRhombusRasterizer_isReady(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTileGeometry(PYXTile_SPtr tile, PYXGeometry_SPtr geometry) {
    pyxlibPINVOKE.PYXRhombusRasterizer_setTileGeometry(swigCPtr, PYXTile_SPtr.getCPtr(tile), PYXGeometry_SPtr.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGeometry(PYXGeometry_SPtr geometry) {
    pyxlibPINVOKE.PYXRhombusRasterizer_setGeometry(swigCPtr, PYXGeometry_SPtr.getCPtr(geometry));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string rasterToBase64() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PYXRhombusRasterizer_rasterToBase64(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

}
