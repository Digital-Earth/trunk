/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXValueMath : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXValueMath(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXValueMath obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        throw new MethodAccessException("C++ destructor does not have public access");
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void test() {
    pyxlibPINVOKE.PYXValueMath_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void zero(PYXValue val) {
    pyxlibPINVOKE.PYXValueMath_zero(PYXValue.getCPtr(val));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignInto(PYXValue assignIntoVal, PYXValue assignMe) {
    pyxlibPINVOKE.PYXValueMath_assignInto(PYXValue.getCPtr(assignIntoVal), PYXValue.getCPtr(assignMe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addInto(PYXValue addIntoVal, PYXValue addMe) {
    pyxlibPINVOKE.PYXValueMath_addInto__SWIG_0(PYXValue.getCPtr(addIntoVal), PYXValue.getCPtr(addMe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addInto(PYXValue addIntoVal, double fAddMe) {
    pyxlibPINVOKE.PYXValueMath_addInto__SWIG_1(PYXValue.getCPtr(addIntoVal), fAddMe);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subtractFrom(PYXValue subtractFromVal, PYXValue subtractMe) {
    pyxlibPINVOKE.PYXValueMath_subtractFrom__SWIG_0(PYXValue.getCPtr(subtractFromVal), PYXValue.getCPtr(subtractMe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subtractFrom(PYXValue subtractFromVal, double fSubtractMe) {
    pyxlibPINVOKE.PYXValueMath_subtractFrom__SWIG_1(PYXValue.getCPtr(subtractFromVal), fSubtractMe);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void divideBy(PYXValue divideVal, PYXValue divideByMe) {
    pyxlibPINVOKE.PYXValueMath_divideBy__SWIG_0(PYXValue.getCPtr(divideVal), PYXValue.getCPtr(divideByMe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void divideBy(PYXValue divideVal, double fDivideByMe) {
    pyxlibPINVOKE.PYXValueMath_divideBy__SWIG_1(PYXValue.getCPtr(divideVal), fDivideByMe);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void multiplyBy(PYXValue multiplyVal, PYXValue multiplyByMe) {
    pyxlibPINVOKE.PYXValueMath_multiplyBy__SWIG_0(PYXValue.getCPtr(multiplyVal), PYXValue.getCPtr(multiplyByMe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void multiplyBy(PYXValue multiplyVal, double fMultiplyByMe) {
    pyxlibPINVOKE.PYXValueMath_multiplyBy__SWIG_1(PYXValue.getCPtr(multiplyVal), fMultiplyByMe);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
