/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXValueTransform : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PYXValueTransform(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXValueTransform obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXValueTransform() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXValueTransform(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public PYXValueTransform(SWIGTYPE_p_std__mapTPYXValue_PYXValue_t transform, bool exactMatch) : this(pyxlibPINVOKE.new_PYXValueTransform(SWIGTYPE_p_std__mapTPYXValue_PYXValue_t.getCPtr(transform), exactMatch), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXValue transform(PYXValue valIn) {
    PYXValue ret = new PYXValue(pyxlibPINVOKE.PYXValueTransform_transform(swigCPtr, PYXValue.getCPtr(valIn)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt countFeatures(SWIGTYPE_p_std__mapTPYXValue_PYXValue_t__const_iterator it, PYXHistogram_SPtr histogram) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.PYXValueTransform_countFeatures(swigCPtr, SWIGTYPE_p_std__mapTPYXValue_PYXValue_t__const_iterator.getCPtr(it), PYXHistogram_SPtr.getCPtr(histogram)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapTPYXValue_PYXValue_t getTransformValues() {
    SWIGTYPE_p_std__mapTPYXValue_PYXValue_t ret = new SWIGTYPE_p_std__mapTPYXValue_PYXValue_t(pyxlibPINVOKE.PYXValueTransform_getTransformValues(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
