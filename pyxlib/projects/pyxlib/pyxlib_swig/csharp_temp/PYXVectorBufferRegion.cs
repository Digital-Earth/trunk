/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXVectorBufferRegion : PYXVectorRegion {
  private HandleRef swigCPtr;

  public PYXVectorBufferRegion(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXVectorBufferRegionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXVectorBufferRegion obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXVectorBufferRegion() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXVectorBufferRegion(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override IRegion_SPtr clone() {
    IRegion_SPtr ret = new IRegion_SPtr(pyxlibPINVOKE.PYXVectorBufferRegion_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getVerticesCount() {
    int ret = pyxlibPINVOKE.PYXVectorBufferRegion_getVerticesCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getDistanceToBorder(PYXCoord3DDouble location, double errorThreshold) {
    double ret = pyxlibPINVOKE.PYXVectorBufferRegion_getDistanceToBorder__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getDistanceToBorder(PYXCoord3DDouble location) {
    double ret = pyxlibPINVOKE.PYXVectorBufferRegion_getDistanceToBorder__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPointContained(PYXCoord3DDouble location, double errorThreshold) {
    bool ret = pyxlibPINVOKE.PYXVectorBufferRegion_isPointContained__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPointContained(PYXCoord3DDouble location) {
    bool ret = pyxlibPINVOKE.PYXVectorBufferRegion_isPointContained__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXVectorBufferRegion_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_boost__intrusive_ptrTPYXVectorBufferRegion_t create(PYXVectorRegion_SPtr region, double bufferRadius) {
    SWIGTYPE_p_boost__intrusive_ptrTPYXVectorBufferRegion_t ret = new SWIGTYPE_p_boost__intrusive_ptrTPYXVectorBufferRegion_t(pyxlibPINVOKE.PYXVectorBufferRegion_create(PYXVectorRegion_SPtr.getCPtr(region), bufferRadius), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PYXVectorBufferRegion(PYXVectorRegion_SPtr region, double bufferRadius) : this(pyxlibPINVOKE.new_PYXVectorBufferRegion__SWIG_0(PYXVectorRegion_SPtr.getCPtr(region), bufferRadius), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public PYXVectorBufferRegion(SWIGTYPE_p_boost__intrusive_ptrTPYXVectorBufferRegion_t region, double bufferRadius) : this(pyxlibPINVOKE.new_PYXVectorBufferRegion__SWIG_1(SWIGTYPE_p_boost__intrusive_ptrTPYXVectorBufferRegion_t.getCPtr(region), bufferRadius), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
