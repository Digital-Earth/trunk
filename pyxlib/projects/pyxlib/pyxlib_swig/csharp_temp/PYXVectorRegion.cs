/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PYXVectorRegion : PYXRegion {
  private HandleRef swigCPtr;

  public PYXVectorRegion(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PYXVectorRegionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PYXVectorRegion obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PYXVectorRegion() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PYXVectorRegion(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual double getDistanceToBorder(PYXCoord3DDouble location, double errorThreshold) {
    double ret = pyxlibPINVOKE.PYXVectorRegion_getDistanceToBorder__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getDistanceToBorder(PYXCoord3DDouble location) {
    double ret = pyxlibPINVOKE.PYXVectorRegion_getDistanceToBorder__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isPointContained(PYXCoord3DDouble location, double errorThreshold) {
    bool ret = pyxlibPINVOKE.PYXVectorRegion_isPointContained__SWIG_0(swigCPtr, PYXCoord3DDouble.getCPtr(location), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isPointContained(PYXCoord3DDouble location) {
    bool ret = pyxlibPINVOKE.PYXVectorRegion_isPointContained__SWIG_1(swigCPtr, PYXCoord3DDouble.getCPtr(location));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXRegion.CellIntersectionState intersects(PYXIcosIndex index, bool asTile) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXVectorRegion_intersects__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), asTile);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXRegion.CellIntersectionState intersects(PYXIcosIndex index) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXVectorRegion_intersects__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXRegion.CellIntersectionState intersects(PYXBoundingCircle circle, double errorThreshold) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXVectorRegion_intersects__SWIG_2(swigCPtr, PYXBoundingCircle.getCPtr(circle), errorThreshold);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXRegion.CellIntersectionState intersects(PYXBoundingCircle circle) {
    PYXRegion.CellIntersectionState ret = (PYXRegion.CellIntersectionState)pyxlibPINVOKE.PYXVectorRegion_intersects__SWIG_3(swigCPtr, PYXBoundingCircle.getCPtr(circle));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXBoundingCircle getBoundingCircle() {
    PYXBoundingCircle ret = new PYXBoundingCircle(pyxlibPINVOKE.PYXVectorRegion_getBoundingCircle(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t getVisitor() {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXVectorRegion_getVisitor(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void serializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer, SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t visitor) {
    pyxlibPINVOKE.PYXVectorRegion_serializeVisitor(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer), SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t.getCPtr(visitor));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t deserializeVisitor(SWIGTYPE_p_PYXWireBuffer buffer) {
    SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t ret = new SWIGTYPE_p_boost__intrusive_ptrTIRegionVisitor_t(pyxlibPINVOKE.PYXVectorRegion_deserializeVisitor(swigCPtr, SWIGTYPE_p_PYXWireBuffer.getCPtr(buffer)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
