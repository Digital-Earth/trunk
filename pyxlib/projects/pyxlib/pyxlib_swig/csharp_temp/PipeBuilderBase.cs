/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PipeBuilderBase : IPipeBuilder {
  private HandleRef swigCPtr;

  public PipeBuilderBase(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.PipeBuilderBaseUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PipeBuilderBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PipeBuilderBase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PipeBuilderBase(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static string kstrPipeBuilderIni {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeBuilderBase_kstrPipeBuilderIni_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string kstrPipeBuilderPropScope {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeBuilderBase_kstrPipeBuilderPropScope_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string kstrPipeBuilderPropKey {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeBuilderBase_kstrPipeBuilderPropKey_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string kstrPipeBuilderDefaultPropValue {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeBuilderBase_kstrPipeBuilderDefaultPropValue_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static string kstrPipeBuilderPropDescription {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeBuilderBase_kstrPipeBuilderPropDescription_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public override bool isDataSourceSupported(string strPath, IPipeBuilder.eCheckOptions options) {
    bool ret = pyxlibPINVOKE.PipeBuilderBase_isDataSourceSupported(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strPath), (int)options);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PYXCatalog_CSPtr buildCatalog(string strPath) {
    PYXCatalog_CSPtr ret = new PYXCatalog_CSPtr(pyxlibPINVOKE.PipeBuilderBase_buildCatalog(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strPath)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setConfig(string key, string value) {
    pyxlibPINVOKE.PipeBuilderBase_setConfig(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(key), pyxlibPINVOKE.UnmanagedString.Create(value));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override IProcess_SPtr buildPipeline(PYXDataSet_SPtr pDataSet) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeBuilderBase_buildPipeline(swigCPtr, PYXDataSet_SPtr.getCPtr(pDataSet)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess_SPtr getDefaultSampler() {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeBuilderBase_getDefaultSampler(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
