/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PipeManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PipeManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PipeManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PipeManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PipeManager(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static IProcess_SPtr getProcess(ProcRef procref, bool bInitialize) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_getProcess__SWIG_0(ProcRef.getCPtr(procref), bInitialize), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr getProcess(ProcRef procref) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_getProcess__SWIG_1(ProcRef.getCPtr(procref)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void notifyFinalize(IProcess_SPtr spProc) {
    pyxlibPINVOKE.PipeManager_notifyFinalize(IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Notifier getWrappedProcessNotifier() {
    IntPtr cPtr = pyxlibPINVOKE.PipeManager_getWrappedProcessNotifier();
    Notifier ret = (cPtr == IntPtr.Zero) ? null : new Notifier(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Notifier getProcessProcessingNotifier() {
    IntPtr cPtr = pyxlibPINVOKE.PipeManager_getProcessProcessingNotifier();
    Notifier ret = (cPtr == IntPtr.Zero) ? null : new Notifier(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void pushProcessResolver(ProcessResolver_SPtr spProcResolver) {
    pyxlibPINVOKE.PipeManager_pushProcessResolver(ProcessResolver_SPtr.getCPtr(spProcResolver));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ProcessResolver_SPtr popProcessResolver() {
    ProcessResolver_SPtr ret = new ProcessResolver_SPtr(pyxlibPINVOKE.PipeManager_popProcessResolver(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void clearProcessResolvers() {
    pyxlibPINVOKE.PipeManager_clearProcessResolvers();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Vector_IProcess import(IProcess_SPtr spProc) {
    Vector_IProcess ret = new Vector_IProcess(pyxlibPINVOKE.PipeManager_import__SWIG_0(IProcess_SPtr.getCPtr(spProc)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector_IProcess import(IProcess_SPtr spProc, Process_Process_Map cloneMap) {
    Vector_IProcess ret = new Vector_IProcess(pyxlibPINVOKE.PipeManager_import__SWIG_1(IProcess_SPtr.getCPtr(spProc), Process_Process_Map.getCPtr(cloneMap)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector_IProcess import(string strFileURI) {
    Vector_IProcess ret = new Vector_IProcess(pyxlibPINVOKE.PipeManager_import__SWIG_2(pyxlibPINVOKE.UnmanagedString.Create(strFileURI)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector_IProcess importStr(string strXMLPipeline) {
    Vector_IProcess ret = new Vector_IProcess(pyxlibPINVOKE.PipeManager_importStr(pyxlibPINVOKE.UnmanagedString.Create(strXMLPipeline)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void releaseMemoryIfPossible() {
    pyxlibPINVOKE.PipeManager_releaseMemoryIfPossible();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_boost__filesystem__path getProcessPath() {
    SWIGTYPE_p_boost__filesystem__path ret = new SWIGTYPE_p_boost__filesystem__path(pyxlibPINVOKE.PipeManager_getProcessPath(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void writeProcess(SWIGTYPE_p_std__ostream arg0, IProcess_SPtr spProc) {
    pyxlibPINVOKE.PipeManager_writeProcess(SWIGTYPE_p_std__ostream.getCPtr(arg0), IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void writeProcessToFile(string strURI, IProcess_SPtr spProc) {
    pyxlibPINVOKE.PipeManager_writeProcessToFile(pyxlibPINVOKE.UnmanagedString.Create(strURI), IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void writeProcessToString(string pStr, IProcess_SPtr spProc) {
    pyxlibPINVOKE.PipeManager_writeProcessToString(pyxlibPINVOKE.UnmanagedString.Create(pStr), IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void writePipeline(SWIGTYPE_p_std__ostream arg0, IProcess_SPtr spPipe) {
    pyxlibPINVOKE.PipeManager_writePipeline(SWIGTYPE_p_std__ostream.getCPtr(arg0), IProcess_SPtr.getCPtr(spPipe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void writePipelineToFile(string strURI, IProcess_SPtr spPipe) {
    pyxlibPINVOKE.PipeManager_writePipelineToFile(pyxlibPINVOKE.UnmanagedString.Create(strURI), IProcess_SPtr.getCPtr(spPipe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void writePipelineToString(string pStr, IProcess_SPtr spPipe) {
    pyxlibPINVOKE.PipeManager_writePipelineToString(pyxlibPINVOKE.UnmanagedString.Create(pStr), IProcess_SPtr.getCPtr(spPipe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IProcess_SPtr readProcess(SWIGTYPE_p_std__istream arg0) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_readProcess(SWIGTYPE_p_std__istream.getCPtr(arg0)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr readProcessFromFile(string strURI) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_readProcessFromFile(pyxlibPINVOKE.UnmanagedString.Create(strURI)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr readProcessFromString(string xmlString) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_readProcessFromString(pyxlibPINVOKE.UnmanagedString.Create(xmlString)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr readPipeline(SWIGTYPE_p_std__istream arg0) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_readPipeline(SWIGTYPE_p_std__istream.getCPtr(arg0)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr readPipelineFromFile(string strURI) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_readPipelineFromFile(pyxlibPINVOKE.UnmanagedString.Create(strURI)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr readPipelineFromString(string xmlString) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeManager_readPipelineFromString(pyxlibPINVOKE.UnmanagedString.Create(xmlString)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool exists() {
    bool ret = pyxlibPINVOKE.PipeManager_exists();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string writeProcessToNewString(IProcess_SPtr spProc) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeManager_writeProcessToNewString(IProcess_SPtr.getCPtr(spProc)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static string writePipelineToNewString(IProcess_SPtr spPipe) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeManager_writePipelineToNewString(IProcess_SPtr.getCPtr(spPipe)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public PipeManager() : this(pyxlibPINVOKE.new_PipeManager(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
