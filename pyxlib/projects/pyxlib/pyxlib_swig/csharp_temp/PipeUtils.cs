/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PipeUtils : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PipeUtils(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(PipeUtils obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PipeUtils() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_PipeUtils(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static void pruneNonRoots(Vector_IProcess pVecProc) {
    pyxlibPINVOKE.PipeUtils_pruneNonRoots(Vector_IProcess.getCPtr(pVecProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IProcess_SPtr cloneProcess(IProcess_SPtr spProc) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeUtils_cloneProcess(IProcess_SPtr.getCPtr(spProc)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr clonePipeline(IProcess_SPtr spProc) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeUtils_clonePipeline(IProcess_SPtr.getCPtr(spProc)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr modifyPipeline(IProcess_SPtr spPipe, IProcess_SPtr spProc) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeUtils_modifyPipeline__SWIG_0(IProcess_SPtr.getCPtr(spPipe), IProcess_SPtr.getCPtr(spProc)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr modifyPipeline(IProcess_SPtr spPipe, IProcess_SPtr spProc, Process_Process_Map cloneMap) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeUtils_modifyPipeline__SWIG_1(IProcess_SPtr.getCPtr(spPipe), IProcess_SPtr.getCPtr(spProc), Process_Process_Map.getCPtr(cloneMap)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__ostream pipeToTree(SWIGTYPE_p_std__ostream arg0, IProcess_SPtr spProc, string strPrefix) {
    SWIGTYPE_p_std__ostream ret = new SWIGTYPE_p_std__ostream(pyxlibPINVOKE.PipeUtils_pipeToTree__SWIG_0(SWIGTYPE_p_std__ostream.getCPtr(arg0), IProcess_SPtr.getCPtr(spProc), pyxlibPINVOKE.UnmanagedString.Create(strPrefix)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__ostream pipeToTree(SWIGTYPE_p_std__ostream arg0, IProcess_SPtr spProc) {
    SWIGTYPE_p_std__ostream ret = new SWIGTYPE_p_std__ostream(pyxlibPINVOKE.PipeUtils_pipeToTree__SWIG_1(SWIGTYPE_p_std__ostream.getCPtr(arg0), IProcess_SPtr.getCPtr(spProc)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string pipeToTree(IProcess_SPtr spProc) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeUtils_pipeToTree__SWIG_2(IProcess_SPtr.getCPtr(spProc)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static IProcess_SPtr findFirstError(IProcess_SPtr spPipe, string strErrorID) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeUtils_findFirstError__SWIG_0(IProcess_SPtr.getCPtr(spPipe), pyxlibPINVOKE.UnmanagedString.Create(strErrorID)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IProcess_SPtr findFirstError(IProcess_SPtr spPipe) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.PipeUtils_findFirstError__SWIG_1(IProcess_SPtr.getCPtr(spPipe)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int findProcsOfType(IProcess_SPtr spPipe, GUID interfaceID, Vector_IUnknown vecObjects) {
    int ret = pyxlibPINVOKE.PipeUtils_findProcsOfType(IProcess_SPtr.getCPtr(spPipe), GUID.getCPtr(interfaceID), Vector_IUnknown.getCPtr(vecObjects));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int findProcsOfClass(IProcess_SPtr spPipe, GUID classID, Vector_IUnknown vecObjects) {
    int ret = pyxlibPINVOKE.PipeUtils_findProcsOfClass(IProcess_SPtr.getCPtr(spPipe), GUID.getCPtr(classID), Vector_IUnknown.getCPtr(vecObjects));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool findAsParameter(IProcess_SPtr spProc, ProcRef procref) {
    bool ret = pyxlibPINVOKE.PipeUtils_findAsParameter(IProcess_SPtr.getCPtr(spProc), ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool doesPipelineContainProcRef(IProcess_SPtr spProc, ProcRef procref) {
    bool ret = pyxlibPINVOKE.PipeUtils_doesPipelineContainProcRef(IProcess_SPtr.getCPtr(spProc), ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isPipelineIdentityStable(IProcess_SPtr spPipe) {
    bool ret = pyxlibPINVOKE.PipeUtils_isPipelineIdentityStable(IProcess_SPtr.getCPtr(spPipe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void waitUntilPipelineIdentityStable(IProcess_SPtr spPipe) {
    pyxlibPINVOKE.PipeUtils_waitUntilPipelineIdentityStable(IProcess_SPtr.getCPtr(spPipe));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string getProcessIdentityCacheDirectory(IProcess_SPtr process) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.PipeUtils_getProcessIdentityCacheDirectory(IProcess_SPtr.getCPtr(process)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public PipeUtils() : this(pyxlibPINVOKE.new_PipeUtils(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
