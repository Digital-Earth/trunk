/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcessList : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ProcessList(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = false;
    swigCPtr = new HandleRef(this, cPtr);
    pyxlib.intrusive_ptr_add_ref(this);
  }

  public static HandleRef getCPtr(ProcessList obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcessList() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero) {
        pyxlib.intrusive_ptr_release(this);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static ProcessList_SPtr create() {
    ProcessList_SPtr ret = new ProcessList_SPtr(pyxlibPINVOKE.ProcessList_create(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasProcs() {
    bool ret = pyxlibPINVOKE.ProcessList_hasProcs(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(ProcRef procref) {
    bool ret = pyxlibPINVOKE.ProcessList_contains(swigCPtr, ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addProc(ProcRef procref) {
    pyxlibPINVOKE.ProcessList_addProc__SWIG_0(swigCPtr, ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addProc(IProcess_SPtr proc) {
    pyxlibPINVOKE.ProcessList_addProc__SWIG_1(swigCPtr, IProcess_SPtr.getCPtr(proc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeProc(ProcRef procref) {
    pyxlibPINVOKE.ProcessList_removeProc(swigCPtr, ProcRef.getCPtr(procref));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    pyxlibPINVOKE.ProcessList_clear(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int count() {
    int ret = pyxlibPINVOKE.ProcessList_count(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getProcessRefs(Vector_ProcRef vecProcs) {
    pyxlibPINVOKE.ProcessList_getProcessRefs(swigCPtr, Vector_ProcRef.getCPtr(vecProcs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getProcesses(Vector_IProcess vecProcs) {
    pyxlibPINVOKE.ProcessList_getProcesses(swigCPtr, Vector_IProcess.getCPtr(vecProcs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProcesses(Vector_IProcess vecProcs) {
    pyxlibPINVOKE.ProcessList_setProcesses(swigCPtr, Vector_IProcess.getCPtr(vecProcs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Notifier getListChangedNotifier() {
    Notifier ret = new Notifier(pyxlibPINVOKE.ProcessList_getListChangedNotifier(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
