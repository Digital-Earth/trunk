/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcessResolver : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ProcessResolver(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ProcessResolver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcessResolver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_ProcessResolver(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual IProcess_SPtr resolve(ProcRef procref) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.ProcessResolver_resolve(swigCPtr, ProcRef.getCPtr(procref)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess_SPtr notifyResolve(IProcess_SPtr spProc) {
    IProcess_SPtr ret = new IProcess_SPtr(pyxlibPINVOKE.ProcessResolver_notifyResolve(swigCPtr, IProcess_SPtr.getCPtr(spProc)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void notifyFinalize(IProcess_SPtr spProc) {
    pyxlibPINVOKE.ProcessResolver_notifyFinalize(swigCPtr, IProcess_SPtr.getCPtr(spProc));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessResolver() : this(pyxlibPINVOKE.new_ProcessResolver(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
