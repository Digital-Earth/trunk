/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ProcessSpec : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ProcessSpec(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = false;
    swigCPtr = new HandleRef(this, cPtr);
    pyxlib.intrusive_ptr_add_ref(this);
  }

  public static HandleRef getCPtr(ProcessSpec obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcessSpec() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero) {
        pyxlib.intrusive_ptr_release(this);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static ProcessSpec_SPtr create(GUID rclsid, Vector_GUID vecOutputIIDs, SWIGTYPE_p_std__vectorTboost__intrusive_ptrTParameterSpec_t_t vecParamSpec, string strName, string strDescription) {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.ProcessSpec_create__SWIG_0(GUID.getCPtr(rclsid), Vector_GUID.getCPtr(vecOutputIIDs), SWIGTYPE_p_std__vectorTboost__intrusive_ptrTParameterSpec_t_t.getCPtr(vecParamSpec), pyxlibPINVOKE.UnmanagedString.Create(strName), pyxlibPINVOKE.UnmanagedString.Create(strDescription)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProcessSpec_SPtr create(string xmlDefinition) {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.ProcessSpec_create__SWIG_1(pyxlibPINVOKE.UnmanagedString.Create(xmlDefinition)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void write(SWIGTYPE_p_std__ostream arg0, ProcessSpec procSpec) {
    pyxlibPINVOKE.ProcessSpec_write__SWIG_0(SWIGTYPE_p_std__ostream.getCPtr(arg0), ProcessSpec.getCPtr(procSpec));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read(SWIGTYPE_p_std__istream arg0, ProcessSpec procSpec) {
    pyxlibPINVOKE.ProcessSpec_read__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(arg0), ProcessSpec.getCPtr(procSpec));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string write(ProcessSpec procSpec) {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessSpec_write__SWIG_1(ProcessSpec.getCPtr(procSpec)));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public static void read(string xmlDefinition, ProcessSpec procSpec) {
    pyxlibPINVOKE.ProcessSpec_read__SWIG_1(pyxlibPINVOKE.UnmanagedString.Create(xmlDefinition), ProcessSpec.getCPtr(procSpec));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector_GUID getOutputInterfaces() {
    Vector_GUID ret = new Vector_GUID(pyxlibPINVOKE.ProcessSpec_getOutputInterfaces(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID getClass() {
    GUID ret = new GUID(pyxlibPINVOKE.ProcessSpec_getClass(swigCPtr), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getParameterCount() {
    int ret = pyxlibPINVOKE.ProcessSpec_getParameterCount(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParameterSpec_SPtr getParameter(int n) {
    ParameterSpec_SPtr ret = new ParameterSpec_SPtr(pyxlibPINVOKE.ProcessSpec_getParameter(swigCPtr, n), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getName() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessSpec_getName(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getDescription() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessSpec_getDescription(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public string getCategory() {
  // Generated from typemap(csout) const string &
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.ProcessSpec_getCategory(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public bool providesOutputType(GUID riid) {
    bool ret = pyxlibPINVOKE.ProcessSpec_providesOutputType(swigCPtr, GUID.getCPtr(riid));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasInputType(GUID riid) {
    bool ret = pyxlibPINVOKE.ProcessSpec_hasInputType(swigCPtr, GUID.getCPtr(riid));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOutputIIDs(Vector_GUID vecOutputIIDs) {
    pyxlibPINVOKE.ProcessSpec_setOutputIIDs(swigCPtr, Vector_GUID.getCPtr(vecOutputIIDs));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setClass(GUID rclsid) {
    pyxlibPINVOKE.ProcessSpec_setClass(swigCPtr, GUID.getCPtr(rclsid));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setName(string strName) {
    pyxlibPINVOKE.ProcessSpec_setName(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDescription(string strDescription) {
    pyxlibPINVOKE.ProcessSpec_setDescription(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strDescription));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCategory(string strCategory) {
    pyxlibPINVOKE.ProcessSpec_setCategory(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strCategory));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setParameterSpecs(SWIGTYPE_p_std__vectorTboost__intrusive_ptrTParameterSpec_t_t vecParamSpec) {
    pyxlibPINVOKE.ProcessSpec_setParameterSpecs(swigCPtr, SWIGTYPE_p_std__vectorTboost__intrusive_ptrTParameterSpec_t_t.getCPtr(vecParamSpec));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
