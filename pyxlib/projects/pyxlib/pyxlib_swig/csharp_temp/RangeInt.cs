/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RangeInt : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public RangeInt(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(RangeInt obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RangeInt() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_RangeInt(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public int min {
    set {
      pyxlibPINVOKE.RangeInt_min_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = pyxlibPINVOKE.RangeInt_min_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int max {
    set {
      pyxlibPINVOKE.RangeInt_max_set(swigCPtr, value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = pyxlibPINVOKE.RangeInt_max_get(swigCPtr);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_RangeBorderType minType {
    set {
      pyxlibPINVOKE.RangeInt_minType_set(swigCPtr, SWIGTYPE_p_RangeBorderType.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_RangeBorderType ret = new SWIGTYPE_p_RangeBorderType(pyxlibPINVOKE.RangeInt_minType_get(swigCPtr), true);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_RangeBorderType maxType {
    set {
      pyxlibPINVOKE.RangeInt_maxType_set(swigCPtr, SWIGTYPE_p_RangeBorderType.getCPtr(value));
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_RangeBorderType ret = new SWIGTYPE_p_RangeBorderType(pyxlibPINVOKE.RangeInt_maxType_get(swigCPtr), true);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static RangeInt createClosedOpen(int min, int max) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.RangeInt_createClosedOpen(min, max), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RangeInt createClosedClosed(int min, int max) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.RangeInt_createClosedClosed(min, max), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt() : this(pyxlibPINVOKE.new_RangeInt__SWIG_0(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeInt(int value) : this(pyxlibPINVOKE.new_RangeInt__SWIG_1(value), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeInt(int _min, int _max, SWIGTYPE_p_RangeBorderType _minType, SWIGTYPE_p_RangeBorderType _maxType) : this(pyxlibPINVOKE.new_RangeInt__SWIG_2(_min, _max, SWIGTYPE_p_RangeBorderType.getCPtr(_minType), SWIGTYPE_p_RangeBorderType.getCPtr(_maxType)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public RangeInt(RangeInt other) : this(pyxlibPINVOKE.new_RangeInt__SWIG_3(RangeInt.getCPtr(other)), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int middle() {
    int ret = pyxlibPINVOKE.RangeInt_middle(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool single() {
    bool ret = pyxlibPINVOKE.RangeInt_single(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool global() {
    bool ret = pyxlibPINVOKE.RangeInt_global(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool infinite() {
    bool ret = pyxlibPINVOKE.RangeInt_infinite(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(int value) {
    bool ret = pyxlibPINVOKE.RangeInt_contains__SWIG_0(swigCPtr, value);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(RangeInt range) {
    bool ret = pyxlibPINVOKE.RangeInt_contains__SWIG_1(swigCPtr, RangeInt.getCPtr(range));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(RangeInt range) {
    bool ret = pyxlibPINVOKE.RangeInt_intersects(swigCPtr, RangeInt.getCPtr(range));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt lowerHalf() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.RangeInt_lowerHalf(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt higherHalf() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.RangeInt_higherHalf(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt normalize() {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.RangeInt_normalize(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RangeInt normalizeWith(RangeInt other) {
    RangeInt ret = new RangeInt(pyxlibPINVOKE.RangeInt_normalizeWith(swigCPtr, RangeInt.getCPtr(other)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
