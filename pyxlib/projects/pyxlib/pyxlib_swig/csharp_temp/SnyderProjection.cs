/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SnyderProjection : ProjectionMethod {
  private HandleRef swigCPtr;

  public SnyderProjection(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.SnyderProjectionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(SnyderProjection obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        throw new MethodAccessException("C++ destructor does not have public access");
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.SnyderProjection_clsid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.SnyderProjection_aiid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int niid {
    get {
      int ret = pyxlibPINVOKE.SnyderProjection_niid_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override uint AddRef() {
    uint ret = pyxlibPINVOKE.SnyderProjection_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint Release() {
    uint ret = pyxlibPINVOKE.SnyderProjection_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double kfUnitRadianDistance {
    set {
      pyxlibPINVOKE.SnyderProjection_kfUnitRadianDistance_set(value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = pyxlibPINVOKE.SnyderProjection_kfUnitRadianDistance_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double kfUnitMetreDistance {
    set {
      pyxlibPINVOKE.SnyderProjection_kfUnitMetreDistance_set(value);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = pyxlibPINVOKE.SnyderProjection_kfUnitMetreDistance_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void test() {
    pyxlibPINVOKE.SnyderProjection_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SnyderProjection getInstance() {
    IntPtr cPtr = pyxlibPINVOKE.SnyderProjection_getInstance();
    SnyderProjection ret = (cPtr == IntPtr.Zero) ? null : new SnyderProjection(cPtr, false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ICoordConverter_SPtr clone() {
    ICoordConverter_SPtr ret = new ICoordConverter_SPtr(pyxlibPINVOKE.SnyderProjection_clone(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void nativeToPYXIS(PYXCoord2DDouble native, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.SnyderProjection_nativeToPYXIS__SWIG_0(swigCPtr, PYXCoord2DDouble.getCPtr(native), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void pyxisToNative(PYXIcosIndex index, PYXCoord2DDouble pNative) {
    pyxlibPINVOKE.SnyderProjection_pyxisToNative__SWIG_0(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool tryPyxisToNative(PYXIcosIndex index, PYXCoord2DDouble pNative) {
    bool ret = pyxlibPINVOKE.SnyderProjection_tryPyxisToNative(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void nativeToPYXIS(CoordLatLon ll, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.SnyderProjection_nativeToPYXIS__SWIG_1(swigCPtr, CoordLatLon.getCPtr(ll), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void pyxisToNative(PYXIcosIndex index, CoordLatLon pll) {
    pyxlibPINVOKE.SnyderProjection_pyxisToNative__SWIG_1(swigCPtr, PYXIcosIndex.getCPtr(index), CoordLatLon.getCPtr(pll));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void nativeToLatLon(PYXCoord2DDouble native, CoordLatLon pLatLon) {
    pyxlibPINVOKE.SnyderProjection_nativeToLatLon(swigCPtr, PYXCoord2DDouble.getCPtr(native), CoordLatLon.getCPtr(pLatLon));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void latLonToNative(CoordLatLon latLon, PYXCoord2DDouble pNative) {
    pyxlibPINVOKE.SnyderProjection_latLonToNative(swigCPtr, CoordLatLon.getCPtr(latLon), PYXCoord2DDouble.getCPtr(pNative));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isProjected() {
    bool ret = pyxlibPINVOKE.SnyderProjection_isProjected(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void xyzToPYXIS(PYXCoord3DDouble coord, PYXIcosIndex pIndex, int nResolution) {
    pyxlibPINVOKE.SnyderProjection_xyzToPYXIS(swigCPtr, PYXCoord3DDouble.getCPtr(coord), PYXIcosIndex.getCPtr(pIndex), nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void pyxisToXYZ(PYXIcosIndex index, PYXCoord3DDouble pCoord) {
    pyxlibPINVOKE.SnyderProjection_pyxisToXYZ(swigCPtr, PYXIcosIndex.getCPtr(index), PYXCoord3DDouble.getCPtr(pCoord));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int precisionToResolution(double fPrecision) {
    int ret = pyxlibPINVOKE.SnyderProjection_precisionToResolution(swigCPtr, fPrecision);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double resolutionToPrecision(int nResolution) {
    double ret = pyxlibPINVOKE.SnyderProjection_resolutionToPrecision(swigCPtr, nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int calculateResolution(string strLatitude, string strLongitude) {
    int ret = pyxlibPINVOKE.SnyderProjection_calculateResolution(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strLatitude), pyxlibPINVOKE.UnmanagedString.Create(strLongitude));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__basic_ostreamTchar_t serialize(SWIGTYPE_p_std__basic_ostreamTchar_t arg0) {
    SWIGTYPE_p_std__basic_ostreamTchar_t ret = new SWIGTYPE_p_std__basic_ostreamTchar_t(pyxlibPINVOKE.SnyderProjection_serialize(swigCPtr, SWIGTYPE_p_std__basic_ostreamTchar_t.getCPtr(arg0)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__basic_istreamTchar_t deserialize(SWIGTYPE_p_std__basic_istreamTchar_t arg0) {
    SWIGTYPE_p_std__basic_istreamTchar_t ret = new SWIGTYPE_p_std__basic_istreamTchar_t(pyxlibPINVOKE.SnyderProjection_deserialize(swigCPtr, SWIGTYPE_p_std__basic_istreamTchar_t.getCPtr(arg0)), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void serializeCOM(SWIGTYPE_p_std__basic_ostreamTchar_t arg0) {
    pyxlibPINVOKE.SnyderProjection_serializeCOM(swigCPtr, SWIGTYPE_p_std__basic_ostreamTchar_t.getCPtr(arg0));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double calcCellAreaOnUnitSphere(PYXIcosIndex index) {
    double ret = pyxlibPINVOKE.SnyderProjection_calcCellAreaOnUnitSphere(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double calcCellAreaOnReferenceSphere(PYXIcosIndex index) {
    double ret = pyxlibPINVOKE.SnyderProjection_calcCellAreaOnReferenceSphere(swigCPtr, PYXIcosIndex.getCPtr(index));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double calcCellDistanceOnReferenceSphere(int nResolution) {
    double ret = pyxlibPINVOKE.SnyderProjection_calcCellDistanceOnReferenceSphere(swigCPtr, nResolution);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
