/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class TestFrame : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public TestFrame(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TestFrame obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        throw new MethodAccessException("C++ destructor does not have public access");
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static string kstrUninitialized {
  // Generated from %typemap(csvarout) const string &
  get {
    string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.TestFrame_kstrUninitialized_get());
    
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  }

  public static TestFrame getInstance() {
    TestFrame ret = new TestFrame(pyxlibPINVOKE.TestFrame_getInstance(), false);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool performTest() {
    bool ret = pyxlibPINVOKE.TestFrame_performTest__SWIG_0(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool performTest(TestFrame.TestMode mode) {
    bool ret = pyxlibPINVOKE.TestFrame_performTest__SWIG_1(swigCPtr, (int)mode);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addTest(TesterBase pTester) {
    pyxlibPINVOKE.TestFrame_addTest(swigCPtr, TesterBase.getCPtr(pTester));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTestAtFront(TesterBase pTester) {
    pyxlibPINVOKE.TestFrame_addTestAtFront(swigCPtr, TesterBase.getCPtr(pTester));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool testAssert(bool bCondition, string szFile, int nLine, string strCondition) {
    bool ret = pyxlibPINVOKE.TestFrame_testAssert(swigCPtr, bCondition, szFile, nLine, pyxlibPINVOKE.UnmanagedString.Create(strCondition));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector_String getTests() {
    Vector_String ret = new Vector_String(pyxlibPINVOKE.TestFrame_getTests(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector_String getFailedTests() {
    Vector_String ret = new Vector_String(pyxlibPINVOKE.TestFrame_getFailedTests(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool test(string strTestClassName) {
    bool ret = pyxlibPINVOKE.TestFrame_test(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strTestClassName));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector_String getTestLog(string strTestClassName) {
    Vector_String ret = new Vector_String(pyxlibPINVOKE.TestFrame_getTestLog(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(strTestClassName)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum TestMode {
    AllTests,
    ForegroundOnly,
    BackgroundOnly
  }

}
