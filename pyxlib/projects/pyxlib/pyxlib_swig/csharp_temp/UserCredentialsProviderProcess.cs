/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UserCredentialsProviderProcess : IUserCredentialsProvider {
  private HandleRef swigCPtr;

  public UserCredentialsProviderProcess(IntPtr cPtr, bool cMemoryOwn) : base(pyxlibPINVOKE.UserCredentialsProviderProcessUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UserCredentialsProviderProcess obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UserCredentialsProviderProcess() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        pyxlibPINVOKE.delete_UserCredentialsProviderProcess(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID clsid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_clsid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static GUID aiid {
    get {
      IntPtr cPtr = pyxlibPINVOKE.UserCredentialsProviderProcess_aiid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int niid {
    get {
      int ret = pyxlibPINVOKE.UserCredentialsProviderProcess_niid_get();
      if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void test() {
    pyxlibPINVOKE.UserCredentialsProviderProcess_test();
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint AddRef() {
    uint ret = pyxlibPINVOKE.UserCredentialsProviderProcess_AddRef(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint Release() {
    uint ret = pyxlibPINVOKE.UserCredentialsProviderProcess_Release(swigCPtr);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProcessSpec_SPtr getSpecStatic() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_getSpecStatic(), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ProcessSpec_SPtr getSpec() {
    ProcessSpec_SPtr ret = new ProcessSpec_SPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_getSpec(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IUnknown_CSPtr getOutput() {
    IUnknown_CSPtr ret = new IUnknown_CSPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_getOutput__SWIG_0(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getAttributeSchema() {
  // Generated from %typemap(csout) string
  string ret = pyxlibPINVOKE.UnmanagedString.Consume(pyxlibPINVOKE.UserCredentialsProviderProcess_getAttributeSchema(swigCPtr));
  
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual Attribute_Map getAttributes() {
    Attribute_Map ret = new Attribute_Map(pyxlibPINVOKE.UserCredentialsProviderProcess_getAttributes(swigCPtr), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setAttributes(Attribute_Map mapAttr) {
    pyxlibPINVOKE.UserCredentialsProviderProcess_setAttributes(swigCPtr, Attribute_Map.getCPtr(mapAttr));
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override IUserCredentials_SPtr getCredentials(string target, GUID credentialsType) {
    IUserCredentials_SPtr ret = new IUserCredentials_SPtr(pyxlibPINVOKE.UserCredentialsProviderProcess_getCredentials(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(target), GUID.getCPtr(credentialsType)), true);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void confirmCredentials(string target, IUserCredentials_SPtr credential, bool valid) {
    pyxlibPINVOKE.UserCredentialsProviderProcess_confirmCredentials(swigCPtr, pyxlibPINVOKE.UnmanagedString.Create(target), IUserCredentials_SPtr.getCPtr(credential), valid);
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

  public UserCredentialsProviderProcess() : this(pyxlibPINVOKE.new_UserCredentialsProviderProcess(), true) {
    if (pyxlibPINVOKE.SWIGPendingException.Pending) throw pyxlibPINVOKE.SWIGPendingException.Retrieve();
  }

}
