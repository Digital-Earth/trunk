/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ICameraView_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ICameraView_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ICameraView_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICameraView_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        applicationPINVOKE.delete_ICameraView_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public ICameraView_SPtr() : this(applicationPINVOKE.new_ICameraView_SPtr__SWIG_0(), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICameraView_SPtr(ICameraView p, bool add_ref) : this(applicationPINVOKE.new_ICameraView_SPtr__SWIG_1(ICameraView.getCPtr(p), add_ref), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICameraView_SPtr(ICameraView p) : this(applicationPINVOKE.new_ICameraView_SPtr__SWIG_2(ICameraView.getCPtr(p)), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICameraView_SPtr(ICameraView_SPtr rhs) : this(applicationPINVOKE.new_ICameraView_SPtr__SWIG_3(ICameraView_SPtr.getCPtr(rhs)), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    applicationPINVOKE.ICameraView_SPtr_reset__SWIG_0(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(ICameraView rhs) {
    applicationPINVOKE.ICameraView_SPtr_reset__SWIG_1(swigCPtr, ICameraView.getCPtr(rhs));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICameraView get() {
    IntPtr cPtr = applicationPINVOKE.ICameraView_SPtr_get(swigCPtr);
    ICameraView ret = (cPtr == IntPtr.Zero) ? null : new ICameraView(cPtr, false);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICameraView __ref__() {
    ICameraView ret = new ICameraView(applicationPINVOKE.ICameraView_SPtr___ref__(swigCPtr), false);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ICameraView __deref__() {
    IntPtr cPtr = applicationPINVOKE.ICameraView_SPtr___deref__(swigCPtr);
    ICameraView ret = (cPtr == IntPtr.Zero) ? null : new ICameraView(cPtr, false);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(ICameraView_SPtr rhs) {
    applicationPINVOKE.ICameraView_SPtr_swap(swigCPtr, ICameraView_SPtr.getCPtr(rhs));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = applicationPINVOKE.ICameraView_SPtr_isNull(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = applicationPINVOKE.ICameraView_SPtr_isNotNull(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = applicationPINVOKE.ICameraView_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string getCameraView() {
  // Generated from %typemap(csout) string
  string ret = applicationPINVOKE.UnmanagedString.Consume(applicationPINVOKE.ICameraView_SPtr_getCameraView(swigCPtr));
  
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setCameraView(string strView) {
    applicationPINVOKE.ICameraView_SPtr_setCameraView(swigCPtr, applicationPINVOKE.UnmanagedString.Create(strView));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint AddRef() {
    uint ret = applicationPINVOKE.ICameraView_SPtr_AddRef(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = applicationPINVOKE.ICameraView_SPtr_Release(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
