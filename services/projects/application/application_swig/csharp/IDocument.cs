/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IDocument : PYXCOM_IUnknown {
  private HandleRef swigCPtr;

  public IDocument(IntPtr cPtr, bool cMemoryOwn) : base(applicationPINVOKE.IDocumentUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IDocument obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IDocument() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        applicationPINVOKE.delete_IDocument(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GUID iid {
    get {
      IntPtr cPtr = applicationPINVOKE.IDocument_iid_get();
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual void setViewPointProcess(IProcess_SPtr spViewPointProcess) {
    applicationPINVOKE.IDocument_setViewPointProcess(swigCPtr, IProcess_SPtr.getCPtr(spViewPointProcess));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IProcess_SPtr getViewPointProcess() {
    IProcess_SPtr ret = new IProcess_SPtr(applicationPINVOKE.IDocument_getViewPointProcess(swigCPtr), true);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getCameraCookieString() {
  // Generated from %typemap(csout) string
  string ret = applicationPINVOKE.UnmanagedString.Consume(applicationPINVOKE.IDocument_getCameraCookieString(swigCPtr));
  
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public virtual void setCameraCookieString(string str) {
    applicationPINVOKE.IDocument_setCameraCookieString(swigCPtr, applicationPINVOKE.UnmanagedString.Create(str));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDirtyFlag(bool bValue) {
    applicationPINVOKE.IDocument_setDirtyFlag(swigCPtr, bValue);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void save(string path) {
    applicationPINVOKE.IDocument_save(swigCPtr, applicationPINVOKE.UnmanagedString.Create(path));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isOutOfDate() {
    bool ret = applicationPINVOKE.IDocument_isOutOfDate(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
