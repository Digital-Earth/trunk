/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IDocument_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IDocument_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IDocument_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IDocument_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        applicationPINVOKE.delete_IDocument_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public IDocument_SPtr() : this(applicationPINVOKE.new_IDocument_SPtr__SWIG_0(), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public IDocument_SPtr(IDocument p, bool add_ref) : this(applicationPINVOKE.new_IDocument_SPtr__SWIG_1(IDocument.getCPtr(p), add_ref), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public IDocument_SPtr(IDocument p) : this(applicationPINVOKE.new_IDocument_SPtr__SWIG_2(IDocument.getCPtr(p)), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public IDocument_SPtr(IDocument_SPtr rhs) : this(applicationPINVOKE.new_IDocument_SPtr__SWIG_3(IDocument_SPtr.getCPtr(rhs)), true) {
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    applicationPINVOKE.IDocument_SPtr_reset__SWIG_0(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(IDocument rhs) {
    applicationPINVOKE.IDocument_SPtr_reset__SWIG_1(swigCPtr, IDocument.getCPtr(rhs));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public IDocument get() {
    IntPtr cPtr = applicationPINVOKE.IDocument_SPtr_get(swigCPtr);
    IDocument ret = (cPtr == IntPtr.Zero) ? null : new IDocument(cPtr, false);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IDocument __ref__() {
    IDocument ret = new IDocument(applicationPINVOKE.IDocument_SPtr___ref__(swigCPtr), false);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IDocument __deref__() {
    IntPtr cPtr = applicationPINVOKE.IDocument_SPtr___deref__(swigCPtr);
    IDocument ret = (cPtr == IntPtr.Zero) ? null : new IDocument(cPtr, false);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(IDocument_SPtr rhs) {
    applicationPINVOKE.IDocument_SPtr_swap(swigCPtr, IDocument_SPtr.getCPtr(rhs));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = applicationPINVOKE.IDocument_SPtr_isNull(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = applicationPINVOKE.IDocument_SPtr_isNotNull(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUID iid {
    get {
      IntPtr cPtr = applicationPINVOKE.IDocument_SPtr_iid_get(swigCPtr);
      GUID ret = (cPtr == IntPtr.Zero) ? null : new GUID(cPtr, false);
      if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void setViewPointProcess(IProcess_SPtr spViewPointProcess) {
    applicationPINVOKE.IDocument_SPtr_setViewPointProcess(swigCPtr, IProcess_SPtr.getCPtr(spViewPointProcess));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public IProcess_SPtr getViewPointProcess() {
    IProcess_SPtr ret = new IProcess_SPtr(applicationPINVOKE.IDocument_SPtr_getViewPointProcess(swigCPtr), true);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getCameraCookieString() {
  // Generated from %typemap(csout) string
  string ret = applicationPINVOKE.UnmanagedString.Consume(applicationPINVOKE.IDocument_SPtr_getCameraCookieString(swigCPtr));
  
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public void setCameraCookieString(string str) {
    applicationPINVOKE.IDocument_SPtr_setCameraCookieString(swigCPtr, applicationPINVOKE.UnmanagedString.Create(str));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDirtyFlag(bool bValue) {
    applicationPINVOKE.IDocument_SPtr_setDirtyFlag(swigCPtr, bValue);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save(string path) {
    applicationPINVOKE.IDocument_SPtr_save(swigCPtr, applicationPINVOKE.UnmanagedString.Create(path));
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isOutOfDate() {
    bool ret = applicationPINVOKE.IDocument_SPtr_isOutOfDate(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint AddRef() {
    uint ret = applicationPINVOKE.IDocument_SPtr_AddRef(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Release() {
    uint ret = applicationPINVOKE.IDocument_SPtr_Release(swigCPtr);
    if (applicationPINVOKE.SWIGPendingException.Pending) throw applicationPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
