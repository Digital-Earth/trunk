/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_application(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_application(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning char * strings to C# without leaking memory. */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;

/* Struct for passing std::strings that may contain null characters. */
#ifdef __cplusplus
extern "C" 
#endif
typedef struct {
	size_t length;
	void const * data;
} UnmanagedString;

#include <string>
#include <objbase.h>

static inline UnmanagedString * CreateUnmanagedString(std::string const & from) {
  size_t const length = from.length();
  void * const data = CoTaskMemAlloc(length);
  if (!data) {
    return 0;
  }
  memcpy(data, from.data(), length);
  UnmanagedString * const unmanagedStringPtr = 
    (UnmanagedString * const)CoTaskMemAlloc(sizeof UnmanagedString);
  if (!unmanagedStringPtr) {
    CoTaskMemFree((LPVOID)data);
    return 0;
  }
  unmanagedStringPtr->length = length;
  unmanagedStringPtr->data = data;
  return unmanagedStringPtr;
}

static inline void ConsumeUnmanagedString(UnmanagedString *& unmanagedStringPtr, std::string & to) {
  if (!unmanagedStringPtr) {
    return;
  }
  to.assign((char const * const)(unmanagedStringPtr->data), unmanagedStringPtr->length);
  CoTaskMemFree((LPVOID)(unmanagedStringPtr->data));
  CoTaskMemFree((LPVOID)unmanagedStringPtr);
  unmanagedStringPtr = 0;
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_application(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */





// So PYXObject operators are accessible (better way?)
#define SWIG_INTERNAL
#include "../../../../config/windows/force_include.h"
#include "pyxis/utility/exception.h"
#include "document.h"
#include "camera_view.h"
#include "pyxis/utility/pyxcom.h"

// We get 64-bit portability warning C4267
// It's safe for us now, and might even be safe when re-SWIG'd for Win64.
// So I sent a message to swig-devel mailing list and disabled it for now.
// http://msdn2.microsoft.com/en-gb/library/6kck0s93(VS.80).aspx
#pragma warning(disable: 4267)


SWIGINTERN bool boost_intrusive_ptr_Sl_IDocument_Sg__isNull(boost::intrusive_ptr<IDocument > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IDocument_Sg__isNotNull(boost::intrusive_ptr<IDocument > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IDocument_SS_const_Sg__isNull(boost::intrusive_ptr<IDocument const > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IDocument_SS_const_Sg__isNotNull(boost::intrusive_ptr<IDocument const > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ICameraView_Sg__isNull(boost::intrusive_ptr<ICameraView > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ICameraView_Sg__isNotNull(boost::intrusive_ptr<ICameraView > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ICameraView_SS_const_Sg__isNull(boost::intrusive_ptr<ICameraView const > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ICameraView_SS_const_Sg__isNotNull(boost::intrusive_ptr<ICameraView const > *self){
		return self != nullptr && (*self);
	}

    boost::intrusive_ptr<PYXCOM_IUnknown> QueryInterface_PYXCOM_IUnknown(const boost::intrusive_ptr<IDocument>& sp)
    {
      boost::intrusive_ptr<PYXCOM_IUnknown> sp2;
	  if (sp)
	  {
        sp->QueryInterface(PYXCOM_IUnknown::iid, (void**) &sp2);
      }
      return sp2;
    }
    boost::intrusive_ptr<IDocument> QueryInterface_IDocument(const boost::intrusive_ptr<PYXCOM_IUnknown>& sp)
    {
      boost::intrusive_ptr<IDocument> sp2;
	  if (sp)
	  {
        sp->QueryInterface(IDocument::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const PYXCOM_IUnknown> QueryInterface_PYXCOM_IUnknown_const(const boost::intrusive_ptr<const IDocument>& sp)
    {
      boost::intrusive_ptr<const PYXCOM_IUnknown> sp2;
	  if (sp)
	  {
        boost::const_pointer_cast<IDocument, const IDocument>(sp)->QueryInterface(PYXCOM_IUnknown::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const IDocument> QueryInterface_IDocument_const(const boost::intrusive_ptr<const PYXCOM_IUnknown>& sp)
    {
      boost::intrusive_ptr<const IDocument> sp2;
	  if (sp)
	  {
		boost::const_pointer_cast<PYXCOM_IUnknown, const PYXCOM_IUnknown>(sp)->QueryInterface(IDocument::iid, (void**) &sp2);
      }
      return sp2;
    }
  

    boost::intrusive_ptr<IDocument> QueryInterface_IDocument(const boost::intrusive_ptr<IProcess>& sp)
    {
      boost::intrusive_ptr<IDocument> sp2;
	  if (sp)
	  {
        sp->QueryInterface(IDocument::iid, (void**) &sp2);
      }
      return sp2;
    }
    boost::intrusive_ptr<IProcess> QueryInterface_IProcess(const boost::intrusive_ptr<IDocument>& sp)
    {
      boost::intrusive_ptr<IProcess> sp2;
	  if (sp)
	  {
        sp->QueryInterface(IProcess::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const IDocument> QueryInterface_IDocument_const(const boost::intrusive_ptr<const IProcess>& sp)
    {
      boost::intrusive_ptr<const IDocument> sp2;
	  if (sp)
	  {
        boost::const_pointer_cast<IProcess, const IProcess>(sp)->QueryInterface(IDocument::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const IProcess> QueryInterface_IProcess_const(const boost::intrusive_ptr<const IDocument>& sp)
    {
      boost::intrusive_ptr<const IProcess> sp2;
	  if (sp)
	  {
		boost::const_pointer_cast<IDocument, const IDocument>(sp)->QueryInterface(IProcess::iid, (void**) &sp2);
      }
      return sp2;
    }
  

    boost::intrusive_ptr<PYXCOM_IUnknown> QueryInterface_PYXCOM_IUnknown(const boost::intrusive_ptr<ICameraView>& sp)
    {
      boost::intrusive_ptr<PYXCOM_IUnknown> sp2;
	  if (sp)
	  {
        sp->QueryInterface(PYXCOM_IUnknown::iid, (void**) &sp2);
      }
      return sp2;
    }
    boost::intrusive_ptr<ICameraView> QueryInterface_ICameraView(const boost::intrusive_ptr<PYXCOM_IUnknown>& sp)
    {
      boost::intrusive_ptr<ICameraView> sp2;
	  if (sp)
	  {
        sp->QueryInterface(ICameraView::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const PYXCOM_IUnknown> QueryInterface_PYXCOM_IUnknown_const(const boost::intrusive_ptr<const ICameraView>& sp)
    {
      boost::intrusive_ptr<const PYXCOM_IUnknown> sp2;
	  if (sp)
	  {
        boost::const_pointer_cast<ICameraView, const ICameraView>(sp)->QueryInterface(PYXCOM_IUnknown::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const ICameraView> QueryInterface_ICameraView_const(const boost::intrusive_ptr<const PYXCOM_IUnknown>& sp)
    {
      boost::intrusive_ptr<const ICameraView> sp2;
	  if (sp)
	  {
		boost::const_pointer_cast<PYXCOM_IUnknown, const PYXCOM_IUnknown>(sp)->QueryInterface(ICameraView::iid, (void**) &sp2);
      }
      return sp2;
    }
  

    boost::intrusive_ptr<ICameraView> QueryInterface_ICameraView(const boost::intrusive_ptr<IProcess>& sp)
    {
      boost::intrusive_ptr<ICameraView> sp2;
	  if (sp)
	  {
        sp->QueryInterface(ICameraView::iid, (void**) &sp2);
      }
      return sp2;
    }
    boost::intrusive_ptr<IProcess> QueryInterface_IProcess(const boost::intrusive_ptr<ICameraView>& sp)
    {
      boost::intrusive_ptr<IProcess> sp2;
	  if (sp)
	  {
        sp->QueryInterface(IProcess::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const ICameraView> QueryInterface_ICameraView_const(const boost::intrusive_ptr<const IProcess>& sp)
    {
      boost::intrusive_ptr<const ICameraView> sp2;
	  if (sp)
	  {
        boost::const_pointer_cast<IProcess, const IProcess>(sp)->QueryInterface(ICameraView::iid, (void**) &sp2);
	  }
      return sp2;
    }
    boost::intrusive_ptr<const IProcess> QueryInterface_IProcess_const(const boost::intrusive_ptr<const ICameraView>& sp)
    {
      boost::intrusive_ptr<const IProcess> sp2;
	  if (sp)
	  {
		boost::const_pointer_cast<ICameraView, const ICameraView>(sp)->QueryInterface(IProcess::iid, (void**) &sp2);
      }
      return sp2;
    }
  


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "application_swig.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_iid_get() {
  void * jresult ;
  IID *result = 0 ;
  
  result = (IID *)&IDocument::iid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_setViewPointProcess(void * jarg1, void * jarg2) {
  IDocument *arg1 = (IDocument *) 0 ;
  boost::intrusive_ptr<IProcess > arg2 ;
  boost::intrusive_ptr<IProcess > *argp2 ;
  
  arg1 = (IDocument *)jarg1; 
  argp2 = (boost::intrusive_ptr<IProcess > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (arg1)->setViewPointProcess(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_getViewPointProcess(void * jarg1) {
  void * jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (IDocument *)jarg1; 
  
  try
  {
    result = (arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_IDocument_getCameraCookieString(void * jarg1) {
  UnmanagedString * jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  std::string result;
  
  arg1 = (IDocument *)jarg1; 
  
  try
  {
    result = ((IDocument const *)arg1)->getCameraCookieString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_setCameraCookieString(void * jarg1, UnmanagedString * jarg2) {
  IDocument *arg1 = (IDocument *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (IDocument *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (arg1)->setCameraCookieString((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_setDirtyFlag(void * jarg1, unsigned int jarg2) {
  IDocument *arg1 = (IDocument *) 0 ;
  bool arg2 ;
  
  arg1 = (IDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (arg1)->setDirtyFlag(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_save(void * jarg1, UnmanagedString * jarg2) {
  IDocument *arg1 = (IDocument *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (IDocument *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (arg1)->save((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_isOutOfDate(void * jarg1) {
  unsigned int jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  bool result;
  
  arg1 = (IDocument *)jarg1; 
  
  try
  {
    result = (bool)((IDocument const *)arg1)->isOutOfDate();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDocument(void * jarg1) {
  IDocument *arg1 = (IDocument *) 0 ;
  
  arg1 = (IDocument *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_iid_get() {
  void * jresult ;
  IID *result = 0 ;
  
  result = (IID *)&ICameraView::iid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ICameraView_getCameraView(void * jarg1) {
  UnmanagedString * jresult ;
  ICameraView *arg1 = (ICameraView *) 0 ;
  std::string result;
  
  arg1 = (ICameraView *)jarg1; 
  
  try
  {
    result = ((ICameraView const *)arg1)->getCameraView();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_setCameraView(void * jarg1, UnmanagedString * jarg2) {
  ICameraView *arg1 = (ICameraView *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ICameraView *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (arg1)->setCameraView((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICameraView(void * jarg1) {
  ICameraView *arg1 = (ICameraView *) 0 ;
  
  arg1 = (ICameraView *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<IDocument > *)new boost::intrusive_ptr<IDocument >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<IDocument > *result = 0 ;
  
  arg1 = (IDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<IDocument > *)new boost::intrusive_ptr<IDocument >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  boost::intrusive_ptr<IDocument > *result = 0 ;
  
  arg1 = (IDocument *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<IDocument > *)new boost::intrusive_ptr<IDocument >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = 0 ;
  boost::intrusive_ptr<IDocument > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<IDocument > *)new boost::intrusive_ptr<IDocument >((boost::intrusive_ptr<IDocument > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDocument_SPtr(void * jarg1) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  IDocument *arg2 = (IDocument *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  arg2 = (IDocument *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  IDocument *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (IDocument *)((boost::intrusive_ptr<IDocument > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  IDocument *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    {
      IDocument &_result_ref = ((boost::intrusive_ptr<IDocument > const *)arg1)->operator *();
      result = (IDocument *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  IDocument *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (IDocument *)((boost::intrusive_ptr<IDocument > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  boost::intrusive_ptr<IDocument > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  arg2 = (boost::intrusive_ptr<IDocument > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IDocument_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IDocument_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_SPtr_iid_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  IID *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  result = (IID *)& (IDocument::iid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_setViewPointProcess(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  boost::intrusive_ptr<IProcess > arg2 ;
  boost::intrusive_ptr<IProcess > *argp2 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  argp2 = (boost::intrusive_ptr<IProcess > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (*arg1)->setViewPointProcess(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_SPtr_getViewPointProcess(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (*arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_IDocument_SPtr_getCameraCookieString(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (*arg1)->getCameraCookieString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_setCameraCookieString(void * jarg1, UnmanagedString * jarg2) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (*arg1)->setCameraCookieString((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_setDirtyFlag(void * jarg1, unsigned int jarg2) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  bool arg2 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (*arg1)->setDirtyFlag(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_SPtr_save(void * jarg1, UnmanagedString * jarg2) {
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (*arg1)->save((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_SPtr_isOutOfDate(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->isOutOfDate();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IDocument_SPtr_AddRef(void * jarg1) {
  unsigned long jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  PYXCOM_ULONG result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (PYXCOM_ULONG)(*arg1)->AddRef();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IDocument_SPtr_Release(void * jarg1) {
  unsigned long jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = (boost::intrusive_ptr<IDocument > *) 0 ;
  PYXCOM_ULONG result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1; 
  
  try
  {
    result = (PYXCOM_ULONG)(*arg1)->Release();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_CSPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<IDocument const > *)new boost::intrusive_ptr<IDocument const >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_CSPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<IDocument const > *result = 0 ;
  
  arg1 = (IDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<IDocument const > *)new boost::intrusive_ptr<IDocument const >((IDocument const *)arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_CSPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  IDocument *arg1 = (IDocument *) 0 ;
  boost::intrusive_ptr<IDocument const > *result = 0 ;
  
  arg1 = (IDocument *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<IDocument const > *)new boost::intrusive_ptr<IDocument const >((IDocument const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDocument_CSPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = 0 ;
  boost::intrusive_ptr<IDocument const > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<IDocument const > *)new boost::intrusive_ptr<IDocument const >((boost::intrusive_ptr<IDocument const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDocument_CSPtr(void * jarg1) {
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_CSPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_CSPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  IDocument *arg2 = (IDocument *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  arg2 = (IDocument *)jarg2; 
  
  try
  {
    (arg1)->reset((IDocument const *)arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_CSPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  IDocument *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    result = (IDocument *)((boost::intrusive_ptr<IDocument const > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_CSPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  IDocument *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    {
      IDocument const &_result_ref = ((boost::intrusive_ptr<IDocument const > const *)arg1)->operator *();
      result = (IDocument *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_CSPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  IDocument *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    result = (IDocument *)((boost::intrusive_ptr<IDocument const > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDocument_CSPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  boost::intrusive_ptr<IDocument const > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  arg2 = (boost::intrusive_ptr<IDocument const > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument const > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_CSPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IDocument_SS_const_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_CSPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IDocument_SS_const_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDocument_CSPtr_iid_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  IID *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  result = (IID *)& (IDocument::iid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_IDocument_CSPtr_getCameraCookieString(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    result = (*arg1)->getCameraCookieString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDocument_CSPtr_isOutOfDate(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = (boost::intrusive_ptr<IDocument const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->isOutOfDate();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView > *)new boost::intrusive_ptr<ICameraView >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ICameraView *arg1 = (ICameraView *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<ICameraView > *result = 0 ;
  
  arg1 = (ICameraView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView > *)new boost::intrusive_ptr<ICameraView >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  ICameraView *arg1 = (ICameraView *) 0 ;
  boost::intrusive_ptr<ICameraView > *result = 0 ;
  
  arg1 = (ICameraView *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView > *)new boost::intrusive_ptr<ICameraView >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = 0 ;
  boost::intrusive_ptr<ICameraView > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView > *)new boost::intrusive_ptr<ICameraView >((boost::intrusive_ptr<ICameraView > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICameraView_SPtr(void * jarg1) {
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  ICameraView *arg2 = (ICameraView *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  arg2 = (ICameraView *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  ICameraView *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (ICameraView *)((boost::intrusive_ptr<ICameraView > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  ICameraView *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    {
      ICameraView &_result_ref = ((boost::intrusive_ptr<ICameraView > const *)arg1)->operator *();
      result = (ICameraView *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  ICameraView *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (ICameraView *)((boost::intrusive_ptr<ICameraView > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  boost::intrusive_ptr<ICameraView > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  arg2 = (boost::intrusive_ptr<ICameraView > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICameraView_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ICameraView_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICameraView_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ICameraView_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_SPtr_iid_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  IID *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  result = (IID *)& (ICameraView::iid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ICameraView_SPtr_getCameraView(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (*arg1)->getCameraView();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_SPtr_setCameraView(void * jarg1, UnmanagedString * jarg2) {
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (*arg1)->setCameraView((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ICameraView_SPtr_AddRef(void * jarg1) {
  unsigned long jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  PYXCOM_ULONG result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (PYXCOM_ULONG)(*arg1)->AddRef();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ICameraView_SPtr_Release(void * jarg1) {
  unsigned long jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = (boost::intrusive_ptr<ICameraView > *) 0 ;
  PYXCOM_ULONG result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1; 
  
  try
  {
    result = (PYXCOM_ULONG)(*arg1)->Release();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_CSPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView const > *)new boost::intrusive_ptr<ICameraView const >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_CSPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ICameraView *arg1 = (ICameraView *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<ICameraView const > *result = 0 ;
  
  arg1 = (ICameraView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView const > *)new boost::intrusive_ptr<ICameraView const >((ICameraView const *)arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_CSPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  ICameraView *arg1 = (ICameraView *) 0 ;
  boost::intrusive_ptr<ICameraView const > *result = 0 ;
  
  arg1 = (ICameraView *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView const > *)new boost::intrusive_ptr<ICameraView const >((ICameraView const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICameraView_CSPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = 0 ;
  boost::intrusive_ptr<ICameraView const > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<ICameraView const > *)new boost::intrusive_ptr<ICameraView const >((boost::intrusive_ptr<ICameraView const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICameraView_CSPtr(void * jarg1) {
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_CSPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_CSPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  ICameraView *arg2 = (ICameraView *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  arg2 = (ICameraView *)jarg2; 
  
  try
  {
    (arg1)->reset((ICameraView const *)arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_CSPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  ICameraView *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    result = (ICameraView *)((boost::intrusive_ptr<ICameraView const > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_CSPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  ICameraView *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    {
      ICameraView const &_result_ref = ((boost::intrusive_ptr<ICameraView const > const *)arg1)->operator *();
      result = (ICameraView *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_CSPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  ICameraView *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    result = (ICameraView *)((boost::intrusive_ptr<ICameraView const > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICameraView_CSPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  boost::intrusive_ptr<ICameraView const > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  arg2 = (boost::intrusive_ptr<ICameraView const > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView const > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICameraView_CSPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ICameraView_SS_const_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICameraView_CSPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ICameraView_SS_const_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICameraView_CSPtr_iid_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  IID *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  result = (IID *)& (ICameraView::iid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ICameraView_CSPtr_getCameraView(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = (boost::intrusive_ptr<ICameraView const > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1; 
  
  try
  {
    result = (*arg1)->getCameraView();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_PYXCOM_IUnknown__SWIG_26(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = 0 ;
  boost::intrusive_ptr<PYXCOM_IUnknown > result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_PYXCOM_IUnknown((boost::intrusive_ptr<IDocument > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXCOM_IUnknown >((boost::intrusive_ptr<PYXCOM_IUnknown > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IDocument__SWIG_0(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<PYXCOM_IUnknown > *arg1 = 0 ;
  boost::intrusive_ptr<IDocument > result;
  
  arg1 = (boost::intrusive_ptr<PYXCOM_IUnknown > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<PYXCOM_IUnknown > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IDocument((boost::intrusive_ptr<PYXCOM_IUnknown > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IDocument >((boost::intrusive_ptr<IDocument > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_PYXCOM_IUnknown_const__SWIG_26(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = 0 ;
  boost::intrusive_ptr<PYXCOM_IUnknown const > result;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_PYXCOM_IUnknown_const((boost::intrusive_ptr<IDocument const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXCOM_IUnknown const >((boost::intrusive_ptr<PYXCOM_IUnknown const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IDocument_const__SWIG_0(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<PYXCOM_IUnknown const > *arg1 = 0 ;
  boost::intrusive_ptr<IDocument const > result;
  
  arg1 = (boost::intrusive_ptr<PYXCOM_IUnknown const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<PYXCOM_IUnknown const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IDocument_const((boost::intrusive_ptr<PYXCOM_IUnknown const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IDocument const >((boost::intrusive_ptr<IDocument const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IDocument__SWIG_1(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IProcess > *arg1 = 0 ;
  boost::intrusive_ptr<IDocument > result;
  
  arg1 = (boost::intrusive_ptr<IProcess > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IProcess > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IDocument((boost::intrusive_ptr<IProcess > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IDocument >((boost::intrusive_ptr<IDocument > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IProcess__SWIG_8(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument > *arg1 = 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (boost::intrusive_ptr<IDocument > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IProcess((boost::intrusive_ptr<IDocument > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IDocument_const__SWIG_1(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IProcess const > *arg1 = 0 ;
  boost::intrusive_ptr<IDocument const > result;
  
  arg1 = (boost::intrusive_ptr<IProcess const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IProcess const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IDocument_const((boost::intrusive_ptr<IProcess const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IDocument const >((boost::intrusive_ptr<IDocument const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IProcess_const__SWIG_8(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IDocument const > *arg1 = 0 ;
  boost::intrusive_ptr<IProcess const > result;
  
  arg1 = (boost::intrusive_ptr<IDocument const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IDocument const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IProcess_const((boost::intrusive_ptr<IDocument const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess const >((boost::intrusive_ptr<IProcess const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_PYXCOM_IUnknown__SWIG_27(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = 0 ;
  boost::intrusive_ptr<PYXCOM_IUnknown > result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_PYXCOM_IUnknown((boost::intrusive_ptr<ICameraView > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXCOM_IUnknown >((boost::intrusive_ptr<PYXCOM_IUnknown > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_ICameraView__SWIG_0(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<PYXCOM_IUnknown > *arg1 = 0 ;
  boost::intrusive_ptr<ICameraView > result;
  
  arg1 = (boost::intrusive_ptr<PYXCOM_IUnknown > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<PYXCOM_IUnknown > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_ICameraView((boost::intrusive_ptr<PYXCOM_IUnknown > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ICameraView >((boost::intrusive_ptr<ICameraView > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_PYXCOM_IUnknown_const__SWIG_27(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = 0 ;
  boost::intrusive_ptr<PYXCOM_IUnknown const > result;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_PYXCOM_IUnknown_const((boost::intrusive_ptr<ICameraView const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXCOM_IUnknown const >((boost::intrusive_ptr<PYXCOM_IUnknown const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_ICameraView_const__SWIG_0(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<PYXCOM_IUnknown const > *arg1 = 0 ;
  boost::intrusive_ptr<ICameraView const > result;
  
  arg1 = (boost::intrusive_ptr<PYXCOM_IUnknown const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<PYXCOM_IUnknown const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_ICameraView_const((boost::intrusive_ptr<PYXCOM_IUnknown const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ICameraView const >((boost::intrusive_ptr<ICameraView const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_ICameraView__SWIG_1(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IProcess > *arg1 = 0 ;
  boost::intrusive_ptr<ICameraView > result;
  
  arg1 = (boost::intrusive_ptr<IProcess > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IProcess > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_ICameraView((boost::intrusive_ptr<IProcess > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ICameraView >((boost::intrusive_ptr<ICameraView > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IProcess__SWIG_9(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView > *arg1 = 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (boost::intrusive_ptr<ICameraView > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IProcess((boost::intrusive_ptr<ICameraView > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_ICameraView_const__SWIG_1(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IProcess const > *arg1 = 0 ;
  boost::intrusive_ptr<ICameraView const > result;
  
  arg1 = (boost::intrusive_ptr<IProcess const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IProcess const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_ICameraView_const((boost::intrusive_ptr<IProcess const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ICameraView const >((boost::intrusive_ptr<ICameraView const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryInterface_IProcess_const__SWIG_9(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ICameraView const > *arg1 = 0 ;
  boost::intrusive_ptr<IProcess const > result;
  
  arg1 = (boost::intrusive_ptr<ICameraView const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ICameraView const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = QueryInterface_IProcess_const((boost::intrusive_ptr<ICameraView const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess const >((boost::intrusive_ptr<IProcess const > &)result); 
  return jresult;
}


SWIGEXPORT PYXCOM_IUnknown * SWIGSTDCALL CSharp_IDocumentUpcast(IDocument *objectRef) {
    return (PYXCOM_IUnknown *)objectRef;
}

SWIGEXPORT PYXCOM_IUnknown * SWIGSTDCALL CSharp_ICameraViewUpcast(ICameraView *objectRef) {
    return (PYXCOM_IUnknown *)objectRef;
}

#ifdef __cplusplus
}
#endif

