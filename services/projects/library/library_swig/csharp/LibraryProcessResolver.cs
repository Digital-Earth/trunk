/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class LibraryProcessResolver : ProcessResolver {
  private HandleRef swigCPtr;

  public LibraryProcessResolver(IntPtr cPtr, bool cMemoryOwn) : base(library_swigPINVOKE.LibraryProcessResolverUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(LibraryProcessResolver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LibraryProcessResolver() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        library_swigPINVOKE.delete_LibraryProcessResolver(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  protected LibraryProcessResolver() : this(library_swigPINVOKE.new_LibraryProcessResolver(), true) {
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual int release() {
    int ret = ((this.GetType() == typeof(LibraryProcessResolver)) ? library_swigPINVOKE.LibraryProcessResolver_release(swigCPtr) : library_swigPINVOKE.LibraryProcessResolver_releaseSwigExplicitLibraryProcessResolver(swigCPtr));
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int addRef() {
    int ret = ((this.GetType() == typeof(LibraryProcessResolver)) ? library_swigPINVOKE.LibraryProcessResolver_addRef(swigCPtr) : library_swigPINVOKE.LibraryProcessResolver_addRefSwigExplicitLibraryProcessResolver(swigCPtr));
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LibraryProcessResolver_SPtr create() {
    LibraryProcessResolver_SPtr ret = new LibraryProcessResolver_SPtr(library_swigPINVOKE.LibraryProcessResolver_create(), true);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override IProcess_SPtr resolve(ProcRef procRef) {
    IProcess_SPtr ret = new IProcess_SPtr(((this.GetType() == typeof(LibraryProcessResolver)) ? library_swigPINVOKE.LibraryProcessResolver_resolve(swigCPtr, ProcRef.getCPtr(procRef)) : library_swigPINVOKE.LibraryProcessResolver_resolveSwigExplicitLibraryProcessResolver(swigCPtr, ProcRef.getCPtr(procRef))), true);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override IProcess_SPtr notifyResolve(IProcess_SPtr spProcess) {
    IProcess_SPtr ret = new IProcess_SPtr(((this.GetType() == typeof(LibraryProcessResolver)) ? library_swigPINVOKE.LibraryProcessResolver_notifyResolve(swigCPtr, IProcess_SPtr.getCPtr(spProcess)) : library_swigPINVOKE.LibraryProcessResolver_notifyResolveSwigExplicitLibraryProcessResolver(swigCPtr, IProcess_SPtr.getCPtr(spProcess))), true);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void set(LibraryProcessResolver_SPtr resolver) {
    library_swigPINVOKE.LibraryProcessResolver_set(LibraryProcessResolver_SPtr.getCPtr(resolver));
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void reset() {
    library_swigPINVOKE.LibraryProcessResolver_reset();
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("resolve", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateLibraryProcessResolver_0(SwigDirectorresolve);
    if (SwigDerivedClassHasMethod("notifyResolve", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateLibraryProcessResolver_1(SwigDirectornotifyResolve);
    if (SwigDerivedClassHasMethod("notifyFinalize", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateLibraryProcessResolver_2(SwigDirectornotifyFinalize);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateLibraryProcessResolver_3(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateLibraryProcessResolver_4(SwigDirectoraddRef);
    library_swigPINVOKE.LibraryProcessResolver_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(LibraryProcessResolver));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorresolve(IntPtr procRef) {
    return IProcess_SPtr.getCPtr(resolve(new ProcRef(procRef, false))).Handle;
  }

  private IntPtr SwigDirectornotifyResolve(IntPtr spProcess) {
    return IProcess_SPtr.getCPtr(notifyResolve(new IProcess_SPtr(spProcess, false))).Handle;
  }

  private void SwigDirectornotifyFinalize(IntPtr spProc) {
    notifyFinalize(new IProcess_SPtr(spProc, false));
  }

  private int SwigDirectorrelease() {
    return release();
  }

  private int SwigDirectoraddRef() {
    return addRef();
  }

  public delegate IntPtr SwigDelegateLibraryProcessResolver_0(IntPtr procRef);
  public delegate IntPtr SwigDelegateLibraryProcessResolver_1(IntPtr spProcess);
  public delegate void SwigDelegateLibraryProcessResolver_2(IntPtr spProc);
  public delegate int SwigDelegateLibraryProcessResolver_3();
  public delegate int SwigDelegateLibraryProcessResolver_4();

  private SwigDelegateLibraryProcessResolver_0 swigDelegate0;
  private SwigDelegateLibraryProcessResolver_1 swigDelegate1;
  private SwigDelegateLibraryProcessResolver_2 swigDelegate2;
  private SwigDelegateLibraryProcessResolver_3 swigDelegate3;
  private SwigDelegateLibraryProcessResolver_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(ProcRef) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(IProcess_SPtr) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(IProcess_SPtr) };
  private static Type[] swigMethodTypes3 = new Type[] {  };
  private static Type[] swigMethodTypes4 = new Type[] {  };
}
