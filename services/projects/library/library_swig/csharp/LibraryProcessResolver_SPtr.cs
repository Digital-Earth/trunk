/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class LibraryProcessResolver_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LibraryProcessResolver_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(LibraryProcessResolver_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LibraryProcessResolver_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        library_swigPINVOKE.delete_LibraryProcessResolver_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public LibraryProcessResolver_SPtr() : this(library_swigPINVOKE.new_LibraryProcessResolver_SPtr__SWIG_0(), true) {
  }

  public LibraryProcessResolver_SPtr(LibraryProcessResolver p, bool add_ref) : this(library_swigPINVOKE.new_LibraryProcessResolver_SPtr__SWIG_1(LibraryProcessResolver.getCPtr(p), add_ref), true) {
  }

  public LibraryProcessResolver_SPtr(LibraryProcessResolver p) : this(library_swigPINVOKE.new_LibraryProcessResolver_SPtr__SWIG_2(LibraryProcessResolver.getCPtr(p)), true) {
  }

  public LibraryProcessResolver_SPtr(LibraryProcessResolver_SPtr rhs) : this(library_swigPINVOKE.new_LibraryProcessResolver_SPtr__SWIG_3(LibraryProcessResolver_SPtr.getCPtr(rhs)), true) {
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    library_swigPINVOKE.LibraryProcessResolver_SPtr_reset__SWIG_0(swigCPtr);
  }

  public void reset(LibraryProcessResolver rhs) {
    library_swigPINVOKE.LibraryProcessResolver_SPtr_reset__SWIG_1(swigCPtr, LibraryProcessResolver.getCPtr(rhs));
  }

  public LibraryProcessResolver get() {
    IntPtr cPtr = library_swigPINVOKE.LibraryProcessResolver_SPtr_get(swigCPtr);
    LibraryProcessResolver ret = (cPtr == IntPtr.Zero) ? null : new LibraryProcessResolver(cPtr, false);
    return ret;
  }

  public LibraryProcessResolver __ref__() {
    LibraryProcessResolver ret = new LibraryProcessResolver(library_swigPINVOKE.LibraryProcessResolver_SPtr___ref__(swigCPtr), false);
    return ret;
  }

  public LibraryProcessResolver __deref__() {
    IntPtr cPtr = library_swigPINVOKE.LibraryProcessResolver_SPtr___deref__(swigCPtr);
    LibraryProcessResolver ret = (cPtr == IntPtr.Zero) ? null : new LibraryProcessResolver(cPtr, false);
    return ret;
  }

  public void swap(LibraryProcessResolver_SPtr rhs) {
    library_swigPINVOKE.LibraryProcessResolver_SPtr_swap(swigCPtr, LibraryProcessResolver_SPtr.getCPtr(rhs));
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public int release() {
    int ret = library_swigPINVOKE.LibraryProcessResolver_SPtr_release(swigCPtr);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addRef() {
    int ret = library_swigPINVOKE.LibraryProcessResolver_SPtr_addRef(swigCPtr);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LibraryProcessResolver_SPtr create() {
    LibraryProcessResolver_SPtr ret = new LibraryProcessResolver_SPtr(library_swigPINVOKE.LibraryProcessResolver_SPtr_create(swigCPtr), true);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IProcess_SPtr resolve(ProcRef procRef) {
    IProcess_SPtr ret = new IProcess_SPtr(library_swigPINVOKE.LibraryProcessResolver_SPtr_resolve(swigCPtr, ProcRef.getCPtr(procRef)), true);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IProcess_SPtr notifyResolve(IProcess_SPtr spProcess) {
    IProcess_SPtr ret = new IProcess_SPtr(library_swigPINVOKE.LibraryProcessResolver_SPtr_notifyResolve(swigCPtr, IProcess_SPtr.getCPtr(spProcess)), true);
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(LibraryProcessResolver_SPtr resolver) {
    library_swigPINVOKE.LibraryProcessResolver_SPtr_set(swigCPtr, LibraryProcessResolver_SPtr.getCPtr(resolver));
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void notifyFinalize(IProcess_SPtr spProc) {
    library_swigPINVOKE.LibraryProcessResolver_SPtr_notifyFinalize(swigCPtr, IProcess_SPtr.getCPtr(spProc));
    if (library_swigPINVOKE.SWIGPendingException.Pending) throw library_swigPINVOKE.SWIGPendingException.Retrieve();
  }

}
