/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class library_swigPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("library_swig", EntryPoint="SWIGRegisterExceptionCallbacks_library_swig")]
    public static extern void SWIGRegisterExceptionCallbacks_library_swig(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("library_swig", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_library_swig")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_library_swig(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_library_swig(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_library_swig(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(library_swigPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(library_swigPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  /// <summary>
  /// This struct wraps std::strings allocated in unmanaged space.
  /// This is required because std::string can contain null characters.
  /// </summary>
  [StructLayout(LayoutKind.Sequential)]
  public struct UnmanagedString {
    /// <summary>
    /// The number of bytes in the unmanaged string.
    /// </summary>
    private uint length;

    /// <summary>
    /// The byte array, allocated in unmanaged space.
    /// </summary>
    private IntPtr data;

    private static System.Text.UTF8Encoding utf8 = new System.Text.UTF8Encoding();

    /// <summary>
    /// Copies the string into a new unmanaged string.
    /// Can throw OutOfMemoryException, ArgumentNullException,
    /// or ArgumentOutOfRangeException (if the string is too long).
    /// </summary>
    static public IntPtr Create(String from) {
	  if (from == null) {
	    throw new ArgumentNullException(from);
	  }

      // Ctreate Utf8 string
      byte[] bytes = utf8.GetBytes(from);

      // Create a struct to contain the unmanaged string.
      UnmanagedString unmanagedString;

      // Set the length in the length field.
      unmanagedString.length = (uint)bytes.Length;

      int size = System.Runtime.InteropServices.Marshal.SizeOf(typeof(byte)) * bytes.Length;

      unmanagedString.data = System.Runtime.InteropServices.Marshal.AllocCoTaskMem(size);

      try {
        System.Runtime.InteropServices.Marshal.Copy(bytes, 0, unmanagedString.data , bytes.Length);
      } catch (Exception) {
        // This doesn't throw.
        System.Runtime.InteropServices.Marshal.FreeCoTaskMem(unmanagedString.data);
        throw;
      }

      try {
        // Allocate unmanaged space for the struct.
        // Can throw OutOfMemoryException.
        IntPtr unmanagedStringPtr = Marshal.AllocCoTaskMem(Marshal.SizeOf(unmanagedString));

        // Marshal the struct data into the unmanaged space allocated.
        // Can throw ArgumentException if misused, but it is not here.
        Marshal.StructureToPtr(unmanagedString, unmanagedStringPtr, false);

        // Return the pointer to the unmanaged struct.
        return unmanagedStringPtr;
      } catch (Exception) {
        // This doesn't throw.
        Marshal.FreeCoTaskMem(unmanagedString.data);
        throw;
      }
    }

    /// <summary>
    /// Copies the unmanaged string data into a new String and deallocates the
    /// unmanaged string.
    /// Can throw ArgumentNullException, or ArgumentException if IntPtr is bad.
    /// May return a null String if the struct pointed to by IntPtr had a null data pointer,
    /// which it shouldn't under proper usage.
    /// </summary>
    static public String Consume(IntPtr unmanagedStringPtr) {
      // Marshal the struct from the unmanaged space.
      // Can throw ArgumentNullException.
      // Can throw ArgumentException if IntPtr is bad.
      // Never returns null.
      UnmanagedString unmanagedString = 
        (UnmanagedString)Marshal.PtrToStructure(unmanagedStringPtr, typeof(UnmanagedString));

      // Allocate a managed string and copies characters into it.
      // Returns null if unmanagedString.data is null.
      // Can throw ArgumentException if the integer cast overflows.	
      
      byte[] bytes = new byte[(int)unmanagedString.length];

      System.Runtime.InteropServices.Marshal.Copy(unmanagedString.data, bytes, 0, bytes.Length);

      string to = utf8.GetString(bytes);

      // Free the unmanaged string data.
      // This doesn't throw, and is a no-op for null.
      Marshal.FreeCoTaskMem(unmanagedString.data);

      // Free the unmanaged struct.
      // This doesn't throw.
      Marshal.FreeCoTaskMem(unmanagedStringPtr);

      // Return the managed string.
      return to;
    }
  }

  /// <summary>
  /// This class is used for marshalling null-terminated char * strings
  /// allocated in unmanaged space.
  /// </summary>
  protected class SWIGStringHelper {
    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("library_swig", EntryPoint="SWIGRegisterStringCallback_library_swig")]
    public static extern void SWIGRegisterStringCallback_library_swig(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_library_swig(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static library_swigPINVOKE() {
  }


  [DllImport("library_swig", EntryPoint="CSharp_new_LibraryProcessResolver_SPtr__SWIG_0")]
  public static extern IntPtr new_LibraryProcessResolver_SPtr__SWIG_0();

  [DllImport("library_swig", EntryPoint="CSharp_new_LibraryProcessResolver_SPtr__SWIG_1")]
  public static extern IntPtr new_LibraryProcessResolver_SPtr__SWIG_1(HandleRef jarg1, bool jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_new_LibraryProcessResolver_SPtr__SWIG_2")]
  public static extern IntPtr new_LibraryProcessResolver_SPtr__SWIG_2(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_new_LibraryProcessResolver_SPtr__SWIG_3")]
  public static extern IntPtr new_LibraryProcessResolver_SPtr__SWIG_3(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_delete_LibraryProcessResolver_SPtr")]
  public static extern void delete_LibraryProcessResolver_SPtr(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_reset__SWIG_0")]
  public static extern void LibraryProcessResolver_SPtr_reset__SWIG_0(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_reset__SWIG_1")]
  public static extern void LibraryProcessResolver_SPtr_reset__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_get")]
  public static extern IntPtr LibraryProcessResolver_SPtr_get(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr___ref__")]
  public static extern IntPtr LibraryProcessResolver_SPtr___ref__(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr___deref__")]
  public static extern IntPtr LibraryProcessResolver_SPtr___deref__(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_swap")]
  public static extern void LibraryProcessResolver_SPtr_swap(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_release")]
  public static extern int LibraryProcessResolver_SPtr_release(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_addRef")]
  public static extern int LibraryProcessResolver_SPtr_addRef(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_create")]
  public static extern IntPtr LibraryProcessResolver_SPtr_create(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_resolve")]
  public static extern IntPtr LibraryProcessResolver_SPtr_resolve(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_notifyResolve")]
  public static extern IntPtr LibraryProcessResolver_SPtr_notifyResolve(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_set")]
  public static extern void LibraryProcessResolver_SPtr_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_SPtr_notifyFinalize")]
  public static extern void LibraryProcessResolver_SPtr_notifyFinalize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_new_LibraryProcessResolver")]
  public static extern IntPtr new_LibraryProcessResolver();

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_release")]
  public static extern int LibraryProcessResolver_release(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_releaseSwigExplicitLibraryProcessResolver")]
  public static extern int LibraryProcessResolver_releaseSwigExplicitLibraryProcessResolver(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_addRef")]
  public static extern int LibraryProcessResolver_addRef(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_addRefSwigExplicitLibraryProcessResolver")]
  public static extern int LibraryProcessResolver_addRefSwigExplicitLibraryProcessResolver(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_delete_LibraryProcessResolver")]
  public static extern void delete_LibraryProcessResolver(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_create")]
  public static extern IntPtr LibraryProcessResolver_create();

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_resolve")]
  public static extern IntPtr LibraryProcessResolver_resolve(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_resolveSwigExplicitLibraryProcessResolver")]
  public static extern IntPtr LibraryProcessResolver_resolveSwigExplicitLibraryProcessResolver(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_notifyResolve")]
  public static extern IntPtr LibraryProcessResolver_notifyResolve(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_notifyResolveSwigExplicitLibraryProcessResolver")]
  public static extern IntPtr LibraryProcessResolver_notifyResolveSwigExplicitLibraryProcessResolver(HandleRef jarg1, HandleRef jarg2);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_set")]
  public static extern void LibraryProcessResolver_set(HandleRef jarg1);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_reset")]
  public static extern void LibraryProcessResolver_reset();

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolver_director_connect")]
  public static extern void LibraryProcessResolver_director_connect(HandleRef jarg1, LibraryProcessResolver.SwigDelegateLibraryProcessResolver_0 delegate0, LibraryProcessResolver.SwigDelegateLibraryProcessResolver_1 delegate1, LibraryProcessResolver.SwigDelegateLibraryProcessResolver_2 delegate2, LibraryProcessResolver.SwigDelegateLibraryProcessResolver_3 delegate3, LibraryProcessResolver.SwigDelegateLibraryProcessResolver_4 delegate4);

  [DllImport("library_swig", EntryPoint="CSharp_LibraryProcessResolverUpcast")]
  public static extern IntPtr LibraryProcessResolverUpcast(IntPtr objectRef);
}
