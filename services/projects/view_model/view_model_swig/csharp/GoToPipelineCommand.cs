/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GoToPipelineCommand : Command {
  private HandleRef swigCPtr;

  public GoToPipelineCommand(IntPtr cPtr, bool cMemoryOwn) : base(view_model_swigPINVOKE.GoToPipelineCommandUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(GoToPipelineCommand obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GoToPipelineCommand() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        view_model_swigPINVOKE.delete_GoToPipelineCommand(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GoToPipelineCommand_SPtr create(IProcess_SPtr spProc, int nViewID) {
    GoToPipelineCommand_SPtr ret = new GoToPipelineCommand_SPtr(view_model_swigPINVOKE.GoToPipelineCommand_create(IProcess_SPtr.getCPtr(spProc), nViewID), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool execute() {
    bool ret = view_model_swigPINVOKE.GoToPipelineCommand_execute(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool undo() {
    bool ret = view_model_swigPINVOKE.GoToPipelineCommand_undo(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getName() {
  // Generated from %typemap(csout) string
  string ret = view_model_swigPINVOKE.UnmanagedString.Consume(view_model_swigPINVOKE.GoToPipelineCommand_getName(swigCPtr));
  
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public override bool getRecordable() {
    bool ret = view_model_swigPINVOKE.GoToPipelineCommand_getRecordable(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getUndoable() {
    bool ret = view_model_swigPINVOKE.GoToPipelineCommand_getUndoable(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getEnabled() {
    bool ret = view_model_swigPINVOKE.GoToPipelineCommand_getEnabled(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PYXGeometry_SPtr getGeometry(IProcess_SPtr spProc) {
    PYXGeometry_SPtr ret = new PYXGeometry_SPtr(view_model_swigPINVOKE.GoToPipelineCommand_getGeometry(IProcess_SPtr.getCPtr(spProc)), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
