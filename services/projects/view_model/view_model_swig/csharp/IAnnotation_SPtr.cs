/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IAnnotation_SPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IAnnotation_SPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IAnnotation_SPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IAnnotation_SPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        view_model_swigPINVOKE.delete_IAnnotation_SPtr(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public IAnnotation_SPtr() : this(view_model_swigPINVOKE.new_IAnnotation_SPtr__SWIG_0(), true) {
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public IAnnotation_SPtr(IAnnotation p, bool add_ref) : this(view_model_swigPINVOKE.new_IAnnotation_SPtr__SWIG_1(IAnnotation.getCPtr(p), add_ref), true) {
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public IAnnotation_SPtr(IAnnotation p) : this(view_model_swigPINVOKE.new_IAnnotation_SPtr__SWIG_2(IAnnotation.getCPtr(p)), true) {
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public IAnnotation_SPtr(IAnnotation_SPtr rhs) : this(view_model_swigPINVOKE.new_IAnnotation_SPtr__SWIG_3(IAnnotation_SPtr.getCPtr(rhs)), true) {
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    view_model_swigPINVOKE.IAnnotation_SPtr_reset__SWIG_0(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(IAnnotation rhs) {
    view_model_swigPINVOKE.IAnnotation_SPtr_reset__SWIG_1(swigCPtr, IAnnotation.getCPtr(rhs));
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public IAnnotation get() {
    IntPtr cPtr = view_model_swigPINVOKE.IAnnotation_SPtr_get(swigCPtr);
    IAnnotation ret = (cPtr == IntPtr.Zero) ? null : new IAnnotation(cPtr, false);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IAnnotation __ref__() {
    IAnnotation ret = new IAnnotation(view_model_swigPINVOKE.IAnnotation_SPtr___ref__(swigCPtr), false);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IAnnotation __deref__() {
    IntPtr cPtr = view_model_swigPINVOKE.IAnnotation_SPtr___deref__(swigCPtr);
    IAnnotation ret = (cPtr == IntPtr.Zero) ? null : new IAnnotation(cPtr, false);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(IAnnotation_SPtr rhs) {
    view_model_swigPINVOKE.IAnnotation_SPtr_swap(swigCPtr, IAnnotation_SPtr.getCPtr(rhs));
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = view_model_swigPINVOKE.IAnnotation_SPtr_isNull(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNotNull() {
    bool ret = view_model_swigPINVOKE.IAnnotation_SPtr_isNotNull(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProcRef getProcRef() {
    ProcRef ret = new ProcRef(view_model_swigPINVOKE.IAnnotation_SPtr_getProcRef(swigCPtr), false);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IProcess_SPtr getProcess() {
    IProcess_SPtr ret = new IProcess_SPtr(view_model_swigPINVOKE.IAnnotation_SPtr_getProcess(swigCPtr), false);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getFeatureID() {
  // Generated from typemap(csout) const string &
  string ret = view_model_swigPINVOKE.UnmanagedString.Consume(view_model_swigPINVOKE.IAnnotation_SPtr_getFeatureID(swigCPtr));
  
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  return ret;
}

  public IViewModel_SPtr getViewModel() {
    IViewModel_SPtr ret = new IViewModel_SPtr(view_model_swigPINVOKE.IAnnotation_SPtr_getViewModel(swigCPtr), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IFeature_SPtr getFeature() {
    IFeature_SPtr ret = new IFeature_SPtr(view_model_swigPINVOKE.IAnnotation_SPtr_getFeature(swigCPtr), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
