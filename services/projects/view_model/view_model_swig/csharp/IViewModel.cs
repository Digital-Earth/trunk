/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IViewModel : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IViewModel(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(IViewModel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IViewModel() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        view_model_swigPINVOKE.delete_IViewModel(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public virtual int getID() {
    int ret = view_model_swigPINVOKE.IViewModel_getID(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IProcess_SPtr getViewPointProcess() {
    IProcess_SPtr ret = new IProcess_SPtr(view_model_swigPINVOKE.IViewModel_getViewPointProcess(swigCPtr), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getViewportWidth() {
    int ret = view_model_swigPINVOKE.IViewModel_getViewportWidth(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getViewportHeight() {
    int ret = view_model_swigPINVOKE.IViewModel_getViewportHeight(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getMouseX() {
    int ret = view_model_swigPINVOKE.IViewModel_getMouseX(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getMouseY() {
    int ret = view_model_swigPINVOKE.IViewModel_getMouseY(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PYXCoord3DDouble getPointerLocation() {
    PYXCoord3DDouble ret = new PYXCoord3DDouble(view_model_swigPINVOKE.IViewModel_getPointerLocation(swigCPtr), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void showToolTip(string message, int period) {
    view_model_swigPINVOKE.IViewModel_showToolTip__SWIG_0(swigCPtr, view_model_swigPINVOKE.UnmanagedString.Create(message), period);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void showToolTip(string message, int x, int y, int period) {
    view_model_swigPINVOKE.IViewModel_showToolTip__SWIG_1(swigCPtr, view_model_swigPINVOKE.UnmanagedString.Create(message), x, y, period);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

}
