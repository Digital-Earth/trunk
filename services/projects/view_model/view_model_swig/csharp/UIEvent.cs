/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class UIEvent : NotifierEvent {
  private HandleRef swigCPtr;

  public UIEvent(IntPtr cPtr, bool cMemoryOwn) : base(view_model_swigPINVOKE.UIEventUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UIEvent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UIEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        view_model_swigPINVOKE.delete_UIEvent(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UIEvent(bool altKey, bool shiftKey, bool ctrlKey) : this(view_model_swigPINVOKE.new_UIEvent(altKey, shiftKey, ctrlKey), true) {
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public static UIEvent_SPtr create(bool altKey, bool shiftKey, bool ctrlKey) {
    UIEvent_SPtr ret = new UIEvent_SPtr(view_model_swigPINVOKE.UIEvent_create(altKey, shiftKey, ctrlKey), true);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isConsumed() {
    bool ret = view_model_swigPINVOKE.UIEvent_isConsumed(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setConsumed() {
    view_model_swigPINVOKE.UIEvent_setConsumed(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isAltKeyPressed() {
    bool ret = view_model_swigPINVOKE.UIEvent_isAltKeyPressed(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCtrlKeyPressed() {
    bool ret = view_model_swigPINVOKE.UIEvent_isCtrlKeyPressed(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isShiftKeyPressed() {
    bool ret = view_model_swigPINVOKE.UIEvent_isShiftKeyPressed(swigCPtr);
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
