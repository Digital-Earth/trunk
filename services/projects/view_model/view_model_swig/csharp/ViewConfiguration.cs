/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ViewConfiguration : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ViewConfiguration(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ViewConfiguration obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ViewConfiguration() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        view_model_swigPINVOKE.delete_ViewConfiguration(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public bool m_bOptDrawBackground {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bOptDrawBackground_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bOptDrawBackground_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_bDefaultShowControls {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bDefaultShowControls_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bDefaultShowControls_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_bOptShowAtmosphere {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bOptShowAtmosphere_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bOptShowAtmosphere_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_bOptShowDiagnostic {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bOptShowDiagnostic_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bOptShowDiagnostic_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_bOptShowStatus {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bOptShowStatus_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bOptShowStatus_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_bOptShowWorldAxes {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bOptShowWorldAxes_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bOptShowWorldAxes_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_bOptLockGrid {
    set {
      view_model_swigPINVOKE.ViewConfiguration_m_bOptLockGrid_set(swigCPtr, value);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = view_model_swigPINVOKE.ViewConfiguration_m_bOptLockGrid_get(swigCPtr);
      if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ViewConfiguration() : this(view_model_swigPINVOKE.new_ViewConfiguration(), true) {
    if (view_model_swigPINVOKE.SWIGPendingException.Pending) throw view_model_swigPINVOKE.SWIGPendingException.Retrieve();
  }

}
