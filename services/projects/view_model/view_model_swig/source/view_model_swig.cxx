/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_view_model_swig(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_view_model_swig(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning char * strings to C# without leaking memory. */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;

/* Struct for passing std::strings that may contain null characters. */
#ifdef __cplusplus
extern "C" 
#endif
typedef struct {
	size_t length;
	void const * data;
} UnmanagedString;

#include <string>
#include <objbase.h>

static inline UnmanagedString * CreateUnmanagedString(std::string const & from) {
  size_t const length = from.length();
  void * const data = CoTaskMemAlloc(length);
  if (!data) {
    return 0;
  }
  memcpy(data, from.data(), length);
  UnmanagedString * const unmanagedStringPtr = 
    (UnmanagedString * const)CoTaskMemAlloc(sizeof UnmanagedString);
  if (!unmanagedStringPtr) {
    CoTaskMemFree((LPVOID)data);
    return 0;
  }
  unmanagedStringPtr->length = length;
  unmanagedStringPtr->data = data;
  return unmanagedStringPtr;
}

static inline void ConsumeUnmanagedString(UnmanagedString *& unmanagedStringPtr, std::string & to) {
  if (!unmanagedStringPtr) {
    return;
  }
  to.assign((char const * const)(unmanagedStringPtr->data), unmanagedStringPtr->length);
  CoTaskMemFree((LPVOID)(unmanagedStringPtr->data));
  CoTaskMemFree((LPVOID)unmanagedStringPtr);
  unmanagedStringPtr = 0;
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_view_model_swig(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>



// So PYXObject operators are accessible (better way?)
#define SWIG_INTERNAL
#include "../../../../config/windows/force_include.h"

#include "pyxis/utility/exception.h"

#include "camera.h"
#include "go_to_pipeline_command.h"
#include "view.h"
#include "ui_events.h"
#include "view_model_api.h"
// #include "rhombus.h"
// #include "rhombus_utils.h"

// We get 64-bit portability warning C4267
// It's safe for us now, and might even be safe when re-SWIG'd for Win64.
// So I sent a message to swig-devel mailing list and disabled it for now.
// http://msdn2.microsoft.com/en-gb/library/6kck0s93(VS.80).aspx
#pragma warning(disable: 4267)


SWIGINTERN bool boost_intrusive_ptr_Sl_GoToPipelineCommand_Sg__isNull(boost::intrusive_ptr<GoToPipelineCommand > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_GoToPipelineCommand_Sg__isNotNull(boost::intrusive_ptr<GoToPipelineCommand > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_GoToPipelineCommand_SS_const_Sg__isNull(boost::intrusive_ptr<GoToPipelineCommand const > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_GoToPipelineCommand_SS_const_Sg__isNotNull(boost::intrusive_ptr<GoToPipelineCommand const > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN PYXCoord3DDouble Camera_getCenter(Camera const *self){ return CmlConvertor::toPYXCoord3D(self->getCenter()); }
SWIGINTERN PYXCoord3DDouble Camera_getEye(Camera const *self){ return CmlConvertor::toPYXCoord3D(self->getEye()); }
SWIGINTERN PYXCoord3DDouble Camera_getUp(Camera const *self){ return CmlConvertor::toPYXCoord3D(self->getUp()); }
SWIGINTERN PYXCoord3DDouble Camera_getLook(Camera const *self){ return CmlConvertor::toPYXCoord3D(self->getLook()); }
SWIGINTERN void Camera_setCenter(Camera *self,PYXCoord3DDouble center){ self->setCenter(center); }
SWIGINTERN ViewEvent *ViewEvent_dynamic_cast(NotifierEvent *pSource){
		return dynamic_cast<ViewEvent*>(pSource);
	}
SWIGINTERN AnnotationMouseEvent *AnnotationMouseEvent_dynamic_cast(NotifierEvent *pSource){
		return dynamic_cast<AnnotationMouseEvent*>(pSource);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_UIEvent_Sg__isNull(boost::intrusive_ptr<UIEvent > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_UIEvent_Sg__isNotNull(boost::intrusive_ptr<UIEvent > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_UIKeyEvent_Sg__isNull(boost::intrusive_ptr<UIKeyEvent > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_UIKeyEvent_Sg__isNotNull(boost::intrusive_ptr<UIKeyEvent > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_UIMouseEvent_Sg__isNull(boost::intrusive_ptr<UIMouseEvent > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_UIMouseEvent_Sg__isNotNull(boost::intrusive_ptr<UIMouseEvent > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_AnnotationMouseEvent_Sg__isNull(boost::intrusive_ptr<AnnotationMouseEvent > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_AnnotationMouseEvent_Sg__isNotNull(boost::intrusive_ptr<AnnotationMouseEvent > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IAnnotation_Sg__isNull(boost::intrusive_ptr<IAnnotation > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IAnnotation_Sg__isNotNull(boost::intrusive_ptr<IAnnotation > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ViewEvent_Sg__isNull(boost::intrusive_ptr<ViewEvent > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ViewEvent_Sg__isNotNull(boost::intrusive_ptr<ViewEvent > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ViewHandle_Sg__isNull(boost::intrusive_ptr<ViewHandle > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ViewHandle_Sg__isNotNull(boost::intrusive_ptr<ViewHandle > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IViewModel_Sg__isNull(boost::intrusive_ptr<IViewModel > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_IViewModel_Sg__isNotNull(boost::intrusive_ptr<IViewModel > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ToolTipRequest_Sg__isNull(boost::intrusive_ptr<ToolTipRequest > *self){
	    return self == nullptr || !(*self);
	}
SWIGINTERN bool boost_intrusive_ptr_Sl_ToolTipRequest_Sg__isNotNull(boost::intrusive_ptr<ToolTipRequest > *self){
		return self != nullptr && (*self);
	}
SWIGINTERN std::vector<float > *new_std_vector_Sl_float_Sg___SWIG_1(int capacity){
        std::vector<float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector<float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector<float >::const_reference std_vector_Sl_float_Sg__getitem(std::vector<float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector<float > *self,int index,std::vector<float >::value_type const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = value;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector<float > *self,std::vector<float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector<float > *std_vector_Sl_float_Sg__GetRange(std::vector<float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector<float > *self,int index,std::vector<float >::value_type const &value){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector<float > *self,int index,std::vector<float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector<float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector<float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector<float > *std_vector_Sl_float_Sg__Repeat(std::vector<float >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector<float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector<float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector<float > *self,int index,std::vector<float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector<float > *self,std::vector<float >::value_type const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector<float > *self,std::vector<float >::value_type const &value){
        int index = -1;
        std::vector<float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector<float > *self,std::vector<float >::value_type const &value){
        int index = -1;
        std::vector<float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN void std_vector_Sl_float_Sg__Remove(std::vector<float > *self,std::vector<float >::value_type const &value){
        std::vector<float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          self->erase(it);
      }

std::string camToCookieStr(const Camera& cam)
{
	std::string str;
	camToCookieStr(cam, str);
	return str;
}


    boost::intrusive_ptr<GoToPipelineCommand> DynamicPointerCast_GoToPipelineCommand(const boost::intrusive_ptr<Command>& sp)
    {
      return boost::dynamic_pointer_cast<GoToPipelineCommand, Command>(sp);
    }
    boost::intrusive_ptr<Command> DynamicPointerCast_Command(const boost::intrusive_ptr<GoToPipelineCommand>& sp)
    {
      return boost::dynamic_pointer_cast<Command, GoToPipelineCommand>(sp);
    }   

    boost::intrusive_ptr<const GoToPipelineCommand> DynamicPointerCast_const_GoToPipelineCommand(const boost::intrusive_ptr<const Command>& sp)
    {
      return boost::dynamic_pointer_cast<const GoToPipelineCommand, const Command>(sp);
    }
    boost::intrusive_ptr<const Command> DynamicPointerCast_const_Command(const boost::intrusive_ptr<const GoToPipelineCommand>& sp)
    {
      return boost::dynamic_pointer_cast<const Command, const GoToPipelineCommand>(sp);
    }   

  


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "view_model_swig.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand > *)new boost::intrusive_ptr<GoToPipelineCommand >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<GoToPipelineCommand > *result = 0 ;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand > *)new boost::intrusive_ptr<GoToPipelineCommand >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  boost::intrusive_ptr<GoToPipelineCommand > *result = 0 ;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand > *)new boost::intrusive_ptr<GoToPipelineCommand >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = 0 ;
  boost::intrusive_ptr<GoToPipelineCommand > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<GoToPipelineCommand > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand > *)new boost::intrusive_ptr<GoToPipelineCommand >((boost::intrusive_ptr<GoToPipelineCommand > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GoToPipelineCommand_SPtr(void * jarg1) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  GoToPipelineCommand *arg2 = (GoToPipelineCommand *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  arg2 = (GoToPipelineCommand *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  GoToPipelineCommand *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (GoToPipelineCommand *)((boost::intrusive_ptr<GoToPipelineCommand > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  GoToPipelineCommand *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    {
      GoToPipelineCommand &_result_ref = ((boost::intrusive_ptr<GoToPipelineCommand > const *)arg1)->operator *();
      result = (GoToPipelineCommand *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  GoToPipelineCommand *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (GoToPipelineCommand *)((boost::intrusive_ptr<GoToPipelineCommand > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  arg2 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<GoToPipelineCommand > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_GoToPipelineCommand_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_GoToPipelineCommand_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_create(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  boost::intrusive_ptr<IProcess > arg2 ;
  int arg3 ;
  boost::intrusive_ptr<GoToPipelineCommand > result;
  boost::intrusive_ptr<IProcess > *argp2 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  argp2 = (boost::intrusive_ptr<IProcess > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  
  try
  {
    result = (*arg1)->create(arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<GoToPipelineCommand >((boost::intrusive_ptr<GoToPipelineCommand > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_execute(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->execute();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_undo(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->undo();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getName(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (*arg1)->getName();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getRecordable(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getRecordable();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getUndoable(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getUndoable();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getEnabled(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getEnabled();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getGeometry(void * jarg1, void * jarg2) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  boost::intrusive_ptr<IProcess > arg2 ;
  boost::intrusive_ptr<PYXGeometry > result;
  boost::intrusive_ptr<IProcess > *argp2 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  argp2 = (boost::intrusive_ptr<IProcess > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return 0;
  }
  arg2 = *argp2; 
  
  try
  {
    result = (*arg1)->getGeometry(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_release(void * jarg1) {
  long jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  long result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (long)(*arg1)->release();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_addRef(void * jarg1) {
  long jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  long result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (long)(*arg1)->addRef();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getLongName(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (*arg1)->getLongName();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_drag(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (*arg1)->drag();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_redo(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->redo();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getCategory(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (*arg1)->getCategory();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_setCategory(void * jarg1, UnmanagedString * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (*arg1)->setCategory((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getPriority(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getPriority();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_setPriority(void * jarg1, int jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  int arg2 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    (*arg1)->setPriority(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getSubordinates(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::vector<boost::intrusive_ptr<Command > > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    {
      std::vector<boost::intrusive_ptr<Command > > &_result_ref = (*arg1)->getSubordinates();
      result = (std::vector<boost::intrusive_ptr<Command > > *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_addSubordinate(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  boost::intrusive_ptr<Command > arg2 ;
  boost::intrusive_ptr<Command > *argp2 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  argp2 = (boost::intrusive_ptr<Command > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<Command >", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (*arg1)->addSubordinate(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getChecked(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getChecked();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getType(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  Command::CommandType result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (Command::CommandType)(*arg1)->getType();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getToolTip(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (*arg1)->getToolTip();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_hasSubordinates(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->hasSubordinates();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_getLastException(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  PYXCommandException *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    result = (PYXCommandException *)(*arg1)->getLastException();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_setLastException(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  PYXCommandException *arg2 = (PYXCommandException *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  arg2 = (PYXCommandException *)jarg2; 
  
  try
  {
    (*arg1)->setLastException(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_Executed(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (*arg1)->Executed();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_SPtr_notifyCommandExecuted(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *) 0 ;
  ProcRef arg2 ;
  ProcRef *argp2 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1; 
  argp2 = (ProcRef *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ProcRef", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (*arg1)->notifyCommandExecuted(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_CSPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand const > *)new boost::intrusive_ptr<GoToPipelineCommand const >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_CSPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<GoToPipelineCommand const > *result = 0 ;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand const > *)new boost::intrusive_ptr<GoToPipelineCommand const >((GoToPipelineCommand const *)arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_CSPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  boost::intrusive_ptr<GoToPipelineCommand const > *result = 0 ;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand const > *)new boost::intrusive_ptr<GoToPipelineCommand const >((GoToPipelineCommand const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GoToPipelineCommand_CSPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = 0 ;
  boost::intrusive_ptr<GoToPipelineCommand const > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<GoToPipelineCommand const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<GoToPipelineCommand const > *)new boost::intrusive_ptr<GoToPipelineCommand const >((boost::intrusive_ptr<GoToPipelineCommand const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GoToPipelineCommand_CSPtr(void * jarg1) {
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  GoToPipelineCommand *arg2 = (GoToPipelineCommand *) 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  arg2 = (GoToPipelineCommand *)jarg2; 
  
  try
  {
    (arg1)->reset((GoToPipelineCommand const *)arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  GoToPipelineCommand *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (GoToPipelineCommand *)((boost::intrusive_ptr<GoToPipelineCommand const > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  GoToPipelineCommand *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    {
      GoToPipelineCommand const &_result_ref = ((boost::intrusive_ptr<GoToPipelineCommand const > const *)arg1)->operator *();
      result = (GoToPipelineCommand *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  GoToPipelineCommand *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (GoToPipelineCommand *)((boost::intrusive_ptr<GoToPipelineCommand const > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  arg2 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<GoToPipelineCommand const > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_GoToPipelineCommand_SS_const_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_GoToPipelineCommand_SS_const_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getName(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (*arg1)->getName();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getRecordable(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getRecordable();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getUndoable(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getUndoable();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getEnabled(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getEnabled();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_release(void * jarg1) {
  long jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  long result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (long)(*arg1)->release();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_addRef(void * jarg1) {
  long jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  long result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (long)(*arg1)->addRef();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getLongName(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (*arg1)->getLongName();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getCategory(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (*arg1)->getCategory();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getPriority(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getPriority();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getChecked(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->getChecked();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getType(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  Command::CommandType result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (Command::CommandType)(*arg1)->getType();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_getToolTip(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (*arg1)->getToolTip();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_CSPtr_hasSubordinates(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1; 
  
  try
  {
    result = (bool)(*arg1)->hasSubordinates();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_knModeOrbital_get() {
  int jresult ;
  int result;
  
  result = (int)Camera::knModeOrbital;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera() {
  void * jresult ;
  Camera *result = 0 ;
  
  
  try
  {
    result = (Camera *)new Camera();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_Camera_toString(void * jarg1) {
  UnmanagedString * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  std::string result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->toString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_Camera_getPerspectiveString(void * jarg1) {
  UnmanagedString * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  std::string result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->getPerspectiveString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_Camera_getEyeString(void * jarg1) {
  UnmanagedString * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  std::string result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->getEyeString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_Camera_getCenterString(void * jarg1) {
  UnmanagedString * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  std::string result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->getCenterString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_Camera_getUpString(void * jarg1) {
  UnmanagedString * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  std::string result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->getUpString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getFovy(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getFovy();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getAspect(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getAspect();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getNearz(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getNearz();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getFarz(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getFarz();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getHeading(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getHeading();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setHeading(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setHeading(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setFovy(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setFovy(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setAspect(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setAspect(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setNearz(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setNearz(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setFarz(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setFarz(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_getMode(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (int)((Camera const *)arg1)->getMode();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setMode(void * jarg1, int jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    (arg1)->setMode(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_isModeOrbital(void * jarg1) {
  unsigned int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  bool result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (bool)((Camera const *)arg1)->isModeOrbital();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getOrbitalAltitude(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getOrbitalAltitude();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getOribitalEyeAltitiude(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getOribitalEyeAltitiude();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getOribitalUnitAltitude(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getOribitalUnitAltitude();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getOrbitalTilt(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getOrbitalTilt();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Camera_getOrbitalRange(void * jarg1) {
  double jresult ;
  Camera *arg1 = (Camera *) 0 ;
  double result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = (double)((Camera const *)arg1)->getOrbitalRange();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getOrbitalTargetIndex(void * jarg1, int jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  PYXIcosIndex result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    result = ((Camera const *)arg1)->getOrbitalTargetIndex(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXIcosIndex((PYXIcosIndex &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getOrbitalTargetLatLon(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  CoordLatLon result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->getOrbitalTargetLatLon();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new CoordLatLon((CoordLatLon &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getOrbitalEyeIndex(void * jarg1, int jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  PYXIcosIndex result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    result = ((Camera const *)arg1)->getOrbitalEyeIndex(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXIcosIndex((PYXIcosIndex &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getOrbitalEyeLatLon(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  CoordLatLon result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = ((Camera const *)arg1)->getOrbitalEyeLatLon();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new CoordLatLon((CoordLatLon &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setOrbitalAltitude(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setOrbitalAltitude(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_adjustOrbitalAltitudeAndRange(void * jarg1, double jarg2, double jarg3) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  
  try
  {
    (arg1)->adjustOrbitalAltitudeAndRange(arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setOrbitalTilt(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setOrbitalTilt(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setOrbitalRange(void * jarg1, double jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  double arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (double)jarg2; 
  
  try
  {
    (arg1)->setOrbitalRange(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getCenter(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = Camera_getCenter((Camera const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getEye(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = Camera_getEye((Camera const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getUp(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = Camera_getUp((Camera const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_getLook(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    result = Camera_getLook((Camera const *)arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_setCenter(void * jarg1, void * jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  PYXCoord3DDouble arg2 ;
  PYXCoord3DDouble *argp2 ;
  
  arg1 = (Camera *)jarg1; 
  argp2 = (PYXCoord3DDouble *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PYXCoord3DDouble", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    Camera_setCenter(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Camera(void * jarg1) {
  Camera *arg1 = (Camera *) 0 ;
  
  arg1 = (Camera *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_lerp(void * jarg1, void * jarg2, double jarg3, void * jarg4) {
  Camera *arg1 = 0 ;
  Camera *arg2 = 0 ;
  double arg3 ;
  Camera *arg4 = 0 ;
  
  arg1 = (Camera *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return ;
  } 
  arg2 = (Camera *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (Camera *)jarg4;
  if(!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera & type is null", 0);
    return ;
  } 
  
  try
  {
    lerp((Camera const &)*arg1,(Camera const &)*arg2,arg3,*arg4);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_camToSettings(void * jarg1, double * jarg2, double * jarg3, double * jarg4, double * jarg5, double * jarg6, double * jarg7) {
  Camera *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  
  arg1 = (Camera *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return ;
  } 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  
  try
  {
    camToSettings((Camera const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_camFromSettings(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  Camera *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (Camera *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera & type is null", 0);
    return ;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  
  try
  {
    camFromSettings(*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_camFromCookieStr(void * jarg1, UnmanagedString * jarg2) {
  Camera *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Camera *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera & type is null", 0);
    return ;
  } 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    camFromCookieStr(*arg1,(std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GoToPipelineCommand(void * jarg1) {
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_create(void * jarg1, int jarg2) {
  void * jresult ;
  boost::intrusive_ptr<IProcess > arg1 ;
  int arg2 ;
  boost::intrusive_ptr<GoToPipelineCommand > result;
  boost::intrusive_ptr<IProcess > *argp1 ;
  
  argp1 = (boost::intrusive_ptr<IProcess > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  
  try
  {
    result = GoToPipelineCommand::create(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<GoToPipelineCommand >((boost::intrusive_ptr<GoToPipelineCommand > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_execute(void * jarg1) {
  unsigned int jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool result;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (bool)(arg1)->execute();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_undo(void * jarg1) {
  unsigned int jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool result;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (bool)(arg1)->undo();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_GoToPipelineCommand_getName(void * jarg1) {
  UnmanagedString * jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  std::string result;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = ((GoToPipelineCommand const *)arg1)->getName();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_getRecordable(void * jarg1) {
  unsigned int jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool result;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (bool)((GoToPipelineCommand const *)arg1)->getRecordable();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_getUndoable(void * jarg1) {
  unsigned int jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool result;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (bool)((GoToPipelineCommand const *)arg1)->getUndoable();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GoToPipelineCommand_getEnabled(void * jarg1) {
  unsigned int jresult ;
  GoToPipelineCommand *arg1 = (GoToPipelineCommand *) 0 ;
  bool result;
  
  arg1 = (GoToPipelineCommand *)jarg1; 
  
  try
  {
    result = (bool)((GoToPipelineCommand const *)arg1)->getEnabled();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GoToPipelineCommand_getGeometry(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IProcess > arg1 ;
  boost::intrusive_ptr<PYXGeometry > result;
  boost::intrusive_ptr<IProcess > *argp1 ;
  
  argp1 = (boost::intrusive_ptr<IProcess > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return 0;
  }
  arg1 = *argp1; 
  
  try
  {
    result = GoToPipelineCommand::getGeometry(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_create(UnmanagedString * jarg1) {
  void * jresult ;
  std::string arg1 ;
  boost::intrusive_ptr<ViewEvent > result;
  
  
  // Generated from typemap(in) string
  ConsumeUnmanagedString(jarg1, arg1);
  
  
  try
  {
    result = ViewEvent::create(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ViewEvent >((boost::intrusive_ptr<ViewEvent > &)result); 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ViewEvent_getValue(void * jarg1) {
  UnmanagedString * jresult ;
  ViewEvent *arg1 = (ViewEvent *) 0 ;
  std::string result;
  
  arg1 = (ViewEvent *)jarg1; 
  
  try
  {
    result = (arg1)->getValue();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_dynamic_cast(void * jarg1) {
  void * jresult ;
  NotifierEvent *arg1 = (NotifierEvent *) 0 ;
  ViewEvent *result = 0 ;
  
  arg1 = (NotifierEvent *)jarg1; 
  {
    // TODO maybe we shouldn't completely override global exception handler,
    // but somehow extend it?
    result = (ViewEvent *)ViewEvent_dynamic_cast(arg1);
    if (!result)
    {
      // TODO this should be InvalidCastException
      SWIG_CSharpSetPendingException(
        SWIG_CSharpInvalidCastException,
        "C++ dynamic_cast<"
        "ViewEvent"
        ">("
        "NotifierEvent"
        ") failed"); // seems that this needs to be on separate line
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ViewEvent(void * jarg1) {
  ViewEvent *arg1 = (ViewEvent *) 0 ;
  
  arg1 = (ViewEvent *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bOptDrawBackground_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptDrawBackground = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bOptDrawBackground_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bOptDrawBackground);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bDefaultShowControls_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDefaultShowControls = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bDefaultShowControls_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bDefaultShowControls);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowAtmosphere_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptShowAtmosphere = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowAtmosphere_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bOptShowAtmosphere);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowDiagnostic_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptShowDiagnostic = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowDiagnostic_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bOptShowDiagnostic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowStatus_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptShowStatus = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowStatus_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bOptShowStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowWorldAxes_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptShowWorldAxes = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bOptShowWorldAxes_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bOptShowWorldAxes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewConfiguration_m_bOptLockGrid_set(void * jarg1, unsigned int jarg2) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptLockGrid = arg2;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewConfiguration_m_bOptLockGrid_get(void * jarg1) {
  unsigned int jresult ;
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  bool result;
  
  arg1 = (ViewConfiguration *)jarg1; 
  result = (bool) ((arg1)->m_bOptLockGrid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewConfiguration() {
  void * jresult ;
  ViewConfiguration *result = 0 ;
  
  
  try
  {
    result = (ViewConfiguration *)new ViewConfiguration();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ViewConfiguration(void * jarg1) {
  ViewConfiguration *arg1 = (ViewConfiguration *) 0 ;
  
  arg1 = (ViewConfiguration *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_test() {
  try
  {
    View::test();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_isView(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  
  try
  {
    result = (bool)View::isView(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getView(int jarg1) {
  void * jresult ;
  int arg1 ;
  View *result = 0 ;
  
  arg1 = (int)jarg1; 
  
  try
  {
    result = (View *)View::getView(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getViewCount() {
  int jresult ;
  int result;
  
  
  try
  {
    result = (int)View::getViewCount();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_closeAllResources() {
  try
  {
    View::closeAllResources();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT double SWIGSTDCALL CSharp_View_calcEyeAltitude__SWIG_0(void * jarg1) {
  double jresult ;
  Camera *arg1 = 0 ;
  double result;
  
  arg1 = (Camera *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (double)View::calcEyeAltitude((Camera const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_View__SWIG_0() {
  void * jresult ;
  View *result = 0 ;
  
  
  try
  {
    result = (View *)new View();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_View__SWIG_1(int jarg1) {
  void * jresult ;
  ViewTheme arg1 ;
  View *result = 0 ;
  
  arg1 = (ViewTheme)jarg1; 
  
  try
  {
    result = (View *)new View(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_View(void * jarg1) {
  View *arg1 = (View *) 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_dispose(void * jarg1) {
  View *arg1 = (View *) 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    (arg1)->dispose();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getID(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)((View const *)arg1)->getID();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getCamera(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Camera result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = ((View const *)arg1)->getCamera();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new Camera((Camera &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getViewportWidth(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)((View const *)arg1)->getViewportWidth();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getViewportHeight(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)((View const *)arg1)->getViewportHeight();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_View_calcEyeAltitude__SWIG_1(void * jarg1) {
  double jresult ;
  View *arg1 = (View *) 0 ;
  double result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (double)((View const *)arg1)->calcEyeAltitude();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getViewPointProcess(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = ((View const *)arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setViewPointProcess(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<IProcess > arg2 ;
  boost::intrusive_ptr<IProcess > *argp2 ;
  
  arg1 = (View *)jarg1; 
  argp2 = (boost::intrusive_ptr<IProcess > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IProcess >", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (arg1)->setViewPointProcess(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_knDataResOffset_get() {
  int jresult ;
  int result;
  
  result = (int)View::knDataResOffset;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getViewTileResolution(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)(arg1)->getViewTileResolution();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getViewDataResolution(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)(arg1)->getViewDataResolution();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_display(void * jarg1) {
  View *arg1 = (View *) 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    (arg1)->display();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_reshape(void * jarg1, int jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->reshape(arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_releaseOpenGLResources(void * jarg1) {
  View *arg1 = (View *) 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    (arg1)->releaseOpenGLResources();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToCamera__SWIG_0(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  Camera *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (Camera *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->goToCamera((Camera const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToCamera__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  Camera *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (Camera *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->goToCamera((Camera const &)*arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToIndex__SWIG_0(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  PYXIcosIndex *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (PYXIcosIndex *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PYXIcosIndex const & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->goToIndex((PYXIcosIndex const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToIndex__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  PYXIcosIndex *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (PYXIcosIndex *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PYXIcosIndex const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->goToIndex((PYXIcosIndex const &)*arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToGeometry__SWIG_0(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<PYXGeometry > *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (boost::intrusive_ptr<PYXGeometry > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<PYXGeometry > const & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->goToGeometry((boost::intrusive_ptr<PYXGeometry > const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToGeometry__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<PYXGeometry > *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (boost::intrusive_ptr<PYXGeometry > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<PYXGeometry > const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->goToGeometry((boost::intrusive_ptr<PYXGeometry > const &)*arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToFeature__SWIG_0(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<IFeature > *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (boost::intrusive_ptr<IFeature > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IFeature > const & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->goToFeature((boost::intrusive_ptr<IFeature > const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToFeature__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<IFeature > *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (boost::intrusive_ptr<IFeature > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IFeature > const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->goToFeature((boost::intrusive_ptr<IFeature > const &)*arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToLatlon__SWIG_0(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  CoordLatLon *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (CoordLatLon *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CoordLatLon const & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->goToLatlon((CoordLatLon const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_goToLatlon__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  CoordLatLon *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (CoordLatLon *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CoordLatLon const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->goToLatlon((CoordLatLon const &)*arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_startTrip(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<FeatureIterator > *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (boost::intrusive_ptr<FeatureIterator > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<FeatureIterator > const & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->startTrip((boost::intrusive_ptr<FeatureIterator > const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getMouseX(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)((View const *)arg1)->getMouseX();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getMouseY(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)((View const *)arg1)->getMouseY();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getPointerLocation(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (arg1)->getPointerLocation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getPointerIndex(void * jarg1, int jarg2) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  int arg2 ;
  PYXIcosIndex result;
  
  arg1 = (View *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    result = (arg1)->getPointerIndex(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXIcosIndex((PYXIcosIndex &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getIndexFromScreen(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  int arg2 ;
  int arg3 ;
  PYXIcosIndex result;
  
  arg1 = (View *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  try
  {
    result = (arg1)->getIndexFromScreen(arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXIcosIndex((PYXIcosIndex &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_projectFromScreenSpace(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  int arg2 ;
  int arg3 ;
  PYXCoord3DDouble result;
  
  arg1 = (View *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  try
  {
    result = (arg1)->projectFromScreenSpace(arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_projectToScreenSpace(void * jarg1, void * jarg2) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  PYXCoord3DDouble arg2 ;
  PYXCoord2DDouble result;
  PYXCoord3DDouble *argp2 ;
  
  arg1 = (View *)jarg1; 
  argp2 = (PYXCoord3DDouble *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PYXCoord3DDouble", 0);
    return 0;
  }
  arg2 = *argp2; 
  
  try
  {
    result = (arg1)->projectToScreenSpace(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord2DDouble((PYXCoord2DDouble &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getPOI(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<PYXGeometry > result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (arg1)->getPOI();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setPOI(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<PYXGeometry > arg2 ;
  boost::intrusive_ptr<PYXGeometry > const *argp2 ;
  
  arg1 = (View *)jarg1; 
  argp2 = (boost::intrusive_ptr<PYXGeometry > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<PYXGeometry > const", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (arg1)->setPOI(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_calculateWatershed(void * jarg1, void * jarg2) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  PYXIcosIndex *arg2 = 0 ;
  boost::intrusive_ptr<PYXGeometry > result;
  
  arg1 = (View *)jarg1; 
  arg2 = (PYXIcosIndex *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PYXIcosIndex const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (arg1)->calculateWatershed((PYXIcosIndex const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_calculateWatershedFlow(void * jarg1, void * jarg2) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  PYXIcosIndex *arg2 = 0 ;
  boost::intrusive_ptr<PYXGeometry > result;
  
  arg1 = (View *)jarg1; 
  arg2 = (PYXIcosIndex *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PYXIcosIndex const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (arg1)->calculateWatershedFlow((PYXIcosIndex const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_getVisibleTiles__SWIG_0(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  std::vector<PYXIcosIndex > *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (std::vector<PYXIcosIndex > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<PYXIcosIndex > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->getVisibleTiles(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_getVisibleTiles__SWIG_1(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  PYXMultiCell *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (PYXMultiCell *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PYXMultiCell & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->getVisibleTiles(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_getVisibleTiles__SWIG_2(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  PYXTileCollection *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (PYXTileCollection *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PYXTileCollection & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->getVisibleTiles(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getScreenGeometry__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  int arg2 ;
  boost::intrusive_ptr<PYXGeometry > result;
  
  arg1 = (View *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    result = (arg1)->getScreenGeometry(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getScreenGeometry__SWIG_1(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<PYXGeometry > result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (arg1)->getScreenGeometry();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<PYXGeometry >((boost::intrusive_ptr<PYXGeometry > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_getOptShowAtmosphere(void * jarg1) {
  unsigned int jresult ;
  View *arg1 = (View *) 0 ;
  bool result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (bool)((View const *)arg1)->getOptShowAtmosphere();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setOptShowAtmosphere(void * jarg1, unsigned int jarg2) {
  View *arg1 = (View *) 0 ;
  bool arg2 ;
  
  arg1 = (View *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (arg1)->setOptShowAtmosphere(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_getOptShowDiagnostic(void * jarg1) {
  unsigned int jresult ;
  View *arg1 = (View *) 0 ;
  bool result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (bool)((View const *)arg1)->getOptShowDiagnostic();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setOptShowDiagnostic(void * jarg1, unsigned int jarg2) {
  View *arg1 = (View *) 0 ;
  bool arg2 ;
  
  arg1 = (View *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (arg1)->setOptShowDiagnostic(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_getOptShowStatus(void * jarg1) {
  unsigned int jresult ;
  View *arg1 = (View *) 0 ;
  bool result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (bool)((View const *)arg1)->getOptShowStatus();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setOptShowStatus(void * jarg1, unsigned int jarg2) {
  View *arg1 = (View *) 0 ;
  bool arg2 ;
  
  arg1 = (View *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (arg1)->setOptShowStatus(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_getOptShowWorldAxes(void * jarg1) {
  unsigned int jresult ;
  View *arg1 = (View *) 0 ;
  bool result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (bool)((View const *)arg1)->getOptShowWorldAxes();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setOptShowWorldAxes(void * jarg1, unsigned int jarg2) {
  View *arg1 = (View *) 0 ;
  bool arg2 ;
  
  arg1 = (View *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (arg1)->setOptShowWorldAxes(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_getOptLockGrid(void * jarg1) {
  unsigned int jresult ;
  View *arg1 = (View *) 0 ;
  bool result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (bool)((View const *)arg1)->getOptLockGrid();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setOptLockGrid(void * jarg1, unsigned int jarg2) {
  View *arg1 = (View *) 0 ;
  bool arg2 ;
  
  arg1 = (View *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    (arg1)->setOptLockGrid(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_lodEnabled__SWIG_0(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  
  try
  {
    result = (bool)View::lodEnabled(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_View_lodEnabled__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  
  try
  {
    result = (bool)View::lodEnabled();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getEndMoveNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getEndMoveNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getPointerNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getPointerNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getStreamingNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getStreamingNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getEyeAltNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getEyeAltNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getResolutionNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getResolutionNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getErrorNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getErrorNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getAnnotationClickNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getAnnotationClickNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getAnnotationDoubleClickNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getAnnotationDoubleClickNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getAnnotationMouseMoveNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getAnnotationMouseMoveNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getAnnotationMouseEnterNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getAnnotationMouseEnterNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getAnnotationMouseLeaveNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getAnnotationMouseLeaveNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getPOIChangeNotifier(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  Notifier *result = 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    {
      Notifier &_result_ref = (arg1)->getPOIChangeNotifier();
      result = (Notifier *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_View_getErrorString(void * jarg1) {
  UnmanagedString * jresult ;
  View *arg1 = (View *) 0 ;
  std::string result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (arg1)->getErrorString();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setPointerIndex(void * jarg1, UnmanagedString * jarg2) {
  View *arg1 = (View *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (arg1)->setPointerIndex((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setStreamingProgress(void * jarg1, UnmanagedString * jarg2, int jarg3) {
  View *arg1 = (View *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (View *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  arg3 = (int)jarg3; 
  
  try
  {
    (arg1)->setStreamingProgress((std::string const &)*arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setEyeAlt(void * jarg1, UnmanagedString * jarg2) {
  View *arg1 = (View *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (View *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    (arg1)->setEyeAlt((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_setResolution(void * jarg1, int jarg2) {
  View *arg1 = (View *) 0 ;
  int arg2 ;
  
  arg1 = (View *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    (arg1)->setResolution(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_forceNotification(void * jarg1) {
  View *arg1 = (View *) 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    (arg1)->forceNotification();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getStreamingProgress__SWIG_0(void * jarg1) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (int)(arg1)->getStreamingProgress();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getStreamingProgress__SWIG_1(void * jarg1, UnmanagedString * jarg2) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    result = (int)(arg1)->getStreamingProgress((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_View_getStreamingProgress__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  View *arg1 = (View *) 0 ;
  ProcRef *arg2 = 0 ;
  int result;
  
  arg1 = (View *)jarg1; 
  arg2 = (ProcRef *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ProcRef const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (int)(arg1)->getStreamingProgress((ProcRef const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_startPerformanceRecording(void * jarg1, UnmanagedString * jarg2) {
  View *arg1 = (View *) 0 ;
  std::string arg2 ;
  
  arg1 = (View *)jarg1; 
  
  // Generated from typemap(in) string
  ConsumeUnmanagedString(jarg2, arg2);
  
  
  try
  {
    (arg1)->startPerformanceRecording(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_stopPerfromanceRecording(void * jarg1) {
  View *arg1 = (View *) 0 ;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    (arg1)->stopPerfromanceRecording();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT double SWIGSTDCALL CSharp_View_getRenderTime(void * jarg1, UnmanagedString * jarg2) {
  double jresult ;
  View *arg1 = (View *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (View *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  
  try
  {
    result = (double)(arg1)->getRenderTime((std::string const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_View_getToolTipRequest(void * jarg1) {
  void * jresult ;
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<ToolTipRequest > result;
  
  arg1 = (View *)jarg1; 
  
  try
  {
    result = (arg1)->getToolTipRequest();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ToolTipRequest >((boost::intrusive_ptr<ToolTipRequest > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_addToolTipRequest(void * jarg1, void * jarg2) {
  View *arg1 = (View *) 0 ;
  boost::intrusive_ptr<ToolTipRequest > arg2 ;
  boost::intrusive_ptr<ToolTipRequest > *argp2 ;
  
  arg1 = (View *)jarg1; 
  argp2 = (boost::intrusive_ptr<ToolTipRequest > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<ToolTipRequest >", 0);
    return ;
  }
  arg2 = *argp2; 
  
  try
  {
    (arg1)->addToolTipRequest(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onMouseClick(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  View *arg1 = (View *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    (arg1)->onMouseClick((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onMouseDoubleClick(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  View *arg1 = (View *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    (arg1)->onMouseDoubleClick((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onMouseMove(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  View *arg1 = (View *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    (arg1)->onMouseMove((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onMouseUp(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  View *arg1 = (View *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    (arg1)->onMouseUp((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onMouseDown(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  View *arg1 = (View *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    (arg1)->onMouseDown((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onMouseWheel(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  View *arg1 = (View *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    (arg1)->onMouseWheel((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onKeyPressed(void * jarg1, char jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  View *arg1 = (View *) 0 ;
  char *arg2 = 0 ;
  int *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  char temp2 ;
  int temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  
  try
  {
    (arg1)->onKeyPressed((char const &)*arg2,(int const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onKeyUp(void * jarg1, char jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  View *arg1 = (View *) 0 ;
  char *arg2 = 0 ;
  int *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  char temp2 ;
  int temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  
  try
  {
    (arg1)->onKeyUp((char const &)*arg2,(int const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_View_onKeyDown(void * jarg1, char jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  View *arg1 = (View *) 0 ;
  char *arg2 = 0 ;
  int *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  char temp2 ;
  int temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  
  arg1 = (View *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  
  try
  {
    (arg1)->onKeyDown((char const &)*arg2,(int const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIEvent(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  UIEvent *result = 0 ;
  bool temp1 ;
  bool temp2 ;
  bool temp3 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  
  try
  {
    result = (UIEvent *)new UIEvent((bool const &)*arg1,(bool const &)*arg2,(bool const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIEvent_create(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  boost::intrusive_ptr<UIEvent > result;
  bool temp1 ;
  bool temp2 ;
  bool temp3 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  
  try
  {
    result = UIEvent::create((bool const &)*arg1,(bool const &)*arg2,(bool const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<UIEvent >((boost::intrusive_ptr<UIEvent > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIEvent(void * jarg1) {
  UIEvent *arg1 = (UIEvent *) 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_isConsumed(void * jarg1) {
  unsigned int jresult ;
  UIEvent *arg1 = (UIEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIEvent const *)arg1)->isConsumed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIEvent_setConsumed(void * jarg1) {
  UIEvent *arg1 = (UIEvent *) 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    (arg1)->setConsumed();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_isAltKeyPressed(void * jarg1) {
  unsigned int jresult ;
  UIEvent *arg1 = (UIEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIEvent const *)arg1)->isAltKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_isCtrlKeyPressed(void * jarg1) {
  unsigned int jresult ;
  UIEvent *arg1 = (UIEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIEvent const *)arg1)->isCtrlKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_isShiftKeyPressed(void * jarg1) {
  unsigned int jresult ;
  UIEvent *arg1 = (UIEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIEvent const *)arg1)->isShiftKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIKeyEvent(char jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = 0 ;
  int *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  UIKeyEvent *result = 0 ;
  char temp1 ;
  int temp2 ;
  bool temp3 ;
  bool temp4 ;
  bool temp5 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  
  try
  {
    result = (UIKeyEvent *)new UIKeyEvent((char const &)*arg1,(int const &)*arg2,(bool const &)*arg3,(bool const &)*arg4,(bool const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIKeyEvent_create(char jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = 0 ;
  int *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  boost::intrusive_ptr<UIKeyEvent > result;
  char temp1 ;
  int temp2 ;
  bool temp3 ;
  bool temp4 ;
  bool temp5 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  
  try
  {
    result = UIKeyEvent::create((char const &)*arg1,(int const &)*arg2,(bool const &)*arg3,(bool const &)*arg4,(bool const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<UIKeyEvent >((boost::intrusive_ptr<UIKeyEvent > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIKeyEvent(void * jarg1) {
  UIKeyEvent *arg1 = (UIKeyEvent *) 0 ;
  
  arg1 = (UIKeyEvent *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT char SWIGSTDCALL CSharp_UIKeyEvent_getKeyChar(void * jarg1) {
  char jresult ;
  UIKeyEvent *arg1 = (UIKeyEvent *) 0 ;
  char *result = 0 ;
  
  arg1 = (UIKeyEvent *)jarg1; 
  
  try
  {
    {
      char const &_result_ref = ((UIKeyEvent const *)arg1)->getKeyChar();
      result = (char *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UIKeyEvent_getKeyCode(void * jarg1) {
  int jresult ;
  UIKeyEvent *arg1 = (UIKeyEvent *) 0 ;
  int *result = 0 ;
  
  arg1 = (UIKeyEvent *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = ((UIKeyEvent const *)arg1)->getKeyCode();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_isKeyChar(void * jarg1, char jarg2) {
  unsigned int jresult ;
  UIKeyEvent *arg1 = (UIKeyEvent *) 0 ;
  char *arg2 = 0 ;
  bool result;
  char temp2 ;
  
  arg1 = (UIKeyEvent *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    result = (bool)(arg1)->isKeyChar((char const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIMouseEvent(double jarg1, double jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  int *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  UIMouseEvent *result = 0 ;
  double temp1 ;
  double temp2 ;
  int temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  
  try
  {
    result = (UIMouseEvent *)new UIMouseEvent((double const &)*arg1,(double const &)*arg2,(int const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIMouseEvent_create(double jarg1, double jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  int *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  boost::intrusive_ptr<UIMouseEvent > result;
  double temp1 ;
  double temp2 ;
  int temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  
  try
  {
    result = UIMouseEvent::create((double const &)*arg1,(double const &)*arg2,(int const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<UIMouseEvent >((boost::intrusive_ptr<UIMouseEvent > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIMouseEvent(void * jarg1) {
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT double SWIGSTDCALL CSharp_UIMouseEvent_getMouseX(void * jarg1) {
  double jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  double *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    {
      double const &_result_ref = ((UIMouseEvent const *)arg1)->getMouseX();
      result = (double *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UIMouseEvent_getMouseY(void * jarg1) {
  double jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  double *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    {
      double const &_result_ref = ((UIMouseEvent const *)arg1)->getMouseY();
      result = (double *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UIMouseEvent_getWheelDelta(void * jarg1) {
  int jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  int *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = ((UIMouseEvent const *)arg1)->getWheelDelta();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_isLeftButtonDown(void * jarg1) {
  unsigned int jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIMouseEvent const *)arg1)->isLeftButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_isRightButtonDown(void * jarg1) {
  unsigned int jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIMouseEvent const *)arg1)->isRightButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_isMiddleButtonDown(void * jarg1) {
  unsigned int jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  bool *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = ((UIMouseEvent const *)arg1)->isMiddleButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UIMouseEvent_mouseDistanceFrom(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double result;
  double temp2 ;
  double temp3 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    result = (double)((UIMouseEvent const *)arg1)->mouseDistanceFrom((double const &)*arg2,(double const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_isInsideRect(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  unsigned int jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool result;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    result = (bool)((UIMouseEvent const *)arg1)->isInsideRect((double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_getProcRef(void * jarg1) {
  void * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  ProcRef *result = 0 ;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    {
      ProcRef const &_result_ref = ((IAnnotation const *)arg1)->getProcRef();
      result = (ProcRef *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_getProcess(void * jarg1) {
  void * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  boost::intrusive_ptr<IProcess > *result = 0 ;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    {
      boost::intrusive_ptr<IProcess > const &_result_ref = ((IAnnotation const *)arg1)->getProcess();
      result = (boost::intrusive_ptr<IProcess > *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_IAnnotation_getFeatureID(void * jarg1) {
  UnmanagedString * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    {
      std::string const &_result_ref = ((IAnnotation const *)arg1)->getFeatureID();
      result = (std::string *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) const string &
  jresult = CreateUnmanagedString(*result);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_getViewModel(void * jarg1) {
  void * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  boost::intrusive_ptr<IViewModel > result;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    result = (arg1)->getViewModel();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IViewModel >((boost::intrusive_ptr<IViewModel > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_getFeature(void * jarg1) {
  void * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  boost::intrusive_ptr<IFeature > result;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    result = (arg1)->getFeature();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IFeature >((boost::intrusive_ptr<IFeature > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAnnotation(void * jarg1) {
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_getID(void * jarg1) {
  int jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  int result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (int)((IViewModel const *)arg1)->getID();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_getViewPointProcess(void * jarg1) {
  void * jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_getViewportWidth(void * jarg1) {
  int jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  int result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (int)((IViewModel const *)arg1)->getViewportWidth();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_getViewportHeight(void * jarg1) {
  int jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  int result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (int)((IViewModel const *)arg1)->getViewportHeight();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_getMouseX(void * jarg1) {
  int jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  int result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (int)((IViewModel const *)arg1)->getMouseX();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_getMouseY(void * jarg1) {
  int jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  int result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (int)((IViewModel const *)arg1)->getMouseY();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_getPointerLocation(void * jarg1) {
  void * jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (arg1)->getPointerLocation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_showToolTip__SWIG_0(void * jarg1, UnmanagedString * jarg2, int jarg3) {
  IViewModel *arg1 = (IViewModel *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (IViewModel *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    (arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_showToolTip__SWIG_1(void * jarg1, UnmanagedString * jarg2, int jarg3, int jarg4, int jarg5) {
  IViewModel *arg1 = (IViewModel *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  
  arg1 = (IViewModel *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    (arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IViewModel(void * jarg1) {
  IViewModel *arg1 = (IViewModel *) 0 ;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_create(int jarg1) {
  void * jresult ;
  int arg1 ;
  boost::intrusive_ptr<ViewHandle > result;
  
  arg1 = (int)jarg1; 
  
  try
  {
    result = ViewHandle::create(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ViewHandle >((boost::intrusive_ptr<ViewHandle > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_getID(void * jarg1) {
  int jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  int result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (int)((ViewHandle const *)arg1)->getID();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_getViewPointProcess(void * jarg1) {
  void * jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_getViewportWidth(void * jarg1) {
  int jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  int result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (int)((ViewHandle const *)arg1)->getViewportWidth();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_getViewportHeight(void * jarg1) {
  int jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  int result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (int)((ViewHandle const *)arg1)->getViewportHeight();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_getMouseX(void * jarg1) {
  int jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  int result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (int)((ViewHandle const *)arg1)->getMouseX();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_getMouseY(void * jarg1) {
  int jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  int result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (int)((ViewHandle const *)arg1)->getMouseY();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_getPointerLocation(void * jarg1) {
  void * jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (arg1)->getPointerLocation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_showToolTip__SWIG_0(void * jarg1, UnmanagedString * jarg2, int jarg3) {
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (ViewHandle *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    (arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_showToolTip__SWIG_1(void * jarg1, UnmanagedString * jarg2, int jarg3, int jarg4, int jarg5) {
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  
  arg1 = (ViewHandle *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    (arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationMouseEvent(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > arg1 ;
  boost::intrusive_ptr<IAnnotation > arg2 ;
  boost::intrusive_ptr<IViewModel > arg3 ;
  AnnotationMouseEvent *result = 0 ;
  boost::intrusive_ptr<UIMouseEvent > *argp1 ;
  boost::intrusive_ptr<IAnnotation > *argp2 ;
  boost::intrusive_ptr<IViewModel > *argp3 ;
  
  argp1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<UIMouseEvent >", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (boost::intrusive_ptr<IAnnotation > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IAnnotation >", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (boost::intrusive_ptr<IViewModel > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IViewModel >", 0);
    return 0;
  }
  arg3 = *argp3; 
  
  try
  {
    result = (AnnotationMouseEvent *)new AnnotationMouseEvent(arg1,arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_create(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > arg1 ;
  boost::intrusive_ptr<IAnnotation > arg2 ;
  boost::intrusive_ptr<IViewModel > arg3 ;
  boost::intrusive_ptr<AnnotationMouseEvent > result;
  boost::intrusive_ptr<UIMouseEvent > *argp1 ;
  boost::intrusive_ptr<IAnnotation > *argp2 ;
  boost::intrusive_ptr<IViewModel > *argp3 ;
  
  argp1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<UIMouseEvent >", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (boost::intrusive_ptr<IAnnotation > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IAnnotation >", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (boost::intrusive_ptr<IViewModel > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IViewModel >", 0);
    return 0;
  }
  arg3 = *argp3; 
  
  try
  {
    result = AnnotationMouseEvent::create(arg1,arg2,arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<AnnotationMouseEvent >((boost::intrusive_ptr<AnnotationMouseEvent > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnnotationMouseEvent(void * jarg1) {
  AnnotationMouseEvent *arg1 = (AnnotationMouseEvent *) 0 ;
  
  arg1 = (AnnotationMouseEvent *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_getAnnotation(void * jarg1) {
  void * jresult ;
  AnnotationMouseEvent *arg1 = (AnnotationMouseEvent *) 0 ;
  boost::intrusive_ptr<IAnnotation > result;
  
  arg1 = (AnnotationMouseEvent *)jarg1; 
  
  try
  {
    result = (arg1)->getAnnotation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IAnnotation >((boost::intrusive_ptr<IAnnotation > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_getViewModel(void * jarg1) {
  void * jresult ;
  AnnotationMouseEvent *arg1 = (AnnotationMouseEvent *) 0 ;
  boost::intrusive_ptr<IViewModel > result;
  
  arg1 = (AnnotationMouseEvent *)jarg1; 
  
  try
  {
    result = (arg1)->getViewModel();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IViewModel >((boost::intrusive_ptr<IViewModel > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_dynamic_cast(void * jarg1) {
  void * jresult ;
  NotifierEvent *arg1 = (NotifierEvent *) 0 ;
  AnnotationMouseEvent *result = 0 ;
  
  arg1 = (NotifierEvent *)jarg1; 
  {
    // TODO maybe we shouldn't completely override global exception handler,
    // but somehow extend it?
    result = (AnnotationMouseEvent *)AnnotationMouseEvent_dynamic_cast(arg1);
    if (!result)
    {
      // TODO this should be InvalidCastException
      SWIG_CSharpSetPendingException(
        SWIG_CSharpInvalidCastException,
        "C++ dynamic_cast<"
        "AnnotationMouseEvent"
        ">("
        "NotifierEvent"
        ") failed"); // seems that this needs to be on separate line
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolTipRequest(UnmanagedString * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  ToolTipRequest *result = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  
  // Generated from typemap(in) const string &
  std::string str_arg1;
  ConsumeUnmanagedString(jarg1, str_arg1);
  arg1 = &str_arg1;
  
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  
  try
  {
    result = (ToolTipRequest *)new ToolTipRequest((std::string const &)*arg1,(int const &)*arg2,(int const &)*arg3,(int const &)*arg4);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToolTipRequest_create(UnmanagedString * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  boost::intrusive_ptr<ToolTipRequest > result;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  
  // Generated from typemap(in) const string &
  std::string str_arg1;
  ConsumeUnmanagedString(jarg1, str_arg1);
  arg1 = &str_arg1;
  
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  
  try
  {
    result = ToolTipRequest::create((std::string const &)*arg1,(int const &)*arg2,(int const &)*arg3,(int const &)*arg4);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ToolTipRequest >((boost::intrusive_ptr<ToolTipRequest > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToolTipRequest(void * jarg1) {
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ToolTipRequest_getMessage(void * jarg1) {
  UnmanagedString * jresult ;
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  
  try
  {
    {
      std::string const &_result_ref = ((ToolTipRequest const *)arg1)->getMessage();
      result = (std::string *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) const string &
  jresult = CreateUnmanagedString(*result);
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTipRequest_getX(void * jarg1) {
  int jresult ;
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  int *result = 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = ((ToolTipRequest const *)arg1)->getX();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTipRequest_getY(void * jarg1) {
  int jresult ;
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  int *result = 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = ((ToolTipRequest const *)arg1)->getY();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTipRequest_getPeriod(void * jarg1) {
  int jresult ;
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  int *result = 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = ((ToolTipRequest const *)arg1)->getPeriod();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIEvent_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<UIEvent > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<UIEvent > *)new boost::intrusive_ptr<UIEvent >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIEvent_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UIEvent *arg1 = (UIEvent *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<UIEvent > *result = 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<UIEvent > *)new boost::intrusive_ptr<UIEvent >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIEvent_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  UIEvent *arg1 = (UIEvent *) 0 ;
  boost::intrusive_ptr<UIEvent > *result = 0 ;
  
  arg1 = (UIEvent *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<UIEvent > *)new boost::intrusive_ptr<UIEvent >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIEvent_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = 0 ;
  boost::intrusive_ptr<UIEvent > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<UIEvent > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<UIEvent > *)new boost::intrusive_ptr<UIEvent >((boost::intrusive_ptr<UIEvent > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIEvent_SPtr(void * jarg1) {
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIEvent_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIEvent_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  UIEvent *arg2 = (UIEvent *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  arg2 = (UIEvent *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIEvent_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  UIEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    result = (UIEvent *)((boost::intrusive_ptr<UIEvent > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIEvent_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  UIEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    {
      UIEvent &_result_ref = ((boost::intrusive_ptr<UIEvent > const *)arg1)->operator *();
      result = (UIEvent *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIEvent_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  UIEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    result = (UIEvent *)((boost::intrusive_ptr<UIEvent > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIEvent_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  boost::intrusive_ptr<UIEvent > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  arg2 = (boost::intrusive_ptr<UIEvent > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<UIEvent > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_UIEvent_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_UIEvent_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIEvent_SPtr_create(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  boost::intrusive_ptr<UIEvent > result;
  bool temp2 ;
  bool temp3 ;
  bool temp4 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  
  try
  {
    result = (*arg1)->create((bool const &)*arg2,(bool const &)*arg3,(bool const &)*arg4);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<UIEvent >((boost::intrusive_ptr<UIEvent > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_SPtr_isConsumed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isConsumed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIEvent_SPtr_setConsumed(void * jarg1) {
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    (*arg1)->setConsumed();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_SPtr_isAltKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isAltKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_SPtr_isCtrlKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isCtrlKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIEvent_SPtr_isShiftKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIEvent > *arg1 = (boost::intrusive_ptr<UIEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isShiftKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIKeyEvent_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<UIKeyEvent > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<UIKeyEvent > *)new boost::intrusive_ptr<UIKeyEvent >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIKeyEvent_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UIKeyEvent *arg1 = (UIKeyEvent *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<UIKeyEvent > *result = 0 ;
  
  arg1 = (UIKeyEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<UIKeyEvent > *)new boost::intrusive_ptr<UIKeyEvent >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIKeyEvent_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  UIKeyEvent *arg1 = (UIKeyEvent *) 0 ;
  boost::intrusive_ptr<UIKeyEvent > *result = 0 ;
  
  arg1 = (UIKeyEvent *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<UIKeyEvent > *)new boost::intrusive_ptr<UIKeyEvent >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIKeyEvent_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = 0 ;
  boost::intrusive_ptr<UIKeyEvent > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<UIKeyEvent > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<UIKeyEvent > *)new boost::intrusive_ptr<UIKeyEvent >((boost::intrusive_ptr<UIKeyEvent > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIKeyEvent_SPtr(void * jarg1) {
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIKeyEvent_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIKeyEvent_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  UIKeyEvent *arg2 = (UIKeyEvent *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  arg2 = (UIKeyEvent *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIKeyEvent_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  UIKeyEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    result = (UIKeyEvent *)((boost::intrusive_ptr<UIKeyEvent > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIKeyEvent_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  UIKeyEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      UIKeyEvent &_result_ref = ((boost::intrusive_ptr<UIKeyEvent > const *)arg1)->operator *();
      result = (UIKeyEvent *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIKeyEvent_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  UIKeyEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    result = (UIKeyEvent *)((boost::intrusive_ptr<UIKeyEvent > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIKeyEvent_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  boost::intrusive_ptr<UIKeyEvent > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  arg2 = (boost::intrusive_ptr<UIKeyEvent > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<UIKeyEvent > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_UIKeyEvent_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_UIKeyEvent_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIKeyEvent_SPtr_create(void * jarg1, char jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  char *arg2 = 0 ;
  int *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  boost::intrusive_ptr<UIKeyEvent > result;
  char temp2 ;
  int temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  
  try
  {
    result = (*arg1)->create((char const &)*arg2,(int const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<UIKeyEvent >((boost::intrusive_ptr<UIKeyEvent > &)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_UIKeyEvent_SPtr_getKeyChar(void * jarg1) {
  char jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  char *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      char const &_result_ref = (*arg1)->getKeyChar();
      result = (char *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_getKeyCode(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  int *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = (*arg1)->getKeyCode();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isKeyChar(void * jarg1, char jarg2) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  char *arg2 = 0 ;
  bool result;
  char temp2 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    result = (bool)(*arg1)->isKeyChar((char const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isConsumed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isConsumed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIKeyEvent_SPtr_setConsumed(void * jarg1) {
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    (*arg1)->setConsumed();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isAltKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isAltKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isCtrlKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isCtrlKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIKeyEvent_SPtr_isShiftKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIKeyEvent > *arg1 = (boost::intrusive_ptr<UIKeyEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIKeyEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isShiftKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIMouseEvent_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<UIMouseEvent > *)new boost::intrusive_ptr<UIMouseEvent >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIMouseEvent_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<UIMouseEvent > *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<UIMouseEvent > *)new boost::intrusive_ptr<UIMouseEvent >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIMouseEvent_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  UIMouseEvent *arg1 = (UIMouseEvent *) 0 ;
  boost::intrusive_ptr<UIMouseEvent > *result = 0 ;
  
  arg1 = (UIMouseEvent *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<UIMouseEvent > *)new boost::intrusive_ptr<UIMouseEvent >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIMouseEvent_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = 0 ;
  boost::intrusive_ptr<UIMouseEvent > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<UIMouseEvent > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<UIMouseEvent > *)new boost::intrusive_ptr<UIMouseEvent >((boost::intrusive_ptr<UIMouseEvent > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIMouseEvent_SPtr(void * jarg1) {
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIMouseEvent_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIMouseEvent_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  UIMouseEvent *arg2 = (UIMouseEvent *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  arg2 = (UIMouseEvent *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIMouseEvent_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  UIMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    result = (UIMouseEvent *)((boost::intrusive_ptr<UIMouseEvent > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIMouseEvent_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  UIMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      UIMouseEvent &_result_ref = ((boost::intrusive_ptr<UIMouseEvent > const *)arg1)->operator *();
      result = (UIMouseEvent *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIMouseEvent_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  UIMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    result = (UIMouseEvent *)((boost::intrusive_ptr<UIMouseEvent > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIMouseEvent_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  boost::intrusive_ptr<UIMouseEvent > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  arg2 = (boost::intrusive_ptr<UIMouseEvent > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<UIMouseEvent > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_UIMouseEvent_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_UIMouseEvent_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIMouseEvent_SPtr_create(void * jarg1, double jarg2, double jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  int *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  bool *arg9 = 0 ;
  bool *arg10 = 0 ;
  boost::intrusive_ptr<UIMouseEvent > result;
  double temp2 ;
  double temp3 ;
  int temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool temp8 ;
  bool temp9 ;
  bool temp10 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false; 
  arg7 = &temp7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  temp9 = jarg9 ? true : false; 
  arg9 = &temp9; 
  temp10 = jarg10 ? true : false; 
  arg10 = &temp10; 
  
  try
  {
    result = (*arg1)->create((double const &)*arg2,(double const &)*arg3,(int const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7,(bool const &)*arg8,(bool const &)*arg9,(bool const &)*arg10);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<UIMouseEvent >((boost::intrusive_ptr<UIMouseEvent > &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UIMouseEvent_SPtr_getMouseX(void * jarg1) {
  double jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  double *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      double const &_result_ref = (*arg1)->getMouseX();
      result = (double *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UIMouseEvent_SPtr_getMouseY(void * jarg1) {
  double jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  double *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      double const &_result_ref = (*arg1)->getMouseY();
      result = (double *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_getWheelDelta(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  int *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = (*arg1)->getWheelDelta();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isLeftButtonDown(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isLeftButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isRightButtonDown(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isRightButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isMiddleButtonDown(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isMiddleButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UIMouseEvent_SPtr_mouseDistanceFrom(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double result;
  double temp2 ;
  double temp3 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    result = (double)(*arg1)->mouseDistanceFrom((double const &)*arg2,(double const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isInsideRect(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool result;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    result = (bool)(*arg1)->isInsideRect((double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isConsumed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isConsumed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIMouseEvent_SPtr_setConsumed(void * jarg1) {
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    (*arg1)->setConsumed();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isAltKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isAltKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isCtrlKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isCtrlKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIMouseEvent_SPtr_isShiftKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<UIMouseEvent > *arg1 = (boost::intrusive_ptr<UIMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<UIMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isShiftKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationMouseEvent_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<AnnotationMouseEvent > *)new boost::intrusive_ptr<AnnotationMouseEvent >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationMouseEvent_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AnnotationMouseEvent *arg1 = (AnnotationMouseEvent *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<AnnotationMouseEvent > *result = 0 ;
  
  arg1 = (AnnotationMouseEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<AnnotationMouseEvent > *)new boost::intrusive_ptr<AnnotationMouseEvent >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationMouseEvent_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  AnnotationMouseEvent *arg1 = (AnnotationMouseEvent *) 0 ;
  boost::intrusive_ptr<AnnotationMouseEvent > *result = 0 ;
  
  arg1 = (AnnotationMouseEvent *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<AnnotationMouseEvent > *)new boost::intrusive_ptr<AnnotationMouseEvent >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationMouseEvent_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = 0 ;
  boost::intrusive_ptr<AnnotationMouseEvent > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<AnnotationMouseEvent > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<AnnotationMouseEvent > *)new boost::intrusive_ptr<AnnotationMouseEvent >((boost::intrusive_ptr<AnnotationMouseEvent > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnnotationMouseEvent_SPtr(void * jarg1) {
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  AnnotationMouseEvent *arg2 = (AnnotationMouseEvent *) 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  arg2 = (AnnotationMouseEvent *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  AnnotationMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    result = (AnnotationMouseEvent *)((boost::intrusive_ptr<AnnotationMouseEvent > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  AnnotationMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      AnnotationMouseEvent &_result_ref = ((boost::intrusive_ptr<AnnotationMouseEvent > const *)arg1)->operator *();
      result = (AnnotationMouseEvent *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  AnnotationMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    result = (AnnotationMouseEvent *)((boost::intrusive_ptr<AnnotationMouseEvent > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  arg2 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<AnnotationMouseEvent > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_AnnotationMouseEvent_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_AnnotationMouseEvent_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_create(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  boost::intrusive_ptr<UIMouseEvent > arg2 ;
  boost::intrusive_ptr<IAnnotation > arg3 ;
  boost::intrusive_ptr<IViewModel > arg4 ;
  boost::intrusive_ptr<AnnotationMouseEvent > result;
  boost::intrusive_ptr<UIMouseEvent > *argp2 ;
  boost::intrusive_ptr<IAnnotation > *argp3 ;
  boost::intrusive_ptr<IViewModel > *argp4 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  argp2 = (boost::intrusive_ptr<UIMouseEvent > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<UIMouseEvent >", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (boost::intrusive_ptr<IAnnotation > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IAnnotation >", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (boost::intrusive_ptr<IViewModel > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::intrusive_ptr<IViewModel >", 0);
    return 0;
  }
  arg4 = *argp4; 
  
  try
  {
    result = (*arg1)->create(arg2,arg3,arg4);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<AnnotationMouseEvent >((boost::intrusive_ptr<AnnotationMouseEvent > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_getAnnotation(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  boost::intrusive_ptr<IAnnotation > result;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    result = (*arg1)->getAnnotation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IAnnotation >((boost::intrusive_ptr<IAnnotation > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_getViewModel(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  boost::intrusive_ptr<IViewModel > result;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    result = (*arg1)->getViewModel();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IViewModel >((boost::intrusive_ptr<IViewModel > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_dynamic_cast(void * jarg1, void * jarg2) {
  void * jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  NotifierEvent *arg2 = (NotifierEvent *) 0 ;
  AnnotationMouseEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  arg2 = (NotifierEvent *)jarg2; 
  {
    // TODO maybe we shouldn't completely override global exception handler,
    // but somehow extend it?
    result = (AnnotationMouseEvent *)AnnotationMouseEvent_dynamic_cast(arg2);
    if (!result)
    {
      // TODO this should be InvalidCastException
      SWIG_CSharpSetPendingException(
        SWIG_CSharpInvalidCastException,
        "C++ dynamic_cast<"
        "AnnotationMouseEvent"
        ">("
        "NotifierEvent"
        ") failed"); // seems that this needs to be on separate line
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_getMouseX(void * jarg1) {
  double jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  double *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      double const &_result_ref = (*arg1)->getMouseX();
      result = (double *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_getMouseY(void * jarg1) {
  double jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  double *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      double const &_result_ref = (*arg1)->getMouseY();
      result = (double *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_getWheelDelta(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  int *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = (*arg1)->getWheelDelta();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isLeftButtonDown(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isLeftButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isRightButtonDown(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isRightButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isMiddleButtonDown(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isMiddleButtonDown();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_mouseDistanceFrom(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double result;
  double temp2 ;
  double temp3 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    result = (double)(*arg1)->mouseDistanceFrom((double const &)*arg2,(double const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isInsideRect(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool result;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    result = (bool)(*arg1)->isInsideRect((double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isConsumed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isConsumed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_setConsumed(void * jarg1) {
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    (*arg1)->setConsumed();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isAltKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isAltKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isCtrlKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isCtrlKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnnotationMouseEvent_SPtr_isShiftKeyPressed(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<AnnotationMouseEvent > *arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<AnnotationMouseEvent > *)jarg1; 
  
  try
  {
    {
      bool const &_result_ref = (*arg1)->isShiftKeyPressed();
      result = (bool *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IAnnotation_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<IAnnotation > *)new boost::intrusive_ptr<IAnnotation >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IAnnotation_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<IAnnotation > *result = 0 ;
  
  arg1 = (IAnnotation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<IAnnotation > *)new boost::intrusive_ptr<IAnnotation >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IAnnotation_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  IAnnotation *arg1 = (IAnnotation *) 0 ;
  boost::intrusive_ptr<IAnnotation > *result = 0 ;
  
  arg1 = (IAnnotation *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<IAnnotation > *)new boost::intrusive_ptr<IAnnotation >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IAnnotation_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = 0 ;
  boost::intrusive_ptr<IAnnotation > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IAnnotation > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<IAnnotation > *)new boost::intrusive_ptr<IAnnotation >((boost::intrusive_ptr<IAnnotation > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAnnotation_SPtr(void * jarg1) {
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnnotation_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnnotation_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  IAnnotation *arg2 = (IAnnotation *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  arg2 = (IAnnotation *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  IAnnotation *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    result = (IAnnotation *)((boost::intrusive_ptr<IAnnotation > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  IAnnotation *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    {
      IAnnotation &_result_ref = ((boost::intrusive_ptr<IAnnotation > const *)arg1)->operator *();
      result = (IAnnotation *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  IAnnotation *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    result = (IAnnotation *)((boost::intrusive_ptr<IAnnotation > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnnotation_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  boost::intrusive_ptr<IAnnotation > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  arg2 = (boost::intrusive_ptr<IAnnotation > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IAnnotation > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnnotation_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IAnnotation_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnnotation_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IAnnotation_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr_getProcRef(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  ProcRef *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    {
      ProcRef const &_result_ref = (*arg1)->getProcRef();
      result = (ProcRef *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr_getProcess(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  boost::intrusive_ptr<IProcess > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    {
      boost::intrusive_ptr<IProcess > const &_result_ref = (*arg1)->getProcess();
      result = (boost::intrusive_ptr<IProcess > *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_IAnnotation_SPtr_getFeatureID(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    {
      std::string const &_result_ref = (*arg1)->getFeatureID();
      result = (std::string *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) const string &
  jresult = CreateUnmanagedString(*result);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr_getViewModel(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  boost::intrusive_ptr<IViewModel > result;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    result = (*arg1)->getViewModel();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IViewModel >((boost::intrusive_ptr<IViewModel > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnnotation_SPtr_getFeature(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IAnnotation > *arg1 = (boost::intrusive_ptr<IAnnotation > *) 0 ;
  boost::intrusive_ptr<IFeature > result;
  
  arg1 = (boost::intrusive_ptr<IAnnotation > *)jarg1; 
  
  try
  {
    result = (*arg1)->getFeature();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IFeature >((boost::intrusive_ptr<IFeature > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewEvent_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<ViewEvent > *)new boost::intrusive_ptr<ViewEvent >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewEvent_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ViewEvent *arg1 = (ViewEvent *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<ViewEvent > *result = 0 ;
  
  arg1 = (ViewEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<ViewEvent > *)new boost::intrusive_ptr<ViewEvent >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewEvent_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  ViewEvent *arg1 = (ViewEvent *) 0 ;
  boost::intrusive_ptr<ViewEvent > *result = 0 ;
  
  arg1 = (ViewEvent *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<ViewEvent > *)new boost::intrusive_ptr<ViewEvent >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewEvent_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = 0 ;
  boost::intrusive_ptr<ViewEvent > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ViewEvent > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<ViewEvent > *)new boost::intrusive_ptr<ViewEvent >((boost::intrusive_ptr<ViewEvent > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ViewEvent_SPtr(void * jarg1) {
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewEvent_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewEvent_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  ViewEvent *arg2 = (ViewEvent *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  arg2 = (ViewEvent *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  ViewEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    result = (ViewEvent *)((boost::intrusive_ptr<ViewEvent > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  ViewEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    {
      ViewEvent &_result_ref = ((boost::intrusive_ptr<ViewEvent > const *)arg1)->operator *();
      result = (ViewEvent *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  ViewEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    result = (ViewEvent *)((boost::intrusive_ptr<ViewEvent > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewEvent_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  boost::intrusive_ptr<ViewEvent > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  arg2 = (boost::intrusive_ptr<ViewEvent > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ViewEvent > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewEvent_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ViewEvent_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewEvent_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ViewEvent_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_SPtr_create(void * jarg1, UnmanagedString * jarg2) {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  std::string arg2 ;
  boost::intrusive_ptr<ViewEvent > result;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  // Generated from typemap(in) string
  ConsumeUnmanagedString(jarg2, arg2);
  
  
  try
  {
    result = (*arg1)->create(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ViewEvent >((boost::intrusive_ptr<ViewEvent > &)result); 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ViewEvent_SPtr_getValue(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  std::string result;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  
  try
  {
    result = (*arg1)->getValue();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewEvent_SPtr_dynamic_cast(void * jarg1, void * jarg2) {
  void * jresult ;
  boost::intrusive_ptr<ViewEvent > *arg1 = (boost::intrusive_ptr<ViewEvent > *) 0 ;
  NotifierEvent *arg2 = (NotifierEvent *) 0 ;
  ViewEvent *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewEvent > *)jarg1; 
  arg2 = (NotifierEvent *)jarg2; 
  {
    // TODO maybe we shouldn't completely override global exception handler,
    // but somehow extend it?
    result = (ViewEvent *)ViewEvent_dynamic_cast(arg2);
    if (!result)
    {
      // TODO this should be InvalidCastException
      SWIG_CSharpSetPendingException(
        SWIG_CSharpInvalidCastException,
        "C++ dynamic_cast<"
        "ViewEvent"
        ">("
        "NotifierEvent"
        ") failed"); // seems that this needs to be on separate line
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewHandle_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<ViewHandle > *)new boost::intrusive_ptr<ViewHandle >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewHandle_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<ViewHandle > *result = 0 ;
  
  arg1 = (ViewHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<ViewHandle > *)new boost::intrusive_ptr<ViewHandle >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewHandle_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  ViewHandle *arg1 = (ViewHandle *) 0 ;
  boost::intrusive_ptr<ViewHandle > *result = 0 ;
  
  arg1 = (ViewHandle *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<ViewHandle > *)new boost::intrusive_ptr<ViewHandle >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewHandle_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = 0 ;
  boost::intrusive_ptr<ViewHandle > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ViewHandle > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<ViewHandle > *)new boost::intrusive_ptr<ViewHandle >((boost::intrusive_ptr<ViewHandle > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ViewHandle_SPtr(void * jarg1) {
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  ViewHandle *arg2 = (ViewHandle *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  arg2 = (ViewHandle *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  ViewHandle *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (ViewHandle *)((boost::intrusive_ptr<ViewHandle > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  ViewHandle *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    {
      ViewHandle &_result_ref = ((boost::intrusive_ptr<ViewHandle > const *)arg1)->operator *();
      result = (ViewHandle *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  ViewHandle *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (ViewHandle *)((boost::intrusive_ptr<ViewHandle > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  boost::intrusive_ptr<ViewHandle > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  arg2 = (boost::intrusive_ptr<ViewHandle > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ViewHandle > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewHandle_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ViewHandle_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewHandle_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ViewHandle_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_SPtr_create(void * jarg1, int jarg2) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  int arg2 ;
  boost::intrusive_ptr<ViewHandle > result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    result = (*arg1)->create(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ViewHandle >((boost::intrusive_ptr<ViewHandle > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_SPtr_getID(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getID();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_SPtr_getViewPointProcess(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (*arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_SPtr_getViewportWidth(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getViewportWidth();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_SPtr_getViewportHeight(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getViewportHeight();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_SPtr_getMouseX(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getMouseX();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewHandle_SPtr_getMouseY(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getMouseY();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewHandle_SPtr_getPointerLocation(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  try
  {
    result = (*arg1)->getPointerLocation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_SPtr_showToolTip__SWIG_0(void * jarg1, UnmanagedString * jarg2, int jarg3) {
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    (*arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewHandle_SPtr_showToolTip__SWIG_1(void * jarg1, UnmanagedString * jarg2, int jarg3, int jarg4, int jarg5) {
  boost::intrusive_ptr<ViewHandle > *arg1 = (boost::intrusive_ptr<ViewHandle > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  
  arg1 = (boost::intrusive_ptr<ViewHandle > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    (*arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IViewModel_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<IViewModel > *)new boost::intrusive_ptr<IViewModel >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IViewModel_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<IViewModel > *result = 0 ;
  
  arg1 = (IViewModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<IViewModel > *)new boost::intrusive_ptr<IViewModel >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IViewModel_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  IViewModel *arg1 = (IViewModel *) 0 ;
  boost::intrusive_ptr<IViewModel > *result = 0 ;
  
  arg1 = (IViewModel *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<IViewModel > *)new boost::intrusive_ptr<IViewModel >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IViewModel_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = 0 ;
  boost::intrusive_ptr<IViewModel > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IViewModel > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<IViewModel > *)new boost::intrusive_ptr<IViewModel >((boost::intrusive_ptr<IViewModel > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IViewModel_SPtr(void * jarg1) {
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  IViewModel *arg2 = (IViewModel *) 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  arg2 = (IViewModel *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  IViewModel *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (IViewModel *)((boost::intrusive_ptr<IViewModel > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  IViewModel *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    {
      IViewModel &_result_ref = ((boost::intrusive_ptr<IViewModel > const *)arg1)->operator *();
      result = (IViewModel *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  IViewModel *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (IViewModel *)((boost::intrusive_ptr<IViewModel > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  boost::intrusive_ptr<IViewModel > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  arg2 = (boost::intrusive_ptr<IViewModel > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<IViewModel > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IViewModel_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IViewModel_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IViewModel_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_IViewModel_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_SPtr_getID(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getID();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_SPtr_getViewPointProcess(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  boost::intrusive_ptr<IProcess > result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (*arg1)->getViewPointProcess();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<IProcess >((boost::intrusive_ptr<IProcess > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_SPtr_getViewportWidth(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getViewportWidth();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_SPtr_getViewportHeight(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getViewportHeight();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_SPtr_getMouseX(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getMouseX();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IViewModel_SPtr_getMouseY(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  int result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (int)(*arg1)->getMouseY();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IViewModel_SPtr_getPointerLocation(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  PYXCoord3DDouble result;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  try
  {
    result = (*arg1)->getPointerLocation();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new PYXCoord3DDouble((PYXCoord3DDouble &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_SPtr_showToolTip__SWIG_0(void * jarg1, UnmanagedString * jarg2, int jarg3) {
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    (*arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IViewModel_SPtr_showToolTip__SWIG_1(void * jarg1, UnmanagedString * jarg2, int jarg3, int jarg4, int jarg5) {
  boost::intrusive_ptr<IViewModel > *arg1 = (boost::intrusive_ptr<IViewModel > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  
  arg1 = (boost::intrusive_ptr<IViewModel > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    (*arg1)->showToolTip((std::string const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolTipRequest_SPtr__SWIG_0() {
  void * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *result = 0 ;
  
  
  try
  {
    result = (boost::intrusive_ptr<ToolTipRequest > *)new boost::intrusive_ptr<ToolTipRequest >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolTipRequest_SPtr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr<ToolTipRequest > *result = 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try
  {
    result = (boost::intrusive_ptr<ToolTipRequest > *)new boost::intrusive_ptr<ToolTipRequest >(arg1,arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolTipRequest_SPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  ToolTipRequest *arg1 = (ToolTipRequest *) 0 ;
  boost::intrusive_ptr<ToolTipRequest > *result = 0 ;
  
  arg1 = (ToolTipRequest *)jarg1; 
  
  try
  {
    result = (boost::intrusive_ptr<ToolTipRequest > *)new boost::intrusive_ptr<ToolTipRequest >(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolTipRequest_SPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = 0 ;
  boost::intrusive_ptr<ToolTipRequest > *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ToolTipRequest > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = (boost::intrusive_ptr<ToolTipRequest > *)new boost::intrusive_ptr<ToolTipRequest >((boost::intrusive_ptr<ToolTipRequest > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToolTipRequest_SPtr(void * jarg1) {
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTipRequest_SPtr_reset__SWIG_0(void * jarg1) {
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    (arg1)->reset();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTipRequest_SPtr_reset__SWIG_1(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  ToolTipRequest *arg2 = (ToolTipRequest *) 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  arg2 = (ToolTipRequest *)jarg2; 
  
  try
  {
    (arg1)->reset(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToolTipRequest_SPtr_get(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  ToolTipRequest *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    result = (ToolTipRequest *)((boost::intrusive_ptr<ToolTipRequest > const *)arg1)->get();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToolTipRequest_SPtr___ref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  ToolTipRequest *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    {
      ToolTipRequest &_result_ref = ((boost::intrusive_ptr<ToolTipRequest > const *)arg1)->operator *();
      result = (ToolTipRequest *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToolTipRequest_SPtr___deref__(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  ToolTipRequest *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    result = (ToolTipRequest *)((boost::intrusive_ptr<ToolTipRequest > const *)arg1)->operator ->();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTipRequest_SPtr_swap(void * jarg1, void * jarg2) {
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  boost::intrusive_ptr<ToolTipRequest > *arg2 = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  arg2 = (boost::intrusive_ptr<ToolTipRequest > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<ToolTipRequest > & type is null", 0);
    return ;
  } 
  
  try
  {
    (arg1)->swap(*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToolTipRequest_SPtr_isNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ToolTipRequest_Sg__isNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToolTipRequest_SPtr_isNotNull(void * jarg1) {
  unsigned int jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  bool result;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    result = (bool)boost_intrusive_ptr_Sl_ToolTipRequest_Sg__isNotNull(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToolTipRequest_SPtr_create(void * jarg1, UnmanagedString * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  boost::intrusive_ptr<ToolTipRequest > result;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  // Generated from typemap(in) const string &
  std::string str_arg2;
  ConsumeUnmanagedString(jarg2, str_arg2);
  arg2 = &str_arg2;
  
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  
  try
  {
    result = (*arg1)->create((std::string const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<ToolTipRequest >((boost::intrusive_ptr<ToolTipRequest > &)result); 
  return jresult;
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_ToolTipRequest_SPtr_getMessage(void * jarg1) {
  UnmanagedString * jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    {
      std::string const &_result_ref = (*arg1)->getMessage();
      result = (std::string *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) const string &
  jresult = CreateUnmanagedString(*result);
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTipRequest_SPtr_getX(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  int *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = (*arg1)->getX();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTipRequest_SPtr_getY(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  int *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = (*arg1)->getY();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTipRequest_SPtr_getPeriod(void * jarg1) {
  int jresult ;
  boost::intrusive_ptr<ToolTipRequest > *arg1 = (boost::intrusive_ptr<ToolTipRequest > *) 0 ;
  int *result = 0 ;
  
  arg1 = (boost::intrusive_ptr<ToolTipRequest > *)jarg1; 
  
  try
  {
    {
      int const &_result_ref = (*arg1)->getPeriod();
      result = (int *) &_result_ref;
    }
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_Clear(void * jarg1) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  
  try
  {
    (arg1)->clear();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_Add(void * jarg1, float jarg2) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::value_type *arg2 = 0 ;
  std::vector<float >::value_type temp2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  temp2 = (std::vector<float >::value_type)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    (arg1)->push_back((std::vector<float >::value_type const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorOfFloat_size(void * jarg1) {
  unsigned long jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::size_type result;
  
  arg1 = (std::vector<float > *)jarg1; 
  
  try
  {
    result = ((std::vector<float > const *)arg1)->size();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorOfFloat_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::size_type result;
  
  arg1 = (std::vector<float > *)jarg1; 
  
  try
  {
    result = ((std::vector<float > const *)arg1)->capacity();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_reserve(void * jarg1, unsigned long jarg2) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::size_type arg2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (std::vector<float >::size_type)jarg2; 
  
  try
  {
    (arg1)->reserve(arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorOfFloat__SWIG_0() {
  void * jresult ;
  std::vector<float > *result = 0 ;
  
  
  try
  {
    result = (std::vector<float > *)new std::vector<float >();
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorOfFloat__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector<float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  
  try
  {
    try {
      result = (std::vector<float > *)new_std_vector_Sl_float_Sg___SWIG_1(arg1);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return 0;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VectorOfFloat_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    try {
      result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return 0;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VectorOfFloat_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  std::vector<float >::value_type *result = 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    try {
      {
        std::vector<float >::const_reference _result_ref = std_vector_Sl_float_Sg__getitem(arg1,arg2);
        result = (std::vector<float >::value_type *) &_result_ref;
      }
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return 0;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  std::vector<float >::value_type *arg3 = 0 ;
  std::vector<float >::value_type temp3 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<float >::value_type)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_AddRange(void * jarg1, void * jarg2) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float > *arg2 = 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (std::vector<float > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<float > const & type is null", 0);
    return ;
  } 
  
  try
  {
    std_vector_Sl_float_Sg__AddRange(arg1,(std::vector<float > const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorOfFloat_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<float > *result = 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  try
  {
    try {
      result = (std::vector<float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return 0;
    }
    catch(std::invalid_argument &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
      return 0;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  std::vector<float >::value_type *arg3 = 0 ;
  std::vector<float >::value_type temp3 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<float >::value_type)jarg3; 
  arg3 = &temp3; 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  std::vector<float > *arg3 = 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<float > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<float > const & type is null", 0);
    return ;
  } 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector<float > const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_RemoveAt(void * jarg1, int jarg2) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    catch(std::invalid_argument &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorOfFloat_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  std::vector<float >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector<float > *result = 0 ;
  std::vector<float >::value_type temp1 ;
  
  temp1 = (std::vector<float >::value_type)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  
  try
  {
    try {
      result = (std::vector<float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return 0;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_Reverse__SWIG_0(void * jarg1) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  
  try
  {
    std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    catch(std::invalid_argument &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  int arg2 ;
  std::vector<float > *arg3 = 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<float > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<float > const & type is null", 0);
    return ;
  } 
  
  try
  {
    try {
      std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector<float > const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
      return ;
    }
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorOfFloat_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::value_type *arg2 = 0 ;
  bool result;
  std::vector<float >::value_type temp2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  temp2 = (std::vector<float >::value_type)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorOfFloat_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::value_type *arg2 = 0 ;
  int result;
  std::vector<float >::value_type temp2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  temp2 = (std::vector<float >::value_type)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorOfFloat_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::value_type *arg2 = 0 ;
  int result;
  std::vector<float >::value_type temp2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  temp2 = (std::vector<float >::value_type)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorOfFloat_Remove(void * jarg1, float jarg2) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  std::vector<float >::value_type *arg2 = 0 ;
  std::vector<float >::value_type temp2 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  temp2 = (std::vector<float >::value_type)jarg2; 
  arg2 = &temp2; 
  
  try
  {
    std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorOfFloat(void * jarg1) {
  std::vector<float > *arg1 = (std::vector<float > *) 0 ;
  
  arg1 = (std::vector<float > *)jarg1; 
  
  try
  {
    delete arg1;
    
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
}


SWIGEXPORT UnmanagedString * SWIGSTDCALL CSharp_camToCookieStr(void * jarg1) {
  UnmanagedString * jresult ;
  Camera *arg1 = 0 ;
  std::string result;
  
  arg1 = (Camera *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Camera const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = camToCookieStr((Camera const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  
  // Generated from typemap(out) string
  jresult = CreateUnmanagedString(result);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicPointerCast_GoToPipelineCommand(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<Command > *arg1 = 0 ;
  boost::intrusive_ptr<GoToPipelineCommand > result;
  
  arg1 = (boost::intrusive_ptr<Command > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<Command > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = DynamicPointerCast_GoToPipelineCommand((boost::intrusive_ptr<Command > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<GoToPipelineCommand >((boost::intrusive_ptr<GoToPipelineCommand > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicPointerCast_Command(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand > *arg1 = 0 ;
  boost::intrusive_ptr<Command > result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<GoToPipelineCommand > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = DynamicPointerCast_Command((boost::intrusive_ptr<GoToPipelineCommand > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<Command >((boost::intrusive_ptr<Command > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicPointerCast_const_GoToPipelineCommand(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<Command const > *arg1 = 0 ;
  boost::intrusive_ptr<GoToPipelineCommand const > result;
  
  arg1 = (boost::intrusive_ptr<Command const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<Command const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = DynamicPointerCast_const_GoToPipelineCommand((boost::intrusive_ptr<Command const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<GoToPipelineCommand const >((boost::intrusive_ptr<GoToPipelineCommand const > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicPointerCast_const_Command(void * jarg1) {
  void * jresult ;
  boost::intrusive_ptr<GoToPipelineCommand const > *arg1 = 0 ;
  boost::intrusive_ptr<Command const > result;
  
  arg1 = (boost::intrusive_ptr<GoToPipelineCommand const > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::intrusive_ptr<GoToPipelineCommand const > const & type is null", 0);
    return 0;
  } 
  
  try
  {
    result = DynamicPointerCast_const_Command((boost::intrusive_ptr<GoToPipelineCommand const > const &)*arg1);
  }
  catch (PYXException& e)
  {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.getFullErrorString().c_str());
  }
  
  jresult = new boost::intrusive_ptr<Command const >((boost::intrusive_ptr<Command const > &)result); 
  return jresult;
}


SWIGEXPORT Command * SWIGSTDCALL CSharp_GoToPipelineCommandUpcast(GoToPipelineCommand *objectRef) {
    return (Command *)objectRef;
}

SWIGEXPORT NotifierEvent * SWIGSTDCALL CSharp_ViewEventUpcast(ViewEvent *objectRef) {
    return (NotifierEvent *)objectRef;
}

SWIGEXPORT NotifierEvent * SWIGSTDCALL CSharp_UIEventUpcast(UIEvent *objectRef) {
    return (NotifierEvent *)objectRef;
}

SWIGEXPORT UIEvent * SWIGSTDCALL CSharp_UIKeyEventUpcast(UIKeyEvent *objectRef) {
    return (UIEvent *)objectRef;
}

SWIGEXPORT UIEvent * SWIGSTDCALL CSharp_UIMouseEventUpcast(UIMouseEvent *objectRef) {
    return (UIEvent *)objectRef;
}

SWIGEXPORT IViewModel * SWIGSTDCALL CSharp_ViewHandleUpcast(ViewHandle *objectRef) {
    return (IViewModel *)objectRef;
}

SWIGEXPORT UIMouseEvent * SWIGSTDCALL CSharp_AnnotationMouseEventUpcast(AnnotationMouseEvent *objectRef) {
    return (UIMouseEvent *)objectRef;
}

#ifdef __cplusplus
}
#endif

